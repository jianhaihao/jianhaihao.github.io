(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{214:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"generator-函数的语法-2-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的语法-2-5","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator 函数的语法 (2.5)")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("es6")]),t._v("提供的一种异步编程解决方案")]),t._v(" "),e("li",[t._v("可以理解成为一种状态机，它封装了多个内部状态，返回一个可遍历的对象，可以依次遍历"),e("code",[t._v("Generator")]),t._v("函数内部的状态")])]),t._v(" "),e("h2",{attrs:{id:"如何定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何定义")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("function")]),t._v("关键字后面加一个"),e("code",[t._v("*")]),t._v("号")]),t._v(" "),e("li",[t._v("内部使用"),e("code",[t._v("yield")]),t._v("关键字定义每个状态")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("function")]),e("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("generatorFunction")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v("'hello'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v("'world'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v("'ending'")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ul",[e("li",[t._v("上面的"),e("code",[t._v("Generator")]),t._v("函数定义了三个状态")])]),t._v(" "),e("h2",{attrs:{id:"如何执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何执行","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何执行")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" gf "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("generatorFunction")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("和普通函数一样，用"),e("code",[t._v("()")]),t._v("括号就能直接执行"),e("code",[t._v("Generator")]),t._v("函数，返回一个包含之前"),e("code",[t._v("generatorFunction")]),t._v("函数内部定义状态的遍历器对象")]),t._v(" "),e("li",[t._v("通过"),e("code",[t._v(".next()")]),t._v("方法遍历返回的对象")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("gf"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("next")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v('// { done: false, value: "hello"}')]),t._v("\ngf"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("next")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v('// { done: false, value: "world"}')]),t._v("\ngf"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("next")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v('// { done: true, value: "ending"}')]),t._v("\n")])])]),e("ul",[e("li",[t._v("遍历器对象通过"),e("code",[t._v("next()")]),t._v("方法遍历，返回一个带"),e("code",[t._v("done")]),t._v("和"),e("code",[t._v("value")]),t._v("属性的对象，如果遍历完了，"),e("code",[t._v("done")]),t._v(" 为"),e("code",[t._v("true")]),t._v("，否则为"),e("code",[t._v("false")]),t._v("，"),e("code",[t._v("value")]),t._v("表示当前状态的值")])]),t._v(" "),e("h2",{attrs:{id:"yield-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" yield 表达式")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Generator")]),t._v("函数实际上提供了一种可暂停执行函数的方案，"),e("code",[t._v("yield")]),t._v("则作为函数的暂停点")])]),t._v(" "),e("p",[t._v("遍历器对象的"),e("code",[t._v("next()")]),t._v("执行如下")]),t._v(" "),e("ol",[e("li",[t._v("遇到"),e("code",[t._v("yield")]),t._v("表达式暂停执行，并将"),e("code",[t._v("yield")]),t._v("后面的值作为返回对象的"),e("code",[t._v("value")]),t._v("值返回")]),t._v(" "),e("li",[t._v("下一次调用"),e("code",[t._v("next()")]),t._v("方法，函数继续往下执行，直到遇到下一个"),e("code",[t._v("yield")]),t._v("表达式")]),t._v(" "),e("li",[t._v("如果没有遇到"),e("code",[t._v("yield")]),t._v("表达式，则一直执行到"),e("code",[t._v("return")]),t._v("语句，把"),e("code",[t._v("return")]),t._v("后面的指作为对象的"),e("code",[t._v("value")]),t._v("返回")]),t._v(" "),e("li",[t._v("如果没有"),e("code",[t._v("return")]),t._v("则返回的"),e("code",[t._v("value")]),t._v("为"),e("code",[t._v("undefined")])])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("yield")]),t._v("只有在声明"),e("code",[t._v("Generator")]),t._v("函数内部出现，其他地方都会报错")]),t._v(" "),e("li",[e("code",[t._v("yield")]),t._v("表达式在另一个表达式中时，要加上括号")])]),t._v(" "),e("h2",{attrs:{id:"与-iterator-关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与-iterator-关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 与 Iterator 关系")]),t._v(" "),e("p",[t._v("参照 《Iterator与for...of》，再来补充")]),t._v(" "),e("h2",{attrs:{id:"next-方法的参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#next-方法的参数","aria-hidden":"true"}},[t._v("#")]),t._v(" next 方法的参数")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("yield")]),t._v("表达式本身没有返回值，可以通过"),e("code",[t._v("next()")]),t._v("方法的参数来指定上一个"),e("code",[t._v("yield")]),t._v("表达式的返回值，这意味着可以在函数执行的过程中向函数里面注入外部的值，从而调整函数的运行方式")])]),t._v(" "),e("h2",{attrs:{id:"for-of-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-of-循环","aria-hidden":"true"}},[t._v("#")]),t._v(" for...of 循环")]),t._v(" "),e("ul",[e("li",[t._v("for...of 循环可以直接遍历"),e("code",[t._v("Generator")]),t._v("函数生成的对象，不需要"),e("code",[t._v("next")]),t._v("函数")]),t._v(" "),e("li",[t._v("一旦"),e("code",[t._v("next")]),t._v("方法返回对象的"),e("code",[t._v("done")]),t._v("属性为"),e("code",[t._v("true")]),t._v("，终止遍历")])]),t._v(" "),e("h2",{attrs:{id:"generator-prototype-throw"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-prototype-throw","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator.prototype.throw")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Generator")]),t._v("函数执行返回的遍历器对象都有一个"),e("code",[t._v("throw")]),t._v("方法，可以在函数体外抛出错误，在函数体内部捕获")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("function")]),e("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("g")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("try")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token class-name"}},[t._v("e")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'内部捕获'")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("g")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ng"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("next")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ng"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token keyword"}},[t._v("throw")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'1'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// 内部捕获 1 ")]),t._v("\n")])])]),e("ul",[e("li",[t._v("在"),e("code",[t._v("Generator")]),t._v("函数内部捕获之后，会自动执行一次"),e("code",[t._v("next()")]),t._v("方法")])]),t._v(" "),e("h2",{attrs:{id:"generator-prototype-return"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-prototype-return","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator.prototype.return")]),t._v(" "),e("ul",[e("li",[t._v("直接调用"),e("code",[t._v("Generator")]),t._v("函数的"),e("code",[t._v("return")]),t._v("方法可以终止便利该函数，并且可以给定返回值")]),t._v(" "),e("li",[t._v("如果"),e("code",[t._v("Generator")]),t._v("函数内部有"),e("code",[t._v("try...finally")]),t._v("块，那么"),e("code",[t._v("return")]),t._v("会推迟到"),e("code",[t._v("finally")]),t._v("块执行完之后再执行")])]),t._v(" "),e("h2",{attrs:{id:"next-throw-return-的共同点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#next-throw-return-的共同点","aria-hidden":"true"}},[t._v("#")]),t._v(" next(), throw(), return() 的共同点")]),t._v(" "),e("blockquote",[e("p",[t._v("理解")])]),t._v(" "),e("p",[t._v("三个方法都是恢复"),e("code",[t._v("Generator")]),t._v("函数的执行，只是把"),e("code",[t._v("yield")]),t._v("表达式替换成不同的语句")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("next()")]),t._v("将"),e("code",[t._v("yield")]),t._v("表达式换成一个值")]),t._v(" "),e("li",[e("code",[t._v("throw()")]),t._v("将"),e("code",[t._v("yield")]),t._v("表达式换成一个 "),e("code",[t._v("throw")]),t._v("语句")]),t._v(" "),e("li",[e("code",[t._v("return()")]),t._v("将"),e("code",[t._v("yield")]),t._v("表达式换成一个"),e("code",[t._v("return")]),t._v("语句")])]),t._v(" "),e("h2",{attrs:{id:"yield-表达式-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式-2","aria-hidden":"true"}},[t._v("#")]),t._v(" yield* 表达式")]),t._v(" "),e("p",[t._v("如果要在一个"),e("code",[t._v("Generator")]),t._v("函数里面执行另外一个"),e("code",[t._v("Generator")]),t._v("函数，需要在"),e("code",[t._v("Generator")]),t._v("函数里面用"),e("code",[t._v("yield*")]),t._v("表达式来定义另外一个"),e("code",[t._v("Generator")]),t._v("函数")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("yield")]),t._v("后面的"),e("code",[t._v("Generator")]),t._v("函数，如果没有"),e("code",[t._v("return")]),t._v("语句，等同于在"),e("code",[t._v("Generator")]),t._v("函数内部部署一个"),e("code",[t._v("for...of")]),t._v("循环")]),t._v(" "),e("li",[t._v("如果被代理的"),e("code",[t._v("Generator")]),t._v("函数有"),e("code",[t._v("return")]),t._v("语句，则可以向代理它的"),e("code",[t._v("Generator")]),t._v("函数返回数据")])]),t._v(" "),e("h2",{attrs:{id:"作为对象属性的-generator-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为对象属性的-generator-函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 作为对象属性的 Generator 函数")]),t._v(" "),e("p",[t._v("如果一个对象的属性是"),e("code",[t._v("Generator")]),t._v("函数，可以写成下面的形式")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("generatorMethod")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"generator-函数的-this-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的-this-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator 函数的 this 对象")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Generator")]),t._v("函数生成的遍历器对象也是"),e("code",[t._v("Generator")]),t._v("函数的实例，同时也继承了"),e("code",[t._v("Generator")]),t._v("函数的"),e("code",[t._v("prototype")]),t._v("对象")]),t._v(" "),e("li",[t._v("在"),e("code",[t._v("Generator")]),t._v("函数内部使用"),e("code",[t._v("this")]),t._v("关键字添加属性，调用函数生成的遍历器对象不会继承该属性")]),t._v(" "),e("li",[t._v("对于"),e("code",[t._v("Generator")]),t._v("函数不能使用"),e("code",[t._v("new")]),t._v("关键字")])]),t._v(" "),e("h2",{attrs:{id:"generator-与状态机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-与状态机","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator 与状态机")]),t._v(" "),e("p",[t._v("可以利用更少的变量来实现一个状态机，因为它本身就是一个状态机，即目前是否处于暂停状态")]),t._v(" "),e("h2",{attrs:{id:"generator-与协程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-与协程","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator 与协程")]),t._v(" "),e("blockquote",[e("p",[t._v("协程是程序运行的一种方式，可以用单线程实现，也可以用多线程实现。前者可以看作特殊的“子例程”，后者可以看作特殊的线程")])]),t._v(" "),e("h3",{attrs:{id:"协程与子例程的差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协程与子例程的差异","aria-hidden":"true"}},[t._v("#")]),t._v(" 协程与子例程的差异")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("传统的子例程"),e("code",[t._v("subroutine")]),t._v("采用 “先进后出” 的执行方式，协程与其不同，可以同时存在多个线程（或函数）并行执行，但只有一个线程（或函数）处于运行状态，其他的处于暂停态"),e("code",[t._v("suspended")]),t._v(", 多个线程（或函数）可以交换执行权，这种可以并行执行，可以交换执行权的线程（或函数），叫做协程")])]),t._v(" "),e("li",[e("p",[t._v("从实现上看，子例程只占用一个栈，而协程可以占用多个栈，但只有一个栈是运行状态，通过牺牲内存的方式来达到任务并行的目的")])])]),t._v(" "),e("h3",{attrs:{id:"协程与普通线程的差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协程与普通线程的差异","aria-hidden":"true"}},[t._v("#")]),t._v(" 协程与普通线程的差异")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("协程与普通线程最大的差异是，协程多个任务只能有一个任务处于运行态，而线程允许多个任务同时处于运行态。这是有"),e("code",[t._v("JavaScript")]),t._v("是单线程语言所决定的。而且线程多个任务之间的运行状态由环境决定，谁先得到资源谁先执行，于是就出现了死锁的问题，协程的运行顺序由自己决定")])]),t._v(" "),e("li",[e("p",[t._v("使用"),e("code",[t._v("Generator")]),t._v("函数实现协程，利用"),e("code",[t._v("yield")]),t._v("来交换控制权")])])]),t._v(" "),e("h2",{attrs:{id:"generator-与上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator-与上下文","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator 与上下文")]),t._v(" "),e("blockquote",[e("p",[t._v("上下文：全局的上下文环境（"),e("code",[t._v("context")]),t._v("，可称为运行环境）")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("JavaScript")]),t._v("在执行函数的时候，会产生一个函数运行时的上下文，这样就出现了上下文环境的堆栈，遵循"),e("code",[t._v("后进先出")]),t._v("的原则。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Generator")]),t._v("函数不一样，当执行到"),e("code",[t._v("yield")]),t._v("关键字时候，函数的上下文环境的堆栈冻结当前状态，当调用"),e("code",[t._v("next")]),t._v("方法时，函数的上下文环境堆栈又重新加入调用栈，冻结的变量和对象恢复执行")])])]),t._v(" "),e("h2",{attrs:{id:"应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),e("p",[e("code",[t._v("Generator")]),t._v(" 函数可以暂停执行，可以返回任意值，这使得其有多种应用场景")]),t._v(" "),e("ul",[e("li",[t._v("异步操作的同步化表达")]),t._v(" "),e("li",[t._v("控制流管理")]),t._v(" "),e("li",[t._v("为任意对象部署"),e("code",[t._v("Iterator")]),t._v("接口")]),t._v(" "),e("li",[t._v("作为数据结构")])])])}],!1,null,null,null);n.options.__file="generator.md";a.default=n.exports}}]);