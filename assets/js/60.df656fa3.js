(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{205:function(e,v,_){"use strict";_.r(v);var t=_(0),a=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"set-和-map-数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#set-和-map-数据结构","aria-hidden":"true"}},[e._v("#")]),e._v(" Set 和 Map 数据结构")]),e._v(" "),_("h2",{attrs:{id:"set"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#set","aria-hidden":"true"}},[e._v("#")]),e._v(" Set")]),e._v(" "),_("ul",[_("li",[e._v("类似于数组，成员唯一")]),e._v(" "),_("li",[e._v("可以接受一个数组作为构造函数的参数，可以实现数组的去重")])]),e._v(" "),_("h3",{attrs:{id:"set-实例的属性和方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#set-实例的属性和方法","aria-hidden":"true"}},[e._v("#")]),e._v(" Set 实例的属性和方法")]),e._v(" "),_("p",[e._v("Set 具有以下属性")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Set.prototype.constructor")]),e._v("构造函数，默认就是"),_("code",[e._v("Set")]),e._v("函数")]),e._v(" "),_("li",[_("code",[e._v("Set.prototype.size")]),e._v("返回"),_("code",[e._v("Set")]),e._v("实例的成员总数")])]),e._v(" "),_("p",[e._v("Set 具有以下四个方法")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("add(value)")]),e._v("添加值，返回"),_("code",[e._v("Set")]),e._v("结构本身")]),e._v(" "),_("li",[_("code",[e._v("delete(value)")]),e._v("删除值，返回布尔值，表示是否删除成功")]),e._v(" "),_("li",[_("code",[e._v("has(value)")]),e._v("返回布尔值，表示"),_("code",[e._v("Set")]),e._v("是否含有该成员")]),e._v(" "),_("li",[_("code",[e._v("clear()")]),e._v("清除所有成员，没有返回值")])]),e._v(" "),_("p",[_("code",[e._v("Array.from()")]),e._v(" 可以将"),_("code",[e._v("Set")]),e._v("结构转化为数组")]),e._v(" "),_("h3",{attrs:{id:"遍历操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#遍历操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 遍历操作")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("keys()")])]),e._v(" "),_("li",[_("code",[e._v("values()")])]),e._v(" "),_("li",[_("code",[e._v("entries()")])]),e._v(" "),_("li",[_("code",[e._v("forEach()")])])]),e._v(" "),_("p",[_("code",[e._v("keys()")]),e._v(" 与"),_("code",[e._v("values()")]),e._v("两个方法的行为完全一致，因为"),_("code",[e._v("Set")]),e._v("结构没有键，只有值")]),e._v(" "),_("h2",{attrs:{id:"weakset"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#weakset","aria-hidden":"true"}},[e._v("#")]),e._v(" WeakSet")]),e._v(" "),_("p",[e._v("与 Set 类似，有两点不同")]),e._v(" "),_("ul",[_("li",[e._v("WeakSet 只能存对象")]),e._v(" "),_("li",[e._v("WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中")])]),e._v(" "),_("h2",{attrs:{id:"map"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#map","aria-hidden":"true"}},[e._v("#")]),e._v(" Map")]),e._v(" "),_("p",[e._v("键值对的数据结构，传统的 Object 只能采用"),_("code",[e._v("字符串-值")]),e._v("的形式存储数据，Map 可以采用"),_("code",[e._v("值-值")]),e._v("的形式存储数据，是更完善的"),_("code",[e._v("hash")]),e._v("结构")]),e._v(" "),_("h3",{attrs:{id:"实例的属性和方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例的属性和方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 实例的属性和方法")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("size")]),e._v("返回成员的个数")]),e._v(" "),_("li",[_("code",[e._v("set(key, value)")]),e._v("添加键值对，如果键已经存在，则覆盖")]),e._v(" "),_("li",[_("code",[e._v("get(key)")]),e._v("获取"),_("code",[e._v("key")]),e._v("对应的值，如果不存在则返回 "),_("code",[e._v("undefined")])]),e._v(" "),_("li",[_("code",[e._v("hasKey(key)")]),e._v("返回布尔值，某个键是否在该"),_("code",[e._v("Map")]),e._v("结构中")]),e._v(" "),_("li",[_("code",[e._v("delete(key)")]),e._v("删除一个键，返回 "),_("code",[e._v("true")]),e._v("，")]),e._v(" "),_("li",[_("code",[e._v("clear()")]),e._v("清除所有键值对")])]),e._v(" "),_("h2",{attrs:{id:"weakset-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#weakset-2","aria-hidden":"true"}},[e._v("#")]),e._v(" WeakSet")]),e._v(" "),_("p",[e._v("参考 WeakSet")])])}],!1,null,null,null);a.options.__file="set-and-map.md";v.default=a.exports}}]);