(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{221:function(a,t,e){"use strict";e.r(t);var v=e(0),_=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"数组的扩展-2-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组的扩展-2-5","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组的扩展(2.5)")]),a._v(" "),e("h2",{attrs:{id:"扩展运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符","aria-hidden":"true"}},[a._v("#")]),a._v(" 扩展运算符 ...")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("rest")]),a._v("参数的逆运算")]),a._v(" "),e("li",[a._v("可以作为"),e("code",[a._v("apply")]),a._v("函数的替代")])]),a._v(" "),e("p",[a._v("应用：")]),a._v(" "),e("ol",[e("li",[a._v("深复制数组")]),a._v(" "),e("li",[a._v("合并数组与解构赋值结合")]),a._v(" "),e("li",[a._v("与解构赋值结合")]),a._v(" "),e("li",[a._v("将字符串转化为真正的字符数组")]),a._v(" "),e("li",[a._v("实现了"),e("code",[a._v("Iterator")]),a._v("接口的对象，可以将类数组对象转化为真正的数组"),e("code",[a._v("arguments")]),a._v(","),e("code",[a._v("nodeList")]),a._v("字符串都为类数组对象")]),a._v(" "),e("li",[e("code",[a._v("Map")]),a._v("和"),e("code",[a._v("Set")]),a._v("结构，"),e("code",[a._v("Generator")]),a._v("函数返回的对象，只要使用对象部署了 Iterator 接口，都可以被"),e("code",[a._v("...")]),a._v("遍历，否则报错")])]),a._v(" "),e("h2",{attrs:{id:"array-from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-from","aria-hidden":"true"}},[a._v("#")]),a._v(" Array.from()")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Array.from")]),a._v("可以将两类对象转化为真正的数组：类似数组的对象 ("),e("code",[a._v("array-like-object")]),a._v(") 、可遍历对象 ("),e("code",[a._v("iterable")]),a._v(") ，包括 ES6 新增的"),e("code",[a._v("Set")]),a._v(","),e("code",[a._v("Map")]),a._v("数据结构")]),a._v(" "),e("li",[a._v("也可以对真实数组对象实现完全复制")]),a._v(" "),e("li",[a._v("接受第二个参数，类似于数组的"),e("code",[a._v("map()")]),a._v("方法，将每个元素处理后返回，并且能够正确处理 32 位的 UTF-16 字符，可以避免将码点大于"),e("code",[a._v("0xFFFF")]),a._v("的字符当作两个字符的 bug")])]),a._v(" "),e("h2",{attrs:{id:"array-of"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-of","aria-hidden":"true"}},[a._v("#")]),a._v(" Array.of()")]),a._v(" "),e("ul",[e("li",[a._v("将一组值转化为数组")]),a._v(" "),e("li",[e("code",[a._v("Array()")]),a._v("的替代方案，"),e("code",[a._v("Array.of()")]),a._v("总是返回参数值组成的数组，而"),e("code",[a._v("Array()")]),a._v("再无参数，一个参数，多个参数返回的值是不一样的")])]),a._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[a._v("Array"),e("span",{attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{attrs:{class:"token keyword"}},[a._v("of")]),e("span",{attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{attrs:{class:"token number"}},[a._v("1")]),e("span",{attrs:{class:"token punctuation"}},[a._v(",")]),e("span",{attrs:{class:"token number"}},[a._v("2")]),e("span",{attrs:{class:"token punctuation"}},[a._v(",")]),e("span",{attrs:{class:"token number"}},[a._v("3")]),e("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\t"),e("span",{attrs:{class:"token comment"}},[a._v("// [1,2,3]")]),a._v("\n")])])]),e("h2",{attrs:{id:"数组实例的-copywithin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-copywithin","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组实例的 copyWithin()")]),a._v(" "),e("ul",[e("li",[a._v("讲数组内部的数据复制到其他位置，覆盖原有成员")]),a._v(" "),e("li",[a._v("接受三个参数"),e("code",[a._v("target")]),a._v("、"),e("code",[a._v("start")]),a._v("、"),e("code",[a._v("end")]),a._v("，写入开始位置、开始读取位置、结束读取位置")])]),a._v(" "),e("h2",{attrs:{id:"数组实例的-find-和-findindex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-find-和-findindex","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组实例的 find() 和 findIndex()")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("find()")]),a._v("参数为一个回调函数，所有数组成员依次执行该函数，返回第一个符合该条件的成员，没有则返回"),e("code",[a._v("undefined")])]),a._v(" "),e("li",[e("code",[a._v("findIndex()")]),a._v("返回第一个符合条件的成员的位置，如果都不符合，则返回"),e("code",[a._v("-1")])])]),a._v(" "),e("h2",{attrs:{id:"数组实例的-fill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-fill","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组实例的 fill()")]),a._v(" "),e("p",[a._v("使用给定值填充数组，默认抹掉以前的数组成员")]),a._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{attrs:{class:"token number"}},[a._v("1")]),e("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{attrs:{class:"token number"}},[a._v("2")]),e("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{attrs:{class:"token number"}},[a._v("3")]),e("span",{attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{attrs:{class:"token function"}},[a._v("fill")]),e("span",{attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{attrs:{class:"token number"}},[a._v("7")]),e("span",{attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{attrs:{class:"token comment"}},[a._v("// [7, 7, 7]")]),a._v("\n")])])]),e("p",[a._v("可以用于数组的初始化，接受第二个参数和第三个参数，表示起始位置和结束位置")]),a._v(" "),e("h2",{attrs:{id:"数组实例的-entries-、-keys-、-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-entries-、-keys-、-values","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组实例的 entries() 、 keys() 、 values()")]),a._v(" "),e("p",[a._v("返回一个遍历器对象，可以利用"),e("code",[a._v("for...of")]),a._v("遍历")]),a._v(" "),e("h2",{attrs:{id:"数组实例的-includes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-includes","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组实例的 includes()")]),a._v(" "),e("p",[a._v("返回一个布尔值，数组是否包含该成员，与字符串的"),e("code",[a._v("includes()")]),a._v("类似，ES2016 引入")]),a._v(" "),e("h2",{attrs:{id:"数组的空位处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组的空位处理","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组的空位处理")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("ES5 对于空位的处理\n*"),e("code",[a._v("forEach()")]),a._v(","),e("code",[a._v("filter()")]),a._v(","),e("code",[a._v("reduce()")]),a._v(","),e("code",[a._v("every()")]),a._v(","),e("code",[a._v("some()")]),a._v("都会跳过空位\n*"),e("code",[a._v("map()")]),a._v("会跳过空位，但会保留这个值\n*"),e("code",[a._v("join()")]),a._v(","),e("code",[a._v("toString()")]),a._v(",都会讲空位视为"),e("code",[a._v("undefined")]),a._v(",而"),e("code",[a._v("undefined")]),a._v("和"),e("code",[a._v("null")]),a._v("都会被处理成空字符串")])]),a._v(" "),e("li",[e("p",[a._v("ES6 明确将空位转为"),e("code",[a._v("undefined")])]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Array.from()")]),a._v("会将数组的空位转化为"),e("code",[a._v("undefined")]),a._v("，扩展运算符"),e("code",[a._v("...")]),a._v("也是一样")]),a._v(" "),e("li",[e("code",[a._v("copyWithin()")]),a._v("会连着空位一起拷贝")]),a._v(" "),e("li",[e("code",[a._v("fill()")]),a._v("会将空位视为正常的数组位置")]),a._v(" "),e("li",[e("code",[a._v("for...in")]),a._v("遍历也会循环空位")]),a._v(" "),e("li",[e("code",[a._v("keys")]),a._v(","),e("code",[a._v("values()")]),a._v(","),e("code",[a._v("entries()")]),a._v(","),e("code",[a._v("find()")]),a._v(","),e("code",[a._v("findIndex")]),a._v("会将空位当作"),e("code",[a._v("undefined")]),a._v("处理")])])])])])}],!1,null,null,null);_.options.__file="array.md";t.default=_.exports}}]);