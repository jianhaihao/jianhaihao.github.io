{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/window.md?vue&type=template&id=4576ebdb&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/window.md","mtime":1537944817428},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"window-对象\\\"><a href=\\\"#window-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> window 对象</h1> <p>浏览器里面，<code>window</code>对象代表当前窗口，是浏览器的最顶层对象，所有的全局变量都是<code>window</code>对象的属性</p> <h2 id=\\\"属性\\\"><a href=\\\"#属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性</h2> <p><strong>window.name</strong></p> <p>当前浏览器窗口的名字</p> <p><strong>window.closed, window.opener</strong></p> <ul><li><code>window.closed</code>返回当前窗口是否关闭</li> <li><code>window.opener</code>返回当前窗口的父窗口，没有返回<code>null</code></li></ul> <p><strong>window.self, window.window</strong></p> <p>指向<code>window</code>本身，只读</p> <p><strong>window.frames, window.length</strong></p> <ul><li><code>window.frames</code>返回类似数组的对象，成员为页面所有框架窗口</li> <li><code>window.length</code>返回页面所有框架窗口数量</li></ul> <p><strong>window.frameElement</strong></p> <p>用于当前窗口嵌入另一个网页的情况，如果当前页面是顶层窗口，或者所嵌入的网页时不同源的，返回<code>null</code></p> <p><strong>window.top, window.parent</strong></p> <ul><li><code>window.top</code>指向最顶层窗口，主要用于在子窗口获得顶层窗口</li> <li><code>window.parent</code>返回当前窗口的父窗口，如果没有返回自己</li></ul> <p><strong>window.devicePixelRatio</strong></p> <p>返回一个 CSS 像素由多少个物理像素组成</p> <h3 id=\\\"位置相关属性\\\"><a href=\\\"#位置相关属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 位置相关属性</h3> <p><strong>window.screenX, window.screenY</strong></p> <p>返回浏览器窗口左上角相对于屏幕左上角的水平距离和垂直距离（单位像素），只读</p> <p><strong>window.innerHeight, window.innerWidth</strong></p> <p>返回当前窗口可见部分的高度和宽度，即“视口”（viewport）的大小（单位像素），只读</p> <p><strong>window.outerHeight, window.outerWidth</strong></p> <p>返回浏览器的高度和宽度</p> <p><strong>window.scrollX, window.scrollY</strong></p> <p>页面水平和垂直滚动距离</p> <p><strong>window.pageXOffset, window.pageYOffset</strong></p> <p><code>window.scrollX</code>和<code>window.scrollY</code>的别名</p> <h3 id=\\\"组件属性\\\"><a href=\\\"#组件属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件属性</h3> <p>浏览器的组件对象有以下几个</p> <ul><li><code>window.locationbar</code>：地址栏对象</li> <li><code>window.menubar</code>：菜单栏对象</li> <li><code>window.scrollbars</code>：窗口的滚动条对象</li> <li><code>window.statusBar</code>：状态栏对象</li> <li><code>window.toolBar</code>：工具栏对象</li> <li><code>window.personalbar</code>：用户安装的个人工具栏对象</li></ul> <p>这些对象都具有一个<code>visible</code>属性，表示组建是否可见，只读</p> <h3 id=\\\"全局属性对象\\\"><a href=\\\"#全局属性对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 全局属性对象</h3> <p>全局属性对象指向一些浏览器原生的全局对象</p> <ul><li><code>window.document</code>：当前窗口的文档信息</li> <li><code>window.location</code>：当前窗口 URL 信息</li> <li><code>window.navigator</code>：环境信息</li> <li><code>window.history</code>：浏览历史操作</li> <li><code>window.localStorage</code>：localStorage 操作</li> <li><code>window.sessionStorage</code>：sessionStorage 操作</li> <li><code>window.console</code>：控制台操作</li> <li><code>window.screen</code>：屏幕信息</li></ul> <p><strong>window.isSecureContext</strong></p> <p>返回当前窗口是否在加密环境，如果是 HTTPS 协议，返回<code>true</code>，否则返回<code>false</code></p> <h2 id=\\\"方法\\\"><a href=\\\"#方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 方法</h2> <p><strong>window.alert(), window.prompt(), window.confirm()</strong></p> <p>弹出不同的对话框，页面暂停，等待用户给予回应</p> <p><strong>window.open(), window.close(), window.stop()</strong></p> <p>打开新窗口，关闭当前窗口，停止当前窗口的加载</p> <p><strong>window.moveTo(), window.moveBy()</strong></p> <ul><li><code>window.moveTo(x, y)</code>：移动浏览器窗口到指定位置，<code>x</code>表示距离屏幕左上方横坐标的位置，<code>y</code>表示距离屏幕左上方纵坐标的位置</li> <li><code>window.moveBy(x, y)</code>：将窗口移动到一个相对位置</li></ul> <p><strong>window.resizeTo(), window.resizeBy()</strong></p> <ul><li><code>window.resizeTo(w, h)</code>：缩放窗口，参数为缩放后窗口的大小</li> <li><code>window.resizeBy(offsetW, offsetH)</code>：缩放窗口，参数为缩放的数量</li></ul> <p><strong>window.scrollTo(), window.scroll(), window.scrollBy()</strong></p> <ul><li><code>window.scrollTo(x, y)</code>：滚动窗口到相对于窗口左上角的相对距离的位置</li> <li><code>window.scroll()</code>：为<code>window.scrollTo()</code>方法的别名</li> <li><code>window.scrollBy(x, y)</code>：滚动窗口，参数为向下、向右滚动的距离</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">scrollBy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> window<span class=\\\"token punctuation\\\">.</span>innerHeight<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 滚动一屏</span>\\n</code></pre></div><p>如果不是要滚动整个文档，而是要滚动某个元素，可以使用下面的属性和方法</p> <ul><li><code>element.scrollTop</code></li> <li><code>element.scrollLeft</code></li> <li><code>element.scrollIntoView()</code></li></ul> <p><strong>window.print()</strong></p> <p>跳出打印框，与用户点击“打印”操作一样</p> <p><strong>window.focus(), window.blur()</strong></p> <ul><li><code>window.focus()</code>：使当前窗口获得焦点</li> <li><code>window.blur()</code>：使当前窗口失去焦点</li></ul> <p><strong>window.getSelection()</strong></p> <p>返回一个<code>Selection</code>对象，表示当前用户选中的文本，使用该对象的<code>toString()</code>方法可以得到选中的文本</p> <p><strong>window.getComputedStyle(), window.matchMedia()</strong></p> <ul><li><code>window.getComputedStyle()</code>：接受一个元素作为参数，返回该元素最终的样式信息</li> <li><code>window.metchMedia()</code>：检查 CSS 的<code>mediaQuery</code>语句</li></ul> <h2 id=\\\"事件\\\"><a href=\\\"#事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件</h2> <p><strong>load 事件和 onload 属性</strong></p> <p><code>load</code>事件发生在浏览器窗口加载完毕的时候，<code>window.onload</code>属性可以指定<code>load</code>事件的回调函数</p> <p><strong>error 事件和 onerror 属性</strong></p> <p><code>error</code>事件发生在浏览器脚本发生错误的时候，<code>window.error</code>属性可以指定<code>error</code>事件的回调函数，回调函数接受下面五个参数</p> <ul><li>出错信息</li> <li>出错脚本的网址</li> <li>行号</li> <li>列号</li> <li>错误对象</li></ul> <p><strong>window 对象的事件监听属性</strong></p> <p>除了具备元素节点具备的<code>GlobalEventHandlers</code>接口外，<code>window</code>对象还具有以下事件监听函数</p> <ul><li><code>window.onafterprint</code>：<code>afterprint</code>事件监听函数</li> <li><code>window.onbeforeprint</code>：<code>beforeprint</code>事件监听函数</li> <li><code>window.onbeforeunload</code>：<code>befroeunload</code>事件监听函数</li> <li><code>window.onhashchange</code>：<code>hashchange</code>事件监听函数</li> <li><code>window.onlanguagechange</code>：<code>languagechange</code>事件监听函数</li> <li><code>window.onmessage</code>：<code>message</code>事件监听函数</li> <li><code>window.onmessageerror</code>：<code>MessageError</code>事件监听函数</li> <li><code>window.onoffline</code>：<code>offline</code>事件监听函数</li> <li><code>window.ononline</code>：<code>online</code>事件监听函数</li> <li><code>window.onpagehide</code>：<code>pagehide</code>事件监听函数</li> <li><code>window.onpageshow</code>：<code>pageshow</code>事件监听函数</li> <li><code>window.onpopstate</code>：<code>popstate</code>事件监听函数</li> <li><code>window.onstorage</code>：<code>storage</code>事件监听函数</li> <li><code>window.onunhandledrejection</code>：未处理的 Promise 对象 reject 事件的监听函数</li> <li><code>window.onunload</code>：<code>unload</code>事件监听函数</li></ul> <h2 id=\\\"多窗口操作\\\"><a href=\\\"#多窗口操作\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 多窗口操作</h2> <p>网页可以通过<code>iframe</code>打开子窗口</p> <ul><li><code>window.top</code>,<code>window.self</code>,<code>window.parent</code>：操作与之相邻的窗口</li> <li><code>window.frames</code>：获取当前网页所有的<code>iframe</code>窗口集合</li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}