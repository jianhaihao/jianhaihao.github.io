{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/let-and-const.md?vue&type=template&id=513da0a2&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/let-and-const.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"let-和-const命令\"><a class=\"header-anchor\" href=\"#let-和-const命令\" aria-hidden=\"true\">#</a> let 和 const命令</h1>\n<h2 id=\"let-命令\"><a class=\"header-anchor\" href=\"#let-命令\" aria-hidden=\"true\">#</a> let 命令</h2>\n<ul>\n<li>只在代码块内有效</li>\n<li>不存在变量提升</li>\n<li>暂时性死区，在作用域内，在<code>let</code>声明变量之前调用会报错，<code>typeof</code>也会报错</li>\n<li>不允许重复声明</li>\n</ul>\n<h2 id=\"块级作用域\"><a class=\"header-anchor\" href=\"#块级作用域\" aria-hidden=\"true\">#</a> 块级作用域</h2>\n<ul>\n<li>ES6 块级作用域可以嵌套，外层作用域不可以访问内层作用域的内部变量</li>\n<li><code>let</code>会创建块级作用域</li>\n<li>防止变量泄漏</li>\n</ul>\n<h2 id=\"const-命令\"><a class=\"header-anchor\" href=\"#const-命令\" aria-hidden=\"true\">#</a> const 命令</h2>\n<ul>\n<li>声明常量，其他规则类似于<code>let</code></li>\n<li>用<code>const</code>命令声明的对象，不可改变所指地址，对象属性可以改变</li>\n<li>ES6 声明变量的六种方法<code>var</code>、<code>function</code>、<code>let</code>、<code>const</code>、<code>import</code>、<code>class</code></li>\n</ul>\n<h2 id=\"环境顶层对象\"><a class=\"header-anchor\" href=\"#环境顶层对象\" aria-hidden=\"true\">#</a> 环境顶层对象</h2>\n<ul>\n<li>浏览: <code>window</code></li>\n<li>Node: <code>global</code></li>\n<li>在 ES5 中，全局变量就是顶层对象的属性</li>\n<li><code>var</code>、<code>function</code>声明的对象为全局对象，同时也是顶层对象的属性</li>\n<li><code>let</code>、<code>const</code>、<code>class</code>声明的对象不挂在顶层对象下面，将全局变量与顶层对象的属性脱钩</li>\n</ul>\n</div>\n",null]}