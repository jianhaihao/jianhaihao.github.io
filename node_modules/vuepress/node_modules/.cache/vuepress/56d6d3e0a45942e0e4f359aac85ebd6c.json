{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/prototype.md?vue&type=template&id=de7e766e&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/prototype.md","mtime":1537944817431},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"对象的继承\"><a class=\"header-anchor\" href=\"#对象的继承\" aria-hidden=\"true\">#</a> 对象的继承</h1>\n<p>继承时面向对象的一个很重要的概念，子类通过继承父类的方法可以提高代码的复用率，JavaScript 通过原型对象（prototype）来实现继承</p>\n<ul>\n<li>构造函数的原型对象（prototype）的作用是定义所有实例对象共享的属性和方法</li>\n<li>实例对象的原型也就是构造函数的原型对象（prototype）</li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Fruit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> apple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> pear <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">)</span>\n\nFruit<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\napple<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"apple\"</span>\npear<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"pear\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"原型链\"><a class=\"header-anchor\" href=\"#原型链\" aria-hidden=\"true\">#</a> 原型链</h2>\n<p>在 JavaScript里面，每一个对象都有自己的原型<code>__proto__</code>，指向构造函数的原型对象（prototype），同时，构造函数也有自己的原型，这样就形成了一个原型链（prototype chain）：对象到原型，再到原型的原型</p>\n<p>所有的对象的原型一层一层回溯都可以找到<code>Object.prototype</code>，也就是说，所有对象都继承了定义在<code>Object.prototype</code>上面的属性和方法，比如<code>valueOf()</code>、<code>toString()</code>，<code>Object.prototype</code>也是一个对象，它的原型是<code>null</code>，所以说，原型链的尽头为<code>null</code></p>\n<p>当访问一个对象的属性或者方法的时候，如果在对象上面没有找到，则在它的原型上面去找，找到为止</p>\n<h2 id=\"constructor-属性\"><a class=\"header-anchor\" href=\"#constructor-属性\" aria-hidden=\"true\">#</a> constructor 属性</h2>\n<p><code>prototype</code>属性默认有一个<code>constructor</code>属性，指向<code>prototype</code>所在的构造函数，所以，<code>constructor</code>对象会被实例对象继承</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Parent <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>constructor</code>属性表示构造函数与<code>prototype</code>属性之间的关联关系，一般我们在修改原型的时候，要同事修改<code>constructor</code>属性，可以通过<code>constructor</code>的<code>name</code>属性检查构造函数</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">F</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token constant\">F</span><span class=\"token punctuation\">.</span>prototype  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">F</span> <span class=\"token comment\">// false</span>\nf<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array <span class=\"token comment\">// true</span>\n\n<span class=\"token constant\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> <span class=\"token constant\">F</span>\nf<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">F</span> <span class=\"token comment\">// true</span>\n\nf<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"F\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"instanceof-运算符\"><a class=\"header-anchor\" href=\"#instanceof-运算符\" aria-hidden=\"true\">#</a> instanceof 运算符</h2>\n<p><code>instanceof</code>运算符返回一个布尔值，表示后者对象是否在前者对象的原型链上面</p>\n<ul>\n<li>原始类型的对象不能使用<code>instanceof</code>运算符，返回<code>false</code></li>\n<li><code>null</code>、<code>undefined</code>使用<code>instanceof</code>运算符返回<code>false</code></li>\n<li>一个对象可以对多个构造函数使用<code>instanceof</code>返回<code>true</code></li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">F</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">F</span> <span class=\"token comment\">// true</span>\nf <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token number\">123</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">null</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// flase</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>应用</strong></p>\n<ul>\n<li>判断对象的数据类型</li>\n<li>判断函数是否使用<code>new</code>命令调用</li>\n</ul>\n<h2 id=\"构造函数的继承\"><a class=\"header-anchor\" href=\"#构造函数的继承\" aria-hidden=\"true\">#</a> 构造函数的继承</h2>\n<p>让子类构造函数完全继承父类构造函数的属性和方法分为下面两步</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\nParent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 第一步，继承父类的属性</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Parent<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 第二步，继承父类的方法</span>\nChild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\nChild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Child\n\n<span class=\"token comment\">// 调用</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>使用<code>Object.create()</code>的目的是对<code>prototype</code>对象进行深拷贝，防止在改变<code>Child</code>的原型对象的时候无意改变了<code>Parent</code>的原型对象</p>\n<p>如果是只要继承某个方法，可以使用下面的方法</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>Child<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"阅读\"><a class=\"header-anchor\" href=\"#阅读\" aria-hidden=\"true\">#</a> 阅读</h2>\n<p><a href=\"https://juejin.im/post/5a944f485188257a804aba6d\" target=\"_blank\" rel=\"noopener noreferrer\">万物皆空之 JavaScript 原型<OutboundLink/></a></p>\n</div>\n",null]}