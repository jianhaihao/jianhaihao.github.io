{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/guide.md?vue&type=template&id=6b8157db&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/guide.md","mtime":1537933948859},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"浏览器概述\\\"><a href=\\\"#浏览器概述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器概述</h1> <p>JavaScript 是浏览器内置的脚本语言，所以说浏览器也内置了 JavaScript 引擎，并且提供了许多接口供 JavaScript 来控制浏览器</p> <h2 id=\\\"如何在网页中嵌入代码？\\\"><a href=\\\"#如何在网页中嵌入代码？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何在网页中嵌入代码？</h2> <p><strong><code>&lt;script&gt;</code>标签直接写 JavaScript 代码</strong></p> <p><code>&lt;script&gt;</code>标签有一个<code>type</code>属性，可省略，也可以设置为下面两个值</p> <ul><li><code>text/javascript</code>：默认值，适用于老浏览器</li> <li><code>application/javascript</code>：适用于新浏览器</li></ul> <p><strong><code>&lt;script&gt;</code>标签加载外部脚本</strong></p> <ul><li><code>src</code>属性指定脚本的路径</li> <li><code>charset</code>属性指定脚本的编码方式</li></ul> <p><strong>事件属性</strong></p> <p>网页的事件属性，比如<code>onclick</code>、<code>onmouseover</code>，属性值可以直接写入 JavaScript 代码</p> <div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>console.log(<span class=\\\"token punctuation\\\">'</span>hello world<span class=\\\"token punctuation\\\">'</span>)<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>点击<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p><strong>URL 协议</strong></p> <p>URL 支持<code>javascript:</code>协议，后面可以可写 JavaScript 脚本</p> <div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>javascript:console.log(<span class=\\\"token punctuation\\\">'</span>hello world<span class=\\\"token punctuation\\\">'</span>)<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>点击<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><h2 id=\\\"script-元素\\\"><a href=\\\"#script-元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> script 元素</h2> <p><strong>浏览器加载网页流程</strong></p> <ul><li>一边加载一边解析</li> <li>遇到<code>&lt;script&gt;</code>标签，停止加载，将控制权交给 JavaScript 引擎</li> <li>JavaScript 引擎完毕，将控制权交还给浏览器</li></ul> <p>有多个<code>&lt;script&gt;</code>标签，同时下载，按顺序执行</p> <p><strong>最佳实践</strong></p> <ul><li>将<code>&lt;script&gt;</code>标签放在尾部，防止页面假死</li></ul> <p><strong>defer 属性</strong></p> <p>延迟脚本的执行，不影响脚本的下载，页面加载完之后按顺序执行脚本</p> <p>在<code>DOMContentLoaded</code>事件触发前执行（即刚刚读取完<code>&lt;/html&gt;</code>标签），执行的顺序不变，即在页面出现的顺序</p> <p><strong>async 属性</strong></p> <p>延迟脚本执行，不影响脚本下载，先下载完的脚本先执行</p> <p><strong>脚本的动态加载</strong></p> <p>通过创建<code>&lt;script&gt;</code>标签可以动态加载脚本文件</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b.js'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> script <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'script'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  script<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> src<span class=\\\"token punctuation\\\">;</span>\\n  script<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  document<span class=\\\"token punctuation\\\">.</span>head<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>script<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>将<code>&lt;script&gt;</code>标签的<code>async</code>属性设置为<code>false</code>可以保证脚本的执行顺序</p> <h2 id=\\\"浏览器的组成\\\"><a href=\\\"#浏览器的组成\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器的组成</h2> <ul><li>渲染引擎</li> <li>JavaScript 引擎（JavaScript 解释器）</li></ul> <h3 id=\\\"渲染引擎\\\"><a href=\\\"#渲染引擎\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 渲染引擎</h3> <p>将网页代码渲染成用户可感知的平面文档</p> <p>不同的浏览器拥有不同的渲染引擎</p> <ul><li>Firefox：Gecko 引擎</li> <li>Safari：Webkit 引擎</li> <li>Chrome：Blink 引擎</li> <li>IE：Trident 引擎</li> <li>Edge：EdgeHTML 引擎</li></ul> <p>渲染引擎处理页面，分为四个阶段</p> <ol><li>解析代码：将 HTML 代码解析成 DOM，CSS 解析成 CSSOM（CSS Object Model）</li> <li>对象合成：将 DOM 和 CSSOM 合成为一颗渲染树</li> <li>布局：计算渲染树的布局</li> <li>渲染：将渲染树绘制到屏幕</li></ol> <p>上面几步不严格按照顺序执行</p> <h3 id=\\\"重流和重绘\\\"><a href=\\\"#重流和重绘\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重流和重绘</h3> <p>渲染树转换为网页布局，成为“布局流”（flow），布局显示到页面的这个过程，成为“绘制”（paint），他们都具有阻塞效应，会消耗很多时间和计算资源</p> <p>页面生成以后，脚本操作和样式表操作，都会触发“重流”（reflow）和“重绘”（repaint）。用户的互动也会触发，比如鼠标悬停，输入框输入文本，改变窗口大小等</p> <p>重回和重流并不会一起发生，重流必然导致重绘，重绘不一定导致重流，改变元素的布局，会导致重流和重绘，如果只改变元素的颜色，只会导致重绘</p> <p>一些开发和网页的优化技巧</p> <ul><li>读取和写入 DOM，尽量写在一起，减少读写 DOM 次数</li> <li>缓存 DOM 信息</li> <li>使用 CSS class 一次性改变样式，不要一项一项修改</li> <li>使用<code>documentFragment</code>操作 DOM</li> <li>动画使用<code>fixed</code>和<code>absolute</code>定位，减少对其他元素的影响</li> <li>使用虚拟 DOM（virtual DOm）库</li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}