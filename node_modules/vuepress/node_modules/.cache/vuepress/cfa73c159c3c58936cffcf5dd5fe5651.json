{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/file.md?vue&type=template&id=42175d00&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/file.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"file-对象，filelist-对象，filereader-对象\\\"><a href=\\\"#file-对象，filelist-对象，filereader-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> File 对象，FileList 对象，FileReader 对象</h1> <p>文件操作</p> <h2 id=\\\"file-对象\\\"><a href=\\\"#file-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> File 对象</h2> <p><code>File</code>对象代表一个文件，用来读写文件信息，继承了 Blob 对象</p> <p>最常见的是<code>&lt;input type=&quot;file&quot;&gt;</code>标签，用户选择文件以后，浏览器会生成一个由<code>File</code>对象组成的数组</p> <h3 id=\\\"构造函数\\\"><a href=\\\"#构造函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 构造函数</h3> <p>浏览器原生提供<code>File()</code>生成<code>File</code>对象的实例，接受三个参数</p> <ul><li><code>array</code>：一个数组，成员可以是二进制对象，也可以是字符串，表示文件的内容</li> <li><code>name</code>：字符串，表示文件名或者路径</li> <li><code>options</code>：配置对象，该实例的属性\\n<ul><li><code>type</code>：字符串，表示实例对象的 MIME 类型，默认值为空字符串</li> <li><code>lastMotified</code>：上一次修改的事件，默认为<code>Date.now()</code></li></ul></li></ul> <h3 id=\\\"实例属性\\\"><a href=\\\"#实例属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例属性</h3> <ul><li><code>lastMotified</code>: 最后一次修改的事件</li> <li><code>type</code>: MIME 类型</li> <li><code>name</code>: 文件名或者文件路径</li> <li><code>size</code>: 文件大小</li></ul> <h2 id=\\\"filelist-对象\\\"><a href=\\\"#filelist-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> FileList 对象</h2> <p><code>FileList</code>对象是一个类似数组的对象，成员时<code>File</code>对象，实例具有<code>length</code>属性和<code>item()</code>方法</p> <h2 id=\\\"filereader-对象\\\"><a href=\\\"#filereader-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> FileReader 对象</h2> <p><code>FileReader</code>对象用户读取<code>File</code>对象或者<code>Blob</code>对象所包含的文件内容</p> <p>浏览器提供一个原生的<code>FileReader()</code>构造函数来生成<code>FileReader</code>实例</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> fileReader <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FileReader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h3 id=\\\"实例属性-2\\\"><a href=\\\"#实例属性-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例属性</h3> <ul><li><code>FileReader.error</code>：读取文件时产生的错误对象</li> <li><code>FileReader.readyState</code>：文件的读取状态，<code>0</code>表示未开始，<code>1</code>表示正在读取，<code>2</code>表示读取完成</li> <li><code>FileReader.result</code>：读取完成后的文件内容，有可能是一个字符串，有可能是一个<code>ArrayBuffer</code>实例</li> <li><code>FileReader.onload</code>：<code>load</code>事件（读取完成）监听函数，通常获取<code>result</code>对象获取文件内容</li> <li><code>FileReader.onabort</code>：<code>abort</code>事件（用户终止读取）监听函数</li> <li><code>FileReader.onerror</code>：<code>error</code>事件（读取发生错误）监听函数</li> <li><code>FileReader.onloadstart</code>：读取开始的监听函数</li> <li><code>FileReader.onloadend</code>：读取结束的监听函数</li> <li><code>FileReader.onprogress</code>：读取过程中的监听函数</li></ul> <p>一个读取文件的例子</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// HTML 代码</span>\\n<span class=\\\"token comment\\\">// &lt;input type=&quot;file&quot; onchange=&quot;onChange(e)&quot;&gt;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">onChange</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> file <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>files<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> fileReader <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FileReader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  fileReader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>result<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  \\n  fileReader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readAsText</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"实例方法\\\"><a href=\\\"#实例方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例方法</h3> <ul><li><code>FileReader.abort()</code>：终止读取，<code>FileReader.readyState</code>变为<code>2</code></li> <li><code>FileReader.readAsArrayBuffer()</code>：以<code>ArrayBuffer</code>格式读取文件，最后文件返回<code>ArrayBuffer</code>实例</li> <li><code>FileReader.readAsBinaryString()</code>：返回原始的二进制字符串</li> <li><code>FileReader.readAsDataUrl()</code>：返回一个 Base64 编码的字符串，可以直接放在<code>&lt;img&gt;</code>标签的<code>src</code>属性里面</li> <li><code>FileReader.readAsText()</code>：返回文件内容的文本字符串，第一个参数代表文件的 Blob 实例，第二个是可选的，为编码方式，默认 UTF-8</li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}