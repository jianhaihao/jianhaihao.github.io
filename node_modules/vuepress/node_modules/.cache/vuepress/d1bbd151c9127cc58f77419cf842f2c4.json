{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\mysql\\colony.md?vue&type=template&id=d4207a00&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\mysql\\colony.md","mtime":1548661449450},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"数据库集群\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数据库集群\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数据库集群\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"单节点数据库弊端\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#单节点数据库弊端\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 单节点数据库弊端\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"ul\", [\n          _c(\"li\", [_vm._v(\"大型互联网程序用户群体庞大，架构必须要特殊设计\")]),\n          _vm._v(\" \"),\n          _c(\"li\", [_vm._v(\"无法满足性能上的要求\")]),\n          _vm._v(\" \"),\n          _c(\"li\", [_vm._v(\"没有冗余设计，无法满足高可用\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"常见mysql集群方案\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#常见mysql集群方案\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 常见Mysql集群方案\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"img\", { attrs: { src: \"/mysql-jq.jpg\", alt: \"/mysql-jq.jpg\" } }),\n        _vm._v(\" \"),\n        _c(\"img\", {\n          attrs: { src: \"/mysql-jq-1.jpg\", alt: \"/mysql-jq-1.jpg\" }\n        }),\n        _vm._v(\" \"),\n        _c(\"img\", {\n          attrs: { src: \"/mysql-jq-2.jpg\", alt: \"/mysql-jq-2.jpg\" }\n        }),\n        _vm._v(\" \"),\n        _c(\"img\", {\n          attrs: { src: \"/mysql-jq-3.jpg\", alt: \"/mysql-jq-3.jpg\" }\n        }),\n        _vm._v(\" \"),\n        _c(\"img\", { attrs: { src: \"/mysql-jq-4.jpg\", alt: \"/mysql-jq-4.jpg\" } })\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"创建集群\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#创建集群\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 创建集群\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-bash extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-bash\" } }, [\n          _c(\"code\", [\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 拉取 pxc 镜像\")\n            ]),\n            _vm._v(\"\\ndocker pull percona/percona-xtradb-cluster\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看已安装的镜像\")\n            ]),\n            _vm._v(\"\\ndocker images\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"#######################分割线##################################\"\n              )\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 修改镜像名称（名称太长，不方便使用，选择性操作）\")\n            ]),\n            _vm._v(\"\\ndocker tag percona/percona-xtradb-cluster pxc\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 删除旧的镜像\")\n            ]),\n            _vm._v(\"\\ndocker rmi percona/percona-xtradb-cluster\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看已安装的镜像\")\n            ]),\n            _vm._v(\"\\ndocker images\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"#######################分割线##################################\"\n              )\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"#（出于安全考虑，需要给pxc集群实例创建docker内部网络）\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# docker虚拟机自带的网段地址为：172.17.0.XXX\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 创建内部网段\")\n            ]),\n            _vm._v(\"\\ndocker network create net1\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看内部网段\")\n            ]),\n            _vm._v(\"\\ndocker network inspect net1   \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# network可省略\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 删除内部网段\")\n            ]),\n            _vm._v(\"\\ndocker network \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"rm\")\n            ]),\n            _vm._v(\" net1\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 创建指定网段\")\n            ]),\n            _vm._v(\"\\ndocker network create --subnet\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"172.18.0.0/24 net1\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# Docker容器使用原则：不要在容器里面保存业务数据！！！\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 要把业务数据保存到宿主机中，使用的技术是目录映射\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# pxc无法使用映射目录，可以采用docker卷来处理\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 容器中的pxc节点映射数据目录的解决办法\")\n            ]),\n            _vm._v(\"\\ndocker volume create --name v1    \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# --name可省略\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看数据卷在宿主机的真实路径\")\n            ]),\n            _vm._v(\"\\ndocker inspect v1\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 删除数据卷\")\n            ]),\n            _vm._v(\"\\ndocker volume \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"rm\")\n            ]),\n            _vm._v(\" v1\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"#######################分割线##################################\"\n              )\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 向pxc镜像传入运行参数创建pxc容器\")\n            ]),\n            _vm._v(\"\\ndocker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_NAME\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"PXC -e XTRABACKUP_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -v v1:/var/lib/mysql --privileged --name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node1 --net\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"net1 --ip 172.18.0.2 pxc\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 创建第二个容器\")\n            ]),\n            _vm._v(\"\\ndocker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_NAME\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"PXC -e XTRABACKUP_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_JOIN\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node1 -v v2:/var/lib/mysql --privileged --name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node2 --net\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"net1 --ip 172.18.0.3 pxc\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 创建第三个容器\")\n            ]),\n            _vm._v(\"\\ndocker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_NAME\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"PXC -e XTRABACKUP_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_JOIN\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node1 -v v3:/var/lib/mysql --privileged --name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node3 --net\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"net1 --ip 172.18.0.4 pxc\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 创建第四个容器\")\n            ]),\n            _vm._v(\"\\ndocker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_NAME\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"PXC -e XTRABACKUP_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_JOIN\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node1 -v v4:/var/lib/mysql --privileged --name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node4 --net\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"net1 --ip 172.18.0.5 pxc\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 创建第五个容器\")\n            ]),\n            _vm._v(\"\\ndocker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_NAME\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"PXC -e XTRABACKUP_PASSWORD\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"yiyun2018 -e CLUSTER_JOIN\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node1 -v v5:/var/lib/mysql --privileged --name\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"node5 --net\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\"net1 --ip 172.18.0.6 pxc\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# -d 后台运行\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# -p [宿主机端口]:[容器端口]  把容器的3306端口映射到宿主机的3306端口\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# -v v1:/var/lib/mysql 路径映射，/var/lib/mysql 容器内的目录\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# -e MYSQL_ROOT_PASSWORD  参数，创建出的数据库实例的密码（用户名是root，不可修改）\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# -e MYSQL_ROOT_PASSWORD  参数，创建出的pxc集群的名字\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# -e MYSQL_ROOT_PASSWORD  参数，数据库节点之间同步使用的密码\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# -e CLUSTER_JOIN  参数，和第一个节点容器进行同步\")\n            ]),\n            _vm._v(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}