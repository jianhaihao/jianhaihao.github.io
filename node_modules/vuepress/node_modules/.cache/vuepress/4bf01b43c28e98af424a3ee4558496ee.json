{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/new.md?vue&type=template&id=053bec1e&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/new.md","mtime":1537933948862},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"实例对象与-new-命令\\\"><a href=\\\"#实例对象与-new-命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例对象与 new 命令</h1> <p>JavaScript 程序的对象基于构造函数（constructor）和原型链（prototype）</p> <p>构造函数的特点</p> <ul><li>内部使用<code>this</code>指向生成的实例对象</li> <li>生成对象的时候使用<code>new</code>命令</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// 定义一个构造函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Animal</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'red'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> sheep <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nsheep<span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token comment\\\">// &quot;red&quot;</span>\\n</code></pre></div><p>通常构造函数的首字母大写</p> <h2 id=\\\"new-命令\\\"><a href=\\\"#new-命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> new 命令</h2> <p>构造函数生成实例对象必须使用<code>new</code>命令，如果不使用<code>new</code>命令，则和普通函数无区别，并且没有自己的作用域（scope）</p> <p><code>new</code>命令的执行流程</p> <ul><li>创建一个空对象作为返回实例对象</li> <li>将空对象的原型指向构造函数的<code>prototype</code>属性</li> <li>空对象内部的<code>this</code>对象指向这个空对象</li> <li>执行构造函数内部的代码</li></ul> <p>如果构造函数内部有<code>return</code>语句，则通过<code>new</code>命令生成实例对象的返回为<code>return</code>语句后面的内容，否则为实例对象本身</p> <h2 id=\\\"new-target-命令\\\"><a href=\\\"#new-target-命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> new.target 命令</h2> <p>在构造函数内部可以使用<code>new.target</code>命令，判断当前函数是否通过<code>new</code>命令调用，如果<code>new.target</code>与当前构造函数比较返回逻辑真，则表示当前函数是通过<code>new</code>调用，否则为普通函数调用</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">F</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">F</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'请使用 new 命令调用'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">F</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// &quot;请使用 new 命令调用&quot;</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}