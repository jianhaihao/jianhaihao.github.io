{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/object.md?vue&type=template&id=3c135739&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/object.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"对象的扩展-2\"><a class=\"header-anchor\" href=\"#对象的扩展-2\" aria-hidden=\"true\">#</a> 对象的扩展(2)</h1>\n<h2 id=\"对象的简介表示法\"><a class=\"header-anchor\" href=\"#对象的简介表示法\" aria-hidden=\"true\">#</a> 对象的简介表示法</h2>\n<ul>\n<li>ES6 允许直接写入变量和函数作为函数的属性和方法,属性名为变量名，属性值为变量的值</li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//等同于</span>\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> foo<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>如果某个方法的值是一个<code>Generator</code>函数，前面需要加<code>*</code>号</li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span> <span class=\"token function\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"属性名表达式\"><a class=\"header-anchor\" href=\"#属性名表达式\" aria-hidden=\"true\">#</a> 属性名表达式</h2>\n<p>ES6 允许字面量定义对象时，把表达式放在方括号内作为属性名</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  abc<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>同样也适用于定义属性方法名</li>\n</ul>\n<h2 id=\"方法的-name-属性\"><a class=\"header-anchor\" href=\"#方法的-name-属性\" aria-hidden=\"true\">#</a> 方法的 name 属性</h2>\n<p>返回函数名</p>\n<h2 id=\"object-is-a-b\"><a class=\"header-anchor\" href=\"#object-is-a-b\" aria-hidden=\"true\">#</a> Object.is(a, b)</h2>\n<p>比较两个值是否相等</p>\n<p>与<code>===</code>的区别</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token operator\">+</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// false</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"object-assign\"><a class=\"header-anchor\" href=\"#object-assign\" aria-hidden=\"true\">#</a> Object.assign()</h2>\n<p>用于对象的合并</p>\n<ul>\n<li>对对象只实行浅拷贝</li>\n<li>同名属性进行替换</li>\n<li>数组会当作对象进行处理</li>\n<li>只能进行值的复制，如果要复制的是一个取值函数，那么将求值后再复制</li>\n</ul>\n<h2 id=\"常见用途\"><a class=\"header-anchor\" href=\"#常见用途\" aria-hidden=\"true\">#</a> 常见用途</h2>\n<ul>\n<li>为对象添加属性</li>\n<li>为对象添加方法</li>\n<li>克隆对象</li>\n<li>合并多个对象</li>\n<li>为属性指定默认值</li>\n</ul>\n<h2 id=\"属性的可枚举性和遍历\"><a class=\"header-anchor\" href=\"#属性的可枚举性和遍历\" aria-hidden=\"true\">#</a> 属性的可枚举性和遍历</h2>\n<h3 id=\"可枚举性\"><a class=\"header-anchor\" href=\"#可枚举性\" aria-hidden=\"true\">#</a> 可枚举性</h3>\n<p>对象的每个属性有一个描述对象<code>Descriptor</code>，来控制属性的行为，可以通过<code>Object.getOwnPropertyDescriptor()</code>来获取某对象的某属性的描述对象</p>\n<p>通常有四个值+两个方法</p>\n<ul>\n<li><code>value</code>//值</li>\n<li><code>writable</code>//可写</li>\n<li><code>enumerable</code>//可枚举</li>\n<li><code>configuragle</code>//可配置</li>\n<li><code>getter</code>//getter函数</li>\n<li><code>setter</code>//setter函数</li>\n</ul>\n<p>如果一个属性的<code>enumberable</code>为<code>false</code>，那么这个属性是不可枚举的，下面四个方法会忽略</p>\n<ul>\n<li><code>for...in</code></li>\n<li><code>Object.keys()</code></li>\n<li><code>JSON.stringify()</code></li>\n<li><code>Object.assign()</code></li>\n</ul>\n<p><code>es6</code> 规定，所有<code>Class</code>的原型的方法都是不可枚举的</p>\n<h3 id=\"属性的遍历\"><a class=\"header-anchor\" href=\"#属性的遍历\" aria-hidden=\"true\">#</a> 属性的遍历</h3>\n<p><code>es6</code>共有5种方法可以遍历对象的属性</p>\n<ul>\n<li><code>for...in</code> // 遍历对象自身的和继承的可枚举属性（不包括<code>Symbol属性</code>）</li>\n<li><code>Object.keys()</code> // 返回一个数组，包含对象自身（不含继承）所有可枚举属性（不包含<code>Symbol</code>属性）的键名</li>\n<li><code>Objet.getOwnPropertyNames(obj)</code> // 返回一个数组，包含对象自身的所有属性，（不含<code>Symbol</code>属性但是包括不可枚举属性）的键名</li>\n<li><code>Object.getOwnPropertySymbols()</code> // 返回一个数组，包含对象自身的所有<code>Symbole</code>属性的键名</li>\n<li><code>Reflect.ownKeys(obj)</code> // 返回一个数组，包含对象自身的所有键名，包括<code>Symbol</code>属性和不可枚举属性</li>\n</ul>\n<h3 id=\"遍历遵循以下规则\"><a class=\"header-anchor\" href=\"#遍历遵循以下规则\" aria-hidden=\"true\">#</a> 遍历遵循以下规则</h3>\n<ul>\n<li>首先遍历所有的数值键，按照数值升序排序</li>\n<li>其次遍历所有的字符串键，按照加入时间升序排序</li>\n<li>最后遍历所有的<code>Symbol</code>键，按照加入时间排序</li>\n</ul>\n<h2 id=\"object-getownpropertydescpriptors\"><a class=\"header-anchor\" href=\"#object-getownpropertydescpriptors\" aria-hidden=\"true\">#</a> Object.getOwnPropertyDescpriptors()</h2>\n<p>ES2017 引入该方法返回指定对象所有自身属性(非继承)的描述对象</p>\n<h2 id=\"proto-属性-object-setprototypeof-object-getprototypeof\"><a class=\"header-anchor\" href=\"#proto-属性-object-setprototypeof-object-getprototypeof\" aria-hidden=\"true\">#</a> <strong><strong>proto</strong></strong> 属性,Object.setPrototypeOf(),Object.getPrototypeOf</h2>\n<h3 id=\"proto-属性\"><a class=\"header-anchor\" href=\"#proto-属性\" aria-hidden=\"true\">#</a> <strong><strong>proto</strong></strong> 属性</h3>\n<p>指向原型对象的<code>prototype</code>属性，ES6 建议只在浏览器部署该属性，而且建议不直接使用该属性</p>\n<h3 id=\"object-setprototypeof\"><a class=\"header-anchor\" href=\"#object-setprototypeof\" aria-hidden=\"true\">#</a> Object.setPrototypeOf()</h3>\n<p>作用与<code>__proto__</code>相同，可以用来设置一个对象的原型，为 ES6 推荐设置对象原型的方法</p>\n<h3 id=\"object-getprototypeof\"><a class=\"header-anchor\" href=\"#object-getprototypeof\" aria-hidden=\"true\">#</a> Object.getPrototypeOf()</h3>\n<p>读取一个对象的原型对象</p>\n<h2 id=\"super-关键字\"><a class=\"header-anchor\" href=\"#super-关键字\" aria-hidden=\"true\">#</a> super 关键字</h2>\n<ul>\n<li>ES6 规定<code>super</code>指向当前对象的原型对象</li>\n<li><code>super</code>只能用在对象的方法当中，用在其他地方都会报错，目前只有对象方法的简写方法才能够让<code>JavaScript</code>引擎确认定义的是对象的方法</li>\n<li><code>super.foo()</code>相当于 <code>Object.getPrototypeOf(this).foo</code></li>\n</ul>\n<h2 id=\"object-keys-object-values-object-entries\"><a class=\"header-anchor\" href=\"#object-keys-object-values-object-entries\" aria-hidden=\"true\">#</a> Object.keys(), Object.values(), Object.entries()</h2>\n</div>\n",null]}