{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/string.md?vue&type=template&id=e92a0ec8&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/string.md","mtime":1537926977697},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"字符串的扩展-2\"><a class=\"header-anchor\" href=\"#字符串的扩展-2\" aria-hidden=\"true\">#</a> 字符串的扩展 (2)</h1>\n<h2 id=\"字符的-unicode-表示法\"><a class=\"header-anchor\" href=\"#字符的-unicode-表示法\" aria-hidden=\"true\">#</a> 字符的 unicode 表示法</h2>\n<p>JavaScript 利用<code>\\uxxxx</code>(UTF-16) 表示一个字符，<code>xxxx</code>表示 unicode 码点，一个字符包括两个字节，表示范围只能是<code>\\u0000</code>~<code>\\uFFFF</code>，如果超出<code>\\uFFFF</code>的范围， ES5 就利用双字符表示，也就是四个字节，比如 <code>\\uD842\\uDFB7</code></p>\n<p>ES6 则支持将大于四位的码点放入大括号，可以当成一个字符识别，比如 <code>\\u{20BB7}</code></p>\n<h2 id=\"charpointat\"><a class=\"header-anchor\" href=\"#charpointat\" aria-hidden=\"true\">#</a> charPointAt()</h2>\n<ul>\n<li>\n<p>因为扩展了字符的 unicode 表示法，所以字符串的<code>charAt()</code>和<code>charCodeAt()</code>方法会失真，在对码点大于<code>0xFFFF</code>的字符的时候，这两个方法会把它当作两个字符处理</p>\n</li>\n<li>\n<p>ES6 新增了<code>charPointAt()</code>方法，来正确识别<code>4</code>个字节储存的字符</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 134071</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 57271</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 97</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></li>\n</ul>\n<p>上面代码中，JavaScript 会把<code>𠮷a</code>视为三个字符，<code>charPointAt(0)</code> 正确识别了<code>𠮷</code>的码点，<code>charPointAt(1)</code> 则识别了<code>𠮷</code>字符后面两个字节的码点，<code>charPointAt(2)</code>则识别了<code>a</code>字符的码点</p>\n<ul>\n<li>经过测试发现，上面的方法还是不正确的，表面上看在<code>𠮷a</code>中，<code>a</code> 字符在第二个位置，正确的位置序号应该是<code>1</code>，解决办法为使用 <code>for...of</code>循环，它可以正确识别 32 位的 UTF-16 字符</li>\n<li><code>charPointAt(n)</code>返回的是十进制数据，可以通过<code>toString(16)</code>将其转换成 16 进制数据</li>\n</ul>\n<h2 id=\"string-fromcodepoint\"><a class=\"header-anchor\" href=\"#string-fromcodepoint\" aria-hidden=\"true\">#</a> String.fromCodePoint()</h2>\n<ul>\n<li>ES5 提供的<code>fromCharCode()</code>方法，用于从码点返回字符，但这个方法不能识别 32 位的 UTF-16 字符</li>\n<li>ES6 新增的<code>String.fromCodePoint()</code>方法则解决了上述问题，与<code>charPointAt()</code>方法的作用正好相反，需要注意的是<code>fromCodePoint()</code>方法定义在<code>String</code>上面，而<code>charPointAt()</code>方法定义在字符串实例上面</li>\n</ul>\n<h2 id=\"字符串的遍历接口\"><a class=\"header-anchor\" href=\"#字符串的遍历接口\" aria-hidden=\"true\">#</a> 字符串的遍历接口</h2>\n<p>可以使用<code>for...of</code>遍历字符串，并且可以正确识别 32 位的 UTF-16 的字符</p>\n<h2 id=\"at\"><a class=\"header-anchor\" href=\"#at\" aria-hidden=\"true\">#</a> at()</h2>\n<p>替代 ES5 的<code>charAt()</code>方法，增加对  32 位的 UTF-16 的字符的识别</p>\n<h2 id=\"判断一个字符串是否包含在另外一个字符串内\"><a class=\"header-anchor\" href=\"#判断一个字符串是否包含在另外一个字符串内\" aria-hidden=\"true\">#</a> 判断一个字符串是否包含在另外一个字符串内</h2>\n<ul>\n<li><code>indexOf</code>ES5</li>\n<li><code>includes</code>ES6 返回布尔值</li>\n<li><code>startsWith</code>ES6 返回布尔值</li>\n<li><code>endWith</code>ES6 返回布尔值</li>\n</ul>\n<h2 id=\"repeat\"><a class=\"header-anchor\" href=\"#repeat\" aria-hidden=\"true\">#</a> repeat()</h2>\n<p>返回一个新的字符串，将原字符串重复n次</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 'xxx'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"padstart-padend\"><a class=\"header-anchor\" href=\"#padstart-padend\" aria-hidden=\"true\">#</a> padStart(), padEnd()</h2>\n<p>字符串补齐</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token string\">'c'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 'abac'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"matchall\"><a class=\"header-anchor\" href=\"#matchall\" aria-hidden=\"true\">#</a> matchAll()</h2>\n<blockquote>\n<p>参见《正则表达式》</p>\n</blockquote>\n<h2 id=\"字符串模版\"><a class=\"header-anchor\" href=\"#字符串模版\" aria-hidden=\"true\">#</a> 字符串模版</h2>\n<blockquote>\n<p>反引号,大括号里面可以写任意表达式</p>\n</blockquote>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token string\">`this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 'this is Tom'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"剩余内容：模板编译、标签模板、-string-raw-、模板字符串的限制\"><a class=\"header-anchor\" href=\"#剩余内容：模板编译、标签模板、-string-raw-、模板字符串的限制\" aria-hidden=\"true\">#</a> 剩余内容：模板编译、标签模板、 String.raw() 、模板字符串的限制</h2>\n</div>\n",null]}