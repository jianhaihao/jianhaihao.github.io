{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/string.md?vue&type=template&id=8d929728&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/string.md","mtime":1537944817432},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"string-字符串\"><a class=\"header-anchor\" href=\"#string-字符串\" aria-hidden=\"true\">#</a> String 字符串</h1>\n<p>JavaScript 三个包装对象之一，用于生成字符串类型的包装对象<code>String</code></p>\n<h2 id=\"静态方法\"><a class=\"header-anchor\" href=\"#静态方法\" aria-hidden=\"true\">#</a> 静态方法</h2>\n<p><strong>String.fromCharCode()</strong></p>\n<p>将 Unicode 码点转化为对应的字符</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>String<span class=\"token punctuation\">.</span><span class=\"token function\">formCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"a\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"实例属性\"><a class=\"header-anchor\" href=\"#实例属性\" aria-hidden=\"true\">#</a> 实例属性</h2>\n<p><strong>length</strong></p>\n<p>表示字符串的长度</p>\n<h2 id=\"实例方法\"><a class=\"header-anchor\" href=\"#实例方法\" aria-hidden=\"true\">#</a> 实例方法</h2>\n<p><strong>charAt(index)</strong></p>\n<p>返回指定位置的字符</p>\n<p><strong>cartCodeAt(index)</strong></p>\n<p>返回指定位置字符对应的 Unicode 码点</p>\n<p><strong>concat(str1, str2, ...)</strong></p>\n<p>拼接两个字符串，返回一个拼接好的新的字符串</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">' world'</span>\nstr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello world\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>slice(start, end)</strong></p>\n<p>返回原字符串上指定开始位置和结束位置的子字符串，不改变原字符串</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello woard'</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hell\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>substr(start, length)</strong></p>\n<p>返回原字符串上指定开始位置和截取长度的子字符串，不改变原字符串</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello word'</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"he\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>indexOf(), lastIndexOf()</strong></p>\n<p>返回子串第一次或最后一次在原字符串中出现的位置，没有则返回<code>-1</code></p>\n<p><strong>trim()</strong></p>\n<p>返回原字符串去掉前后空格之后的字符串，不改变原字符串</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'  hello  '</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>toUpperCase(), toLowerCase()</strong></p>\n<p>返回原字符串中字符全部转为大写或者小写之后的字符串，不改变原字符串</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"ABC\"</span>\n\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>match(), search(), replace(), split()</strong></p>\n<p>详见<router-link to=\"/es5/regexp.html\">《正则表达式》</router-link></p>\n<p><strong>localCompare()</strong></p>\n<p>按照自然序对两个字符串进行比较</p>\n<ul>\n<li>第一个字符串小于第二个字符串，返回<code>-1</code></li>\n<li>第一个字符串等于第二个字符串，返回<code>0</code></li>\n<li>第一个字符串大于第二个字符串，返回<code>1</code></li>\n</ul>\n</div>\n",null]}