{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/document.md?vue&type=template&id=524b79c2&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/document.md","mtime":1537944817429},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"document-节点\\\"><a href=\\\"#document-节点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Document 节点</h1> <blockquote><p>文档的根结点</p></blockquote> <p>获得途径</p> <ul><li><code>window.document</code>或<code>document</code></li> <li>内部节点的<code>ownerDocument</code>或<code>getRootNode()</code></li> <li><code>iframe</code>框架里面的网页，通过<code>iframe</code>节点的<code>contentDocument</code>属性获取</li></ul> <p>继承接口</p> <ul><li>Node 接口</li> <li>EventTarget 接口</li> <li>ParentNode 接口</li></ul> <h2 id=\\\"属性\\\"><a href=\\\"#属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性</h2> <h3 id=\\\"快捷方式属性\\\"><a href=\\\"#快捷方式属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 快捷方式属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>document.defaultView</td> <td><code>window</code>对象</td></tr> <tr><td>document.doctype</td> <td>文档类型节点</td></tr> <tr><td>document.documentElement</td> <td>文档的根节点，一般是<code>&lt;html&gt;</code>节点</td></tr> <tr><td>document.body <br> document.head</td> <td><code>&lt;body&gt;</code>节点 <br> <code>&lt;head&gt;</code>节点</td></tr> <tr><td>document.scorllingElement</td> <td>文档的滚动元素，标准模式下返回<code>&lt;html&gt;</code>，兼容模式下返回<code>&lt;body&gt;</code></td></tr> <tr><td>document.activeElement</td> <td>获得当前焦点 (focus) 的元素，通常是表单元素，如果没有，则返回<code>&lt;body&gt;</code>或者<code>null</code></td></tr> <tr><td>document.fullscreenElement</td> <td>当前以全屏展示的元素，如果不是全屏状态，返回<code>null</code></td></tr></tbody></table> <h3 id=\\\"节点集合属性\\\"><a href=\\\"#节点集合属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 节点集合属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>document.links</td> <td>当前文档设置了<code>href</code>属性的<code>&lt;a&gt;</code>标签或者<code>&lt;area&gt;</code>标签</td></tr> <tr><td>document.forms</td> <td>当前文档素有的<code>&lt;form&gt;</code></td></tr> <tr><td>document.images</td> <td>当前文档的<code>&lt;img&gt;</code></td></tr> <tr><td>document.scripts</td> <td>当前文档的<code>scripts</code></td></tr> <tr><td>document.embeds <br> document.plugins</td> <td>当前文档的<code>&lt;embed&gt;</code></td></tr> <tr><td>document.styleSheets</td> <td>当前文档嵌入或引入的样式表集合</td></tr></tbody></table> <ul><li>除了 document.styleSheets 外，其他节点集合都返回 HTMLCollection 实例</li></ul> <h3 id=\\\"文档静态信息属性\\\"><a href=\\\"#文档静态信息属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档静态信息属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>document.documentURI <br> document.URL</td> <td>当前文档的网址</td></tr> <tr><td>document.domain</td> <td>当前文档的域名，不包括协议和端口</td></tr> <tr><td>document.location</td> <td>浏览器原生 Location 对象，提供 URL 相关信息和操作方法</td></tr> <tr><td>document.title</td> <td><code>&lt;title&gt;</code>节点的值，可读写</td></tr> <tr><td>document.characterSet</td> <td>当前文档编码</td></tr> <tr><td>document.referrer</td> <td>表示文档访问者来自哪里，与请求头的<code>Referer</code>相等</td></tr> <tr><td>document.dir</td> <td>文档文字方向，<code>rtl</code>从右到左，<code>ltr</code>从左到右</td></tr> <tr><td>document.compatMode</td> <td>浏览器处理文档的模式 <br> BackCompat 向后兼容 <br> CSS1Compat 严格模式 <br><code>&lt;!DOCTYPE html&gt;</code>开头的文档都返回<code>CSS1Compat</code></td></tr></tbody></table> <h3 id=\\\"文档状态属性\\\"><a href=\\\"#文档状态属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档状态属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>document.hidden</td> <td>当前页面是否可见，最小化或者切换 tab 后值为<code>true</code></td></tr> <tr><td>document.visibilityState</td> <td>文档可见状态 <br><code>visible</code>页面可见 <br><code>hidden</code>页面不可见 <br><code>prerender</code>渲染中 <br><code>unloaded</code>页面从内存中卸载了</td></tr> <tr><td>document.readyState</td> <td>返回当前文档的状态 <br><code>loading</code>html 代码加载阶段 <br><code>interctive</code>加载外部资源阶段 <br><code>complete</code>加载完成 <br> 每次状态变化会触发<code>readystatechange</code>事件</td></tr></tbody></table> <h3 id=\\\"document-cookie\\\"><a href=\\\"#document-cookie\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> document.cookie</h3> <blockquote><p>用于操作浏览器的 cookie</p></blockquote> <h3 id=\\\"document-designmode\\\"><a href=\\\"#document-designmode\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> document.designMode</h3> <blockquote><p>控制文档是否可以编辑，<code>on</code>|<code>off</code></p></blockquote> <h3 id=\\\"document-implementation\\\"><a href=\\\"#document-implementation\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> document.implementation</h3> <blockquote><p>返回一个<code>DOMImplementation</code>对象，该对象可以创建新的 Document 对象</p></blockquote> <ul><li>DOMImplementation.createDocument() 创建一个 XML 文档</li> <li>DOMImplementation.createHTMLDocument() 创建一个 HTML 文档</li> <li>DOMImplementation.createDocumentType() 创建一个 DocumentType 对象</li></ul> <h2 id=\\\"方法\\\"><a href=\\\"#方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 方法</h2> <h3 id=\\\"文档打开关闭和写入\\\"><a href=\\\"#文档打开关闭和写入\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档打开关闭和写入</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>document.open() <br> document.close()</td> <td>清除当前文档打开的内容，是文档处理可写状态 <br> 关闭 document.open() 打开的文档</td></tr> <tr><td>document.write() <br> document.writeIn()</td> <td>- 用于向当前文档写入内容 <br> - 页面在首次渲染阶段（执行 document.close() 之前），使用该方法写入的内容会被追加到文档尾部 <br> - 写入的文本会被当作 html 文档进行解析 <br> - 页面解析完成（DOMContentLoaded 事件执行）之后，调用<code>write()</code>会先调用<code>open()</code>，清除文档所有内容，再进行写入 <br> -<code>writeIn()</code>方法会在输出内容加上<code>ASCII</code>码的换行符</td></tr></tbody></table> <h3 id=\\\"文档元素查找\\\"><a href=\\\"#文档元素查找\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档元素查找</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>document.querySelector() <br> document.querySelectorAll()</td> <td>- 参数为 css 选择器，不支持伪元素和伪选择器 <br> - 可以在元素节点上调用 <br> -<code>querySelector()</code>返回第一个匹配节点，无则返回<code>null</code><br> -<code>querySelectorAll()</code>返回一个<code>NodeList</code>集合</td></tr> <tr><td>document.getElementByTagName()</td> <td>匹配 html 标签名与参数字符串相等的节点，返回<code>HTMLCollection</code>集合，大小写不敏感</td></tr> <tr><td>document.getElementByClassName()</td> <td>匹配 class 与参数字符串相等的节点，返回<code>HTMLCollection</code>集合，大小写敏感</td></tr> <tr><td>document.getElementByName()</td> <td>匹配 name 值与参数字符串相等的节点，返回<code>NodeList</code>集合</td></tr> <tr><td>document.getElementById()</td> <td>匹配 id 与参数字符串相等的节点，返回匹配到的节点，没有返回<code>null</code></td></tr></tbody></table> <h3 id=\\\"文档位置信息\\\"><a href=\\\"#文档位置信息\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档位置信息</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>document.elementFromPoint() <br> document.elementsFromPoint()</td> <td>选择指定坐标位置最上层的元素节点和元素节点集合</td></tr> <tr><td>document.caretPositionFromPoint()</td> <td>返回 CaretPosiont 对象，包含指定坐标点在节点对象内部的位置信息</td></tr></tbody></table> <h3 id=\\\"文档节点创建\\\"><a href=\\\"#文档节点创建\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档节点创建</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>document.createElement()</td> <td>创建元素节点</td></tr> <tr><td>document.createTextNode()</td> <td>创建文本类型节点</td></tr> <tr><td>document.createAttribute()</td> <td>创建属性类型节点</td></tr> <tr><td>document.createComment()</td> <td>创建注释节点</td></tr> <tr><td>document.createDocumentFragment</td> <td>- 创建空的文档片段对象 <br> - DocumentFragment 是一段存在与内存中的 DOM 片段，在进行比较复杂的 DOM 操作的时候，可以利用 DocumentFragment 来实现可以提升效率</td></tr></tbody></table> <h3 id=\\\"文档事件\\\"><a href=\\\"#文档事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文档事件</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>document.createEvent()</td> <td>生成一个事件对象 (Event 实例) ，该对象可以被<code>element.dispatchEvent()</code>方法使用，触发指定事件</td></tr> <tr><td>document.addEventListener() <br> document.removeEventListener() <br> document.dispatchEvent()</td> <td>都继承<code>EventTarget</code>接口，处理<code>document</code>节点的事件</td></tr></tbody></table> <h3 id=\\\"其他方法\\\"><a href=\\\"#其他方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 其他方法</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>document.hasFocus()</td> <td>当前文档中是否有元素激活或者获得焦点</td></tr> <tr><td>document.adoptNode() <br> document.importNode()</td> <td>-<code>adoptNode(node)</code>将节点从原来的文档中移除，归属当前文档，<code>parentNode</code>属性为<code>null</code><br> -<code>importNode(node, flag)</code>与<code>adoptNode()</code>作用一样，<code>importNode</code>是将节点对象拷贝后归属当前文档，flag 布尔值表示是否深拷贝</td></tr> <tr><td>document.createNodeIterator()</td> <td>- 返回一个子节点遍历器，接受两个参数，第一个参数为所遍历的根结点，第二个参数为所要遍历的节点类型 <br> - 遍历的节点类型 有四个选择 <br> - 所有节点:<code>NodeFilter.SHOW_ALL</code><br> - 元素节点:<code>NodeFilter.SHOW_ELEMENT</code><br> - 文本节点:<code>NodeFilter.SHOW_TEXT</code><br> - 评论节点:<code>NodeFilter.SHOW_COMMENT</code><br> - 通过遍历器的<code>nextNode()</code>和<code>previousNode()</code>方法可以进行遍历 <br> - 遍历器返回的第一个节点，总是根节点</td></tr> <tr><td>document.createTreeWalker()</td> <td>返回一个 DOM 的子树遍历器，与<code>createNodeIterator()</code>类似，只不过返回的是<code>TreeWalker</code>实例，另外，它的第一个节点不是根节点，用来遍历元素节点</td></tr> <tr><td>document.execCommand() <br> document.queryCommandSupport() <br> document.queryCommandEnabled()</td> <td>-<code>document.designMode</code>的值设为<code>on</code>，那么整个文档可编辑 <br> - 元素的<code>contenteditable</code>属性设为<code>on</code>，属性可编辑 <br> - 上面两种情况可以使用<code>document.execCommand()</code></td></tr> <tr><td>document.getSelection()</td> <td>和<code>document.getSelection()</code>相同</td></tr></tbody></table>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}