{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/promise.md?vue&type=template&id=4accade2&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/promise.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"http://es6.ruanyifeng.com/#docs/promise\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"http://es6.ruanyifeng.com/#docs/promise\"), _c(\"OutboundLink\")],\n        1\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"异步解决方案，避免回调地狱，最早有社区提出和实现，ES6 将其编入其标准\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"简而言之Promise对象通过引入一个回调而避免更多的回调\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"Promise 对象有以下两个特点\")]),\n    _vm._v(\" \"),\n    _vm._m(1),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"三个状态\")]),\n    _vm._v(\" \"),\n    _vm._m(2),\n    _vm._v(\" \"),\n    _vm._m(3),\n    _vm._v(\" \"),\n    _vm._m(4),\n    _vm._v(\" \"),\n    _vm._m(5),\n    _vm._v(\" \"),\n    _vm._m(6),\n    _vm._v(\" \"),\n    _vm._m(7),\n    _vm._v(\" \"),\n    _vm._m(8),\n    _vm._v(\" \"),\n    _vm._m(9),\n    _vm._v(\" \"),\n    _vm._m(10),\n    _vm._v(\" \"),\n    _vm._m(11),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"用于将多个 Promise 对象包装成一个新的Promise实例\")]),\n    _vm._v(\" \"),\n    _vm._m(12),\n    _vm._v(\" \"),\n    _vm._m(13),\n    _vm._v(\" \"),\n    _vm._m(14),\n    _vm._v(\" \"),\n    _vm._m(15),\n    _vm._v(\" \"),\n    _vm._m(16),\n    _vm._v(\" \"),\n    _vm._m(17),\n    _vm._v(\" \"),\n    _vm._m(18),\n    _vm._m(19),\n    _vm._v(\" \"),\n    _vm._m(20),\n    _vm._v(\" \"),\n    _vm._m(21),\n    _vm._m(22)\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"promise-对象\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-对象\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise 对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_vm._v(\"对象的状态不受外界影响\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"一旦状态改变，就不会再变，任何时候得到的都是改变之后的结果\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"code\", [_vm._v(\"pending\")]), _vm._v(\"进行中\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"fullfilled\")]), _vm._v(\"已成功\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"reject\")]), _vm._v(\"已失败\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"构造函数\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#构造函数\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 构造函数\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"可以直接通过\"),\n      _c(\"code\", [_vm._v(\"new Promise()\")]),\n      _vm._v(\n        \"构造一个 Promise 对象，接受一个回调函数作为参数，回调函数的参数由\"\n      ),\n      _c(\"code\", [_vm._v(\"JavaScript\")]),\n      _vm._v(\"引擎提供，\"),\n      _c(\"code\", [_vm._v(\"resolve\")]),\n      _vm._v(\"和\"),\n      _c(\"code\", [_vm._v(\"reject\")]),\n      _vm._v(\"，用来控制 Promise 进入下一个状态。在回调函数中调用\"),\n      _c(\"code\", [_vm._v(\"resolve()\")]),\n      _vm._v(\"将 Promise 对象置为\"),\n      _c(\"code\", [_vm._v(\"fullfiled\")]),\n      _vm._v(\"状态，调用\"),\n      _c(\"code\", [_vm._v(\"reject()\")]),\n      _vm._v(\"将对象置为\"),\n      _c(\"code\", [_vm._v(\"rejected\")]),\n      _vm._v(\"状态\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-prototype-then\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-prototype-then\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.prototype.then()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"第一个参数为\"),\n        _c(\"code\", [_vm._v(\"resolved\")]),\n        _vm._v(\"状态的回调函数，第二个参数为\"),\n        _c(\"code\", [_vm._v(\"rejected\")]),\n        _vm._v(\"状态的回调函数\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"返回一个全新的 Promise 实例\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-prototype-catch\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-prototype-catch\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.prototype.catch()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"用来捕获在构造函数或者\"),\n      _c(\"code\", [_vm._v(\"then()\")]),\n      _vm._v(\"回调处理里面出现的错误\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-prototype-finally\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-prototype-finally\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.prototype,finally\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"finally\")]),\n      _vm._v(\"方法用于不管最后状态如何都会执行的操作，在 ES2018 中引入标准\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-all\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-all\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.all()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"所有的 Promise 对象状态都变为\"),\n      _c(\"code\", [_vm._v(\"resolved\")]),\n      _vm._v(\"状态后，新的实例的状态才会变为\"),\n      _c(\"code\", [_vm._v(\"resolved\")]),\n      _vm._v(\"，只要有一个\"),\n      _c(\"code\", [_vm._v(\"rejected\")]),\n      _vm._v(\"，新的实例的状态都会变为 \"),\n      _c(\"code\", [_vm._v(\"rejected\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-race\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-race\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.race()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"和\"),\n      _c(\"code\", [_vm._v(\"Promise.all()\")]),\n      _vm._v(\"一样，将多个 Promise 对象包装成一个新的 Promise 对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"race\")]),\n      _vm._v(\n        \" 时比赛的意思，所以这个方法的意思是多个 Promise 对象中谁的状态先改变，新的Promise对象的状态就会跟着改变\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-resolve\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-resolve\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.resolve()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"将现有的对象转化为 Promise 对象，返回一个状态为\"),\n        _c(\"code\", [_vm._v(\"resolved\")]),\n        _vm._v(\"状态的Promise对象\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"//相当于\")\n          ]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n            _vm._v(\"Promise\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _vm._v(\"resolve\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\",\")]),\n          _vm._v(\" reject\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=>\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"resolve\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-reject\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-reject\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.reject()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"将现有的对象转化为 Promise 对象，返回一个状态为\"),\n        _c(\"code\", [_vm._v(\"rejected\")]),\n        _vm._v(\"状态的 Promise 对象\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"//相当于\")\n          ]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n            _vm._v(\"Promise\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _vm._v(\"resolve\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\",\")]),\n          _vm._v(\" reject\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=>\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"reject\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"promise-try\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#promise-try\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Promise.try()\")\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}