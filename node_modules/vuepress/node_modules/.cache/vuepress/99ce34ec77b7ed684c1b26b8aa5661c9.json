{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/css-operator.md?vue&type=template&id=aa390c38&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/css-operator.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _vm._m(1),\n    _vm._v(\" \"),\n    _vm._m(2),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"通过 HTML 元素操作属性的方法可以直接读写 style 属性\")]),\n    _vm._v(\" \"),\n    _vm._m(3),\n    _vm._m(4),\n    _vm._v(\" \"),\n    _vm._m(5),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"CSSStyleDeclaration 接口用来操作元素的样式，下面三个地方实现了这个接口\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(6),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"CSSStyleDeclaration 接口可以直接读写 css 的样式属性，属性和 css 规则一一对应，\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(7),\n    _vm._v(\" \"),\n    _vm._m(8),\n    _vm._v(\" \"),\n    _vm._m(9),\n    _vm._v(\" \"),\n    _vm._m(10),\n    _vm._v(\" \"),\n    _vm._m(11),\n    _vm._v(\" \"),\n    _vm._m(12),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"判断浏览器是否支持某个 css 属性\")]),\n    _vm._v(\" \"),\n    _vm._m(13),\n    _vm._v(\" \"),\n    _vm._m(14),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"浏览器原生提供 CSS 对象，为 JavaScript 提供方法操作 CSS，目前，该对象有两个静态方法\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(15),\n    _vm._v(\" \"),\n    _vm._m(16),\n    _vm._v(\" \"),\n    _vm._m(17),\n    _vm._v(\" \"),\n    _vm._m(18),\n    _vm._v(\" \"),\n    _vm._m(19),\n    _vm._v(\" \"),\n    _vm._m(20),\n    _vm._v(\" \"),\n    _vm._m(21),\n    _vm._v(\" \"),\n    _vm._m(22),\n    _vm._v(\" \"),\n    _vm._m(23),\n    _vm._v(\" \"),\n    _vm._m(24),\n    _vm._v(\" \"),\n    _vm._m(25),\n    _vm._v(\" \"),\n    _vm._m(26),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"网页添加样式表有两种方式：\")]),\n    _vm._v(\" \"),\n    _vm._m(27),\n    _vm._v(\" \"),\n    _vm._m(28),\n    _vm._v(\" \"),\n    _vm._m(29),\n    _vm._v(\" \"),\n    _vm._m(30),\n    _vm._v(\" \"),\n    _vm._m(31),\n    _vm._v(\" \"),\n    _vm._m(32),\n    _vm._v(\" \"),\n    _vm._m(33),\n    _vm._v(\" \"),\n    _vm._m(34),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"如果 CSS 规则是一条普通的 CSS 样式规则（不包含特殊的 CSS 命令），那么除了实现 CSSRule 接口之外，还实现了 CSSStyleRule 接口，接口实例具有下面两个属性\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(35),\n    _vm._v(\" \"),\n    _vm._m(36),\n    _vm._v(\" \"),\n    _vm._m(37),\n    _vm._v(\" \"),\n    _vm._m(38),\n    _vm._v(\" \"),\n    _vm._m(39),\n    _vm._v(\" \"),\n    _vm._m(40),\n    _vm._v(\" \"),\n    _vm._m(41),\n    _vm._v(\" \"),\n    _vm._m(42),\n    _vm._v(\" \"),\n    _vm._m(43),\n    _vm._v(\" \"),\n    _vm._m(44),\n    _vm._v(\" \"),\n    _vm._m(45),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"https://wangdoc.com/javascript/dom/index.html\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [\n          _vm._v(\"网道（WangDoc.com）是一个文档网站，提供互联网开发文档\"),\n          _c(\"OutboundLink\")\n        ],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"css-操作\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#css-操作\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSS 操作\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_vm._v(\"CSS 负责页面的视觉效果\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"JavaScript 负责用户的行为互动\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"html-元素的-style-属性\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#html-元素的-style-属性\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" HTML 元素的 style 属性\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _vm._v(\"document\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"getElementById\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'id'\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"setAttribute\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'style'\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\",\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [\n            _vm._v(\"'background-color: #fff;'\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"HTML 元素的 style 属性不仅可以当作一个字符串进行读写，还是一个对象，实现了 CSSStyleDeclaration 接口，可以通过 css 键名来读写属性，例如\"\n      ),\n      _c(\"code\", [_vm._v(\"div.style.fontSize = '14px'\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"cssstyledelaration-接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#cssstyledelaration-接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSStyleDelaration 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"元素节点的\"),\n        _c(\"code\", [_vm._v(\"style\")]),\n        _vm._v(\"属性\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"CSSStyle\")]),\n        _vm._v(\"实例的\"),\n        _c(\"code\", [_vm._v(\"style\")]),\n        _vm._v(\"属性\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"window.getComputedStyle()\")]),\n        _vm._v(\"的返回值，参数为元素节点\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_vm._v(\"将横杠从 css 属性名中移除，将横杠后的第一个字母大写\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"如果属性为 JavaScript 保留字规则名之前需加上\"),\n        _c(\"code\", [_vm._v(\"css\")]),\n        _vm._v(\"，例如\"),\n        _c(\"code\", [_vm._v(\"cssFloat\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"属性值都是字符串，设置是必须包括单位\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"Element.style\")]),\n        _vm._v(\"只包括行内样式，通过样式表或者继承的样式，无法获得，需通过\"),\n        _c(\"code\", [_vm._v(\"window.getComputedStyle()\")]),\n        _vm._v(\"方法获得所有 css 样式\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"cssstyledeclaration-实例属性\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: {\n            href: \"#cssstyledeclaration-实例属性\",\n            \"aria-hidden\": \"true\"\n          }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSStyleDeclaration 实例属性\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"attribute\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.cssText\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [_vm._v(\"用来读写当前规则的所有样式声明文本，是一个字符串\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.length\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [_vm._v(\"返回一个整数值，表示当前规则含有多少条样式声明\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.parentRule\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\n              \"返回当前规则属于哪一个实例块（ CSSRule 实例），如果不存在所属的实例块，返回\"\n            ),\n            _c(\"code\", [_vm._v(\"null\")]),\n            _vm._v(\"只读\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"cssstyledeclaration-实例方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: {\n            href: \"#cssstyledeclaration-实例方法\",\n            \"aria-hidden\": \"true\"\n          }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSStyleDeclaration 实例方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"method\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.getPropertyPriority()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"接受 css 样式的属性名作为参数，表示该样式又没有设置\"),\n            _c(\"code\", [_vm._v(\"important\")]),\n            _vm._v(\"属性，有则返回\"),\n            _c(\"code\", [_vm._v(\"important\")]),\n            _vm._v(\"，没有返回空字符串\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.getPropertyValue()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"接受 css 样式的属性名作为参数，返回该属性的属性值\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.item()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"接受一个整数作为参数，返回第 n 个位置 css 属性的属性值\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.removeProperty()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [_vm._v(\"移除某个属性，返回被移除的属性的属性值\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleDeclaration.setProperty()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\n              \"设置某个属性的属性值，第一个参数是属性名，第二个参数是属性值，第三个参数是优先级\"\n            )\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"css-模块的侦测\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#css-模块的侦测\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSS 模块的侦测\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"typeof Element.style.propertyName 的值为\"),\n        _c(\"code\", [_vm._v(\"string\")]),\n        _vm._v(\"，表示支持，如果不支持，会返回\"),\n        _c(\"code\", [_vm._v(\"undefined\")])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"css-对象\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#css-对象\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSS 对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"method\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSS.escape()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"转义 css 选择器里面的特殊字符，比如元素节点的\"),\n            _c(\"code\", [_vm._v(\"id\")]),\n            _vm._v(\"属性里面带有\"),\n            _c(\"code\", [_vm._v(\"#\")]),\n            _vm._v(\"字符\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSS.supports()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\n              \"返回一个布尔值，表示当前环境是否支持某一条 CSS 规则，第一个参数是属性名，第二个参数为属性值\"\n            )\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"window-getcomputedstyle\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#window-getcomputedstyle\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Window.getComputedStyle()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\n          \"接受一个元素节点作为第一哥参数，返回元素经过浏览器计算后的到的最终样式规则，也就是各种 css 叠加后的结果\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"可以传入第二个参数，表示当前元素的伪元素，比如\"),\n        _c(\"code\", [_vm._v(\":before\")]),\n        _vm._v(\",\"),\n        _c(\"code\", [_vm._v(\":after\")]),\n        _vm._v(\",\"),\n        _c(\"code\", [_vm._v(\":first-line\")]),\n        _vm._v(\",\"),\n        _c(\"code\", [_vm._v(\"first-letter\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\n          \"CSSStyleDelaration 实例返回的 css 值都是绝对单位，比如，长度是像素单位，返回值包括\"\n        ),\n        _c(\"code\", [_vm._v(\"px\")]),\n        _vm._v(\"后缀，颜色是\"),\n        _c(\"code\", [_vm._v(\"rgba(#,#,#,#)\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"该方法返回的 CSSStyledeclaration 实例没有\"),\n        _c(\"code\", [_vm._v(\"cssText\")]),\n        _vm._v(\"属性，返回\"),\n        _c(\"code\", [_vm._v(\"undefined\")])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"css-伪元素\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#css-伪元素\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSS 伪元素\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"CSS 伪元素是通过 css 向 DOM 添加的元素，主要是通过\"),\n        _c(\"code\", [_vm._v(\":before\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\":after\")]),\n        _vm._v(\"选择器生成，内容通过\"),\n        _c(\"code\", [_vm._v(\"content\")]),\n        _vm._v(\"指定\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"无法通过元素的\"),\n        _c(\"code\", [_vm._v(\"style\")]),\n        _vm._v(\"属性获取伪元素，只能通过\"),\n        _c(\"code\", [_vm._v(\"window.getComputedStyle()\")]),\n        _vm._v(\"方法传入第二个伪元素选择器来获取元素的伪元素的属性\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"stylesheet-接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#stylesheet-接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" StyleSheet 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"StyleSheet\")]),\n        _vm._v(\"接口表示一张网页的样式表，包括通过\"),\n        _c(\"code\", [_vm._v(\"<link>\")]),\n        _vm._v(\"加载的样式表和\"),\n        _c(\"code\", [_vm._v(\"<style>\")]),\n        _vm._v(\"内嵌的样式表\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"document.styleSheets\")]),\n        _vm._v(\" 属性返回整个页面所有的样式表，返回一个\"),\n        _c(\"code\", [_vm._v(\"array-like-obj\")]),\n        _vm._v(\"，成员是每一个\"),\n        _c(\"code\", [_vm._v(\"StyleSheets\")]),\n        _vm._v(\"实例\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"如果是\"),\n        _c(\"code\", [_vm._v(\"<style>\")]),\n        _vm._v(\"引入的内嵌样式，可以通过元素的\"),\n        _c(\"code\", [_vm._v(\"sheet\")]),\n        _vm._v(\"属性来获取\"),\n        _c(\"code\", [_vm._v(\"StyleSheets\")]),\n        _vm._v(\"接口\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"CSSStyleSheet 接口继承了 StyleSheet 接口的属性\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"实例属性\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#实例属性\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 实例属性\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"attribute\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.disabled\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [_vm._v(\"设置样式表的禁用状态\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.href\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回样式表的网址，如果是内嵌样式，返回\"),\n            _c(\"code\", [_vm._v(\"null\")]),\n            _vm._v(\"，只读\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.title\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回样式表的\"),\n            _c(\"code\", [_vm._v(\"title\")]),\n            _vm._v(\"属性\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.type\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回样式表的类型，通常是\"),\n            _c(\"code\", [_vm._v(\"text/css\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.parentStyleSheet\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"CSS 的\"),\n            _c(\"code\", [_vm._v(\"@import\")]),\n            _vm._v(\n              \"命令允许在样式表中加载其他样式表，返回包含当前样式表的样式表\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.media\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回一个类似数组的对象（\"),\n            _c(\"code\", [_vm._v(\"MediaList\")]),\n            _vm._v(\"实例），成员是表示适用媒介的字符串，只读 \"),\n            _c(\"br\"),\n            _vm._v(\" - 打印：\"),\n            _c(\"code\", [_vm._v(\"print\")]),\n            _vm._v(\" \"),\n            _c(\"br\"),\n            _vm._v(\" - 屏幕：\"),\n            _c(\"code\", [_vm._v(\"screen\")]),\n            _c(\"br\"),\n            _vm._v(\" - 手持设备：\"),\n            _c(\"code\", [_vm._v(\"handheld\")]),\n            _vm._v(\" \"),\n            _c(\"br\"),\n            _vm._v(\" - 所有：\"),\n            _c(\"code\", [_vm._v(\"all\")]),\n            _c(\"br\"),\n            _c(\"code\", [_vm._v(\"MediaList\")]),\n            _vm._v(\" 实例的\"),\n            _c(\"code\", [_vm._v(\"appendMedia()\")]),\n            _vm._v(\"方法用于增加媒介，\"),\n            _c(\"code\", [_vm._v(\"deleteMedia()\")]),\n            _vm._v(\"方法用于删除媒介\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"StyleSheet.ownerNode\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回\"),\n            _c(\"code\", [_vm._v(\"StyleSheet\")]),\n            _vm._v(\"实例对象所在的 DOM 节点，通常是\"),\n            _c(\"code\", [_vm._v(\"<style>\")]),\n            _vm._v(\"或者\"),\n            _c(\"code\", [_vm._v(\"<link>\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleSheet.cssRules\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"指向一个\"),\n            _c(\"code\", [_vm._v(\"CSSRuleList\")]),\n            _vm._v(\"实例，里面的每个成员都是当前的一条 CSS 规则 \"),\n            _c(\"br\"),\n            _vm._v(\" - 使用该规则的\"),\n            _c(\"code\", [_vm._v(\"cssText\")]),\n            _vm._v(\"属性，可以的到当前 CSS 规则对应的字符串表达形式 \"),\n            _c(\"br\"),\n            _vm._v(\" - 使用改规则的\"),\n            _c(\"code\", [_vm._v(\"style\")]),\n            _vm._v(\"属性，指向一个对象，用来读写具体的 CSS 命令\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleSheet.ownerRule\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"有些样式表是通过\"),\n            _c(\"code\", [_vm._v(\"@import\")]),\n            _vm._v(\"引入的，他得\"),\n            _c(\"code\", [_vm._v(\"ownerRule\")]),\n            _vm._v(\"属性会返回一个\"),\n            _c(\"code\", [_vm._v(\"CSSRule\")]),\n            _vm._v(\"实例，代表那行\"),\n            _c(\"code\", [_vm._v(\"@import\")]),\n            _vm._v(\" 规则，如果当前样式表不是通过\"),\n            _c(\"code\", [_vm._v(\"@import\")]),\n            _vm._v(\"引入的，则返回\"),\n            _c(\"code\", [_vm._v(\"null\")])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"实例方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#实例方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 实例方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"method\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleSheet.insertRule()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"插入一条新的 CSS 规则，接受两个参数 \"),\n            _c(\"br\"),\n            _vm._v(\n              \" - 第一个参数是表示 CSS 规则的字符串，只能有一条规则，否则报错 \"\n            ),\n            _c(\"br\"),\n            _vm._v(\" - 第二个参数是插入的位置，默认为 0 \"),\n            _c(\"br\"),\n            _vm._v(\" - 浏览器对于用脚本插入样式规则有许多的限制，最好使用\"),\n            _c(\"code\", [_vm._v(\"try...catch\")]),\n            _vm._v(\"块对错误进行捕获\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSStyleSheet.deleteRule()\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\n              \"用来删除一条规则，参数为整数，表示规则在 CSSRules 实例里面的位置\"\n            )\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"添加样式表\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#添加样式表\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 添加样式表\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ol\", [\n      _c(\"li\", [\n        _vm._v(\"添加一张内置样式表，也就是添加一个\"),\n        _c(\"code\", [_vm._v(\"<style>\")]),\n        _vm._v(\"节点\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"添加一个\"),\n        _c(\"code\", [_vm._v(\"<link>\")]),\n        _vm._v(\"节点，并设置该节点的\"),\n        _c(\"code\", [_vm._v(\"href\")]),\n        _vm._v(\"属性\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"cssrulelist-接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#cssrulelist-接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSRuleList 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"CSSRuleList 接口是一个\"),\n      _c(\"code\", [_vm._v(\"array-like-obj\")]),\n      _vm._v(\"，成员是 CSSRule 实实例， 一般通过\"),\n      _c(\"code\", [_vm._v(\"CSSStyleSheet.cssRules\")]),\n      _vm._v(\"属性获得\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"cssrule-接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#cssrule-接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSRule 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"一条 CSS 规则包括两个部分： CSS 选择器和样式声明，JavaScript 通过\"\n      ),\n      _c(\"code\", [_vm._v(\"CSSRule\")]),\n      _vm._v(\"接口来读取一条 CSS 规则\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"cssrule-实例属性\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#cssrule-实例属性\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSRule 实例属性\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"attribute\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSRule.cssText\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回当前规则的文本，如果是\"),\n            _c(\"code\", [_vm._v(\"@import\")]),\n            _vm._v(\"加载的样式，则返回\"),\n            _c(\"code\", [_vm._v(\"@import'url'\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSRule.parentStyleSheet\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回当前规则所在的样式表对象\"),\n            _c(\"code\", [_vm._v(\"CSSStyleSheet\")]),\n            _vm._v(\"接口实例\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSRule.parentRule\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回包括当前规则的父规则，如果不存在父规则，则返回\"),\n            _c(\"code\", [_vm._v(\"null\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"CSSRule.style\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"返回规则的类型 \"),\n            _c(\"br\"),\n            _vm._v(\" - 1 : 普通样式规则 \"),\n            _c(\"br\"),\n            _vm._v(\" - 3 : @import 规则 \"),\n            _c(\"br\"),\n            _vm._v(\" - 4 : @media 规则 \"),\n            _c(\"br\"),\n            _vm._v(\" - 5 : font-face 规则\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"cssstylerule-接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#cssstylerule-接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSStyleRule 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"CSSStyleRule.selectorText 返回当前规则的选择器字符串\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"CSSStyleRule.style 返回一个 CSSStyleDeclaration 实例\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"cssmediarule-接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#cssmediarule-接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" CSSMediaRule 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"如果 CSS 是\"),\n      _c(\"code\", [_vm._v(\"@media\")]),\n      _vm._v(\n        \"代码块，除了实现了 CSSRule 接口，还实现了 CSSMediaRule 接口，有两个属性\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"CSSMediaRule.media 返回代表\"),\n        _c(\"code\", [_vm._v(\"@media\")]),\n        _vm._v(\"规则的一个对象（ MediaList 实例）\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"CSSMediaRule.conditionText 返回\"),\n        _c(\"code\", [_vm._v(\"@media\")]),\n        _vm._v(\"规则的生效条件\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"window-matchmedia\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#window-matchmedia\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" window.matchMedia()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"用来将 CSS 的\"),\n      _c(\"code\", [_vm._v(\"MediaQuery\")]),\n      _vm._v(\"条件语句，转换成\"),\n      _c(\"code\", [_vm._v(\"MediaQueryList\")]),\n      _vm._v(\"实例\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"实例属性-2\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#实例属性-2\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 实例属性\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", [_vm._v(\"attribute\")]),\n          _vm._v(\" \"),\n          _c(\"th\", [_vm._v(\"desc\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"MediaQueryList.media\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [_vm._v(\"返回一个字符串，表示对应的 MediaQuery 条件语句\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"MediaQueryList.matches\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\n              \"返回一个布尔值，表示当前页面是否符合指定的 MediaQuery 条件语句\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", [_vm._v(\"MediaQueryList.onchange\")]),\n          _vm._v(\" \"),\n          _c(\"td\", [\n            _vm._v(\"如果 MediaQuery 条件语句的适配环境发生变化，会出发\"),\n            _c(\"code\", [_vm._v(\"change\")]),\n            _vm._v(\"事件，MediaQueryList.onchange 用来指定\"),\n            _c(\"code\", [_vm._v(\"change\")]),\n            _vm._v(\"事件监听的函数，该函数的参数是\"),\n            _c(\"code\", [_vm._v(\"change\")]),\n            _vm._v(\n              \"事件的对象（MediaQueryListEvent 实例），与 MediaQueryList 相似，也有\"\n            ),\n            _c(\"code\", [_vm._v(\"media\")]),\n            _vm._v(\"和\"),\n            _c(\"code\", [_vm._v(\"matches\")]),\n            _vm._v(\"属性\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"实例方法-2\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#实例方法-2\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 实例方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"MediaQueryList.addListener() 和 MediaQueryList.removeListener() 用来为\"\n      ),\n      _c(\"code\", [_vm._v(\"change\")]),\n      _vm._v(\"事件添加或移除监听函数\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"参考\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#参考\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 参考\")\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}