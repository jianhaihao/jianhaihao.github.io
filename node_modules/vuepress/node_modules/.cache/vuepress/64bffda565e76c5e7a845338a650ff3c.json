{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/regexp.md?vue&type=template&id=e092d114&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/regexp.md","mtime":1537933948863},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _c(\"blockquote\", [\n      _c(\"p\", [\n        _vm._v(\"正则表达式一种文本匹配的模式。\"),\n        _c(\n          \"a\",\n          {\n            attrs: {\n              href: \"http://javascript.ruanyifeng.com/stdlib/regexp.html#toc5\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\"\n            }\n          },\n          [_vm._v(\"参考\"), _c(\"OutboundLink\")],\n          1\n        )\n      ])\n    ]),\n    _vm._v(\" \"),\n    _vm._m(1),\n    _vm._v(\" \"),\n    _vm._m(2),\n    _vm._m(3),\n    _vm._v(\" \"),\n    _vm._m(4),\n    _vm._v(\" \"),\n    _vm._m(5),\n    _vm._m(6),\n    _vm._v(\" \"),\n    _vm._m(7),\n    _vm._m(8),\n    _vm._v(\" \"),\n    _vm._m(9),\n    _vm._v(\" \"),\n    _vm._m(10),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"返回布尔值，当前模式是否匹配参数字符串\")]),\n    _vm._v(\" \"),\n    _vm._m(11),\n    _vm._v(\" \"),\n    _vm._m(12),\n    _vm._v(\" \"),\n    _vm._m(13),\n    _vm._v(\" \"),\n    _vm._m(14),\n    _vm._m(15),\n    _vm._v(\" \"),\n    _vm._m(16),\n    _vm._v(\" \"),\n    _vm._m(17),\n    _vm._v(\" \"),\n    _vm._m(18),\n    _vm._v(\" \"),\n    _vm._m(19),\n    _vm._v(\" \"),\n    _vm._m(20),\n    _vm._v(\" \"),\n    _vm._m(21),\n    _vm._v(\" \"),\n    _vm._m(22),\n    _vm._v(\" \"),\n    _vm._m(23),\n    _vm._v(\" \"),\n    _vm._m(24),\n    _vm._v(\" \"),\n    _vm._m(25),\n    _vm._v(\" \"),\n    _vm._m(26),\n    _vm._v(\" \"),\n    _vm._m(27),\n    _vm._v(\" \"),\n    _vm._m(28),\n    _vm._v(\" \"),\n    _vm._m(29),\n    _vm._m(30),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"正则表达式为一些不能打印的字符，提供了一些表达方法\")]),\n    _vm._v(\" \"),\n    _vm._m(31),\n    _vm._v(\" \"),\n    _vm._m(32),\n    _vm._v(\" \"),\n    _vm._m(33),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"有两个字符在字符类中有特殊含义\")]),\n    _vm._v(\" \"),\n    _vm._m(34),\n    _vm._v(\" \"),\n    _vm._m(35),\n    _vm._v(\" \"),\n    _vm._m(36),\n    _vm._v(\" \"),\n    _vm._m(37),\n    _vm._v(\" \"),\n    _vm._m(38),\n    _vm._v(\" \"),\n    _vm._m(39),\n    _vm._v(\" \"),\n    _vm._m(40),\n    _vm._v(\" \"),\n    _vm._m(41),\n    _vm._v(\" \"),\n    _vm._m(42),\n    _vm._v(\" \"),\n    _vm._m(43),\n    _vm._v(\" \"),\n    _vm._m(44),\n    _vm._v(\" \"),\n    _vm._m(45),\n    _vm._v(\" \"),\n    _vm._m(46),\n    _vm._v(\" \"),\n    _vm._m(47),\n    _vm._v(\" \"),\n    _vm._m(48),\n    _vm._v(\" \"),\n    _vm._m(49),\n    _vm._v(\" \"),\n    _vm._m(50),\n    _vm._v(\" \"),\n    _vm._m(51),\n    _vm._v(\" \"),\n    _vm._m(52),\n    _vm._v(\" \"),\n    _vm._m(53),\n    _vm._m(54),\n    _vm._v(\" \"),\n    _vm._m(55),\n    _vm._v(\" \"),\n    _vm._m(56),\n    _vm._m(57),\n    _vm._v(\" \"),\n    _vm._m(58),\n    _vm._v(\" \"),\n    _vm._m(59)\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"正则表达式-3\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#正则表达式-3\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 正则表达式 (3)\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"新建正则表达式\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#新建正则表达式\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 新建正则表达式\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"var\")]),\n          _vm._v(\" regexp \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n            _vm._v(\"RegExp\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'xyz'\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\n\\n\"),\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"var\")]),\n          _vm._v(\" regexp \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token regex\" } }, [_vm._v(\"/xyz/\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"实例属性\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#实例属性\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 实例属性\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [_c(\"li\", [_vm._v(\"只读属性，修饰符\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _vm._v(\"RegExp\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"ignoreCase  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 忽略大小写\")\n          ]),\n          _vm._v(\"\\nRegExp\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"global  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 全局匹配\")\n          ]),\n          _vm._v(\"\\nRegExp\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"multiline  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 多行模式匹配\")\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [_c(\"li\", [_vm._v(\"其他属性\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _vm._v(\"RegExp\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"lastIndex  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\n              \"// 返回一个数值，表示下一次搜索开始的位置，可写，当使用 g 修饰符的时候，该属性才发挥作用\"\n            )\n          ]),\n          _vm._v(\"\\nRegExp\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"source  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 返回正则表达式的字符串形式，不包括反斜杠，只读\")\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"可以通过手动指定\"),\n      _c(\"code\", [_vm._v(\"lastIndex\")]),\n      _vm._v(\"属性来设置匹配的起始位置\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"实例方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#实例方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 实例方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"regexp-prototype-test\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#regexp-prototype-test\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" RegExp.prototype.test\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"regexp-prototype-exec\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#regexp-prototype-exec\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" RegExp.prototype.exec\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\n          \"正则匹配字符串，如果匹配上，返回包含结果的类数组的对象；如果没有结果，返回\"\n        ),\n        _c(\"code\", [_vm._v(\"null\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\n          \"返回类数组对象第一个成员为匹配成功的子串，第二个成员是圆括号匹配的结果\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"返回的类数组对象包含\"),\n        _c(\"code\", [_vm._v(\"input\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\"index\")]),\n        _vm._v(\"两个属性，分别表示原字符串和匹配成功子串在原字符串的起始位置\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"字符串的实例方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#字符串的实例方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 字符串的实例方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _vm._v(\"String\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"match\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 返回一个数组，包含所有匹配到的子串，没有返回 null\")\n          ]),\n          _vm._v(\"\\nString\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"search\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 返回一个整数，表示匹配成功开始的位置，没有返回 -1\")\n          ]),\n          _vm._v(\"\\nString\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"replace\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// 按照给定的正则表达式替换字符串，返回替换后的字符串\")\n          ]),\n          _vm._v(\"\\nString\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"prototype\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"split\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\n              \"// 按照给定的正则表达式对字符串进行分割，返回一个包含分割后子串的数组\"\n            )\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"设置正则表达式的\"),\n        _c(\"code\", [_vm._v(\"lastIndex\")]),\n        _vm._v(\"属性，对\"),\n        _c(\"code\", [_vm._v(\"match()\")]),\n        _vm._v(\"方法无效，每次匹配都是从第 0 个位置开始的\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"replace()\")]),\n        _vm._v(\n          \"方法第二个参数可以是替换后的字符串，也可以是正则表达是的分组表达式\"\n        ),\n        _c(\"code\", [_vm._v(\"$(1)\")]),\n        _vm._v(\"，也可以是一个函数，替换每一个匹配的返回值\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"split()\")]),\n        _vm._v(\"方法的第二个参数可以是一个数值，表示返回数组的最大成员数\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"匹配规则\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#匹配规则\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 匹配规则\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"字面量字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#字面量字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 字面量字符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"blockquote\", [\n      _c(\"p\", [\n        _vm._v(\"在正则表达式中，某个字符只表示它字面的含义，比如\"),\n        _c(\"code\", [_vm._v(\"/z/\")]),\n        _vm._v(\",\"),\n        _c(\"code\", [_vm._v(\"/a/\")]),\n        _vm._v(\"分别匹配 a 和 b，就叫他字面量字符\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"元字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#元字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 元字符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"blockquote\", [_c(\"p\", [_vm._v(\"具有特殊含义的字符\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"点字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#点字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 点字符 (.)\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"匹配除开回车 (\"),\n      _c(\"code\", [_vm._v(\"\\\\r\")]),\n      _vm._v(\")、换行 (\"),\n      _c(\"code\", [_vm._v(\"\\\\n\")]),\n      _vm._v(\")、行分割符 (\"),\n      _c(\"code\", [_vm._v(\"\\\\u2028\")]),\n      _vm._v(\") 和段分割符 (\"),\n      _c(\"code\", [_vm._v(\"\\\\u2029\")]),\n      _vm._v(\") 之外任意一个字符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"位置字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#位置字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 位置字符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"code\", [_vm._v(\"^\")]), _vm._v(\"表示字符串的开始位置\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"$\")]), _vm._v(\"表示字符串的结束位置\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"选择符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#选择符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 选择符 (|)\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"竖线符号\"),\n      _c(\"code\", [_vm._v(\"|\")]),\n      _vm._v(\"在正则表达式中，表示或 (\"),\n      _c(\"code\", [_vm._v(\"OR\")]),\n      _vm._v(\") 的关系，可以联合使用\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"转义符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#转义符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 转义符 ()\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"正则表达式中有一些特殊含义的元字符，如果要表达他们本身，则需要在字符前加上\"\n      ),\n      _c(\"code\", [_vm._v(\"\\\\\")]),\n      _vm._v(\"进行转义\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token regex\" } }, [_vm._v(\"/\\\\+/\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"test\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'a+b'\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// true\")\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"特殊字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#特殊字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 特殊字符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"[\\\\b]\")]),\n        _vm._v(\"匹配退格键，不要与\"),\n        _c(\"code\", [_vm._v(\"\\\\b\")]),\n        _vm._v(\"混淆\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"\\\\n\")]), _vm._v(\"匹配换行键\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"\\\\r\")]), _vm._v(\"匹配回车键\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"\\\\t\")]), _vm._v(\"匹配制表符\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"\\\\v\")]), _vm._v(\"匹配垂直制表符\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"\\\\f\")]), _vm._v(\"匹配换页符\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\0\")]),\n        _vm._v(\"匹配\"),\n        _c(\"code\", [_vm._v(\"null\")]),\n        _vm._v(\"字符\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\xhh\")]),\n        _vm._v(\"匹配\"),\n        _c(\"code\", [_vm._v(\"\\\\u00\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\"\\\\uFF\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\uhhhh\")]),\n        _vm._v(\"匹配\"),\n        _c(\"code\", [_vm._v(\"\\\\u0000\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\"\\\\uFFFF\")])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"字符类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#字符类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 字符类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"字符类 class 表示一些可供选择的字符，只要匹配一个就可以，把所有待匹配的字符放入方括号类，组成一个字符类，\"\n      ),\n      _c(\"code\", [_vm._v(\"/[abc]/\")]),\n      _vm._v(\"可以匹配带有 a, b, c 字符的字符串\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"脱字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#脱字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 脱字符 (^)\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"表示除开方括号字符的任意字符都可以匹配，\"),\n        _c(\"code\", [_vm._v(\"[^abc]\")]),\n        _vm._v(\"表示匹配除开 a, b, c 之外的任意字符\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"[^] 表示匹配一切字符，范围比点字符 (.) 要大\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"脱字符只有在字符类的第一位才有效，否则就是字面字符\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"连字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#连字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 连字符 (-)\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"/[0-9]/\")]),\n        _vm._v(\"表示\"),\n        _c(\"code\", [_vm._v(\"[0123456789]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"/[a-z]/\")]), _vm._v(\"表示 26 个小写字母\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"/[A-Z]/\")]), _vm._v(\"表示 26 个大写字母\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"预定义模式\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#预定义模式\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 预定义模式\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"blockquote\", [_c(\"p\", [_vm._v(\"常见匹配模式的简写\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\d\")]),\n        _vm._v(\"等同于\"),\n        _c(\"code\", [_vm._v(\"[0-9]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\D\")]),\n        _vm._v(\"等同于\"),\n        _c(\"code\", [_vm._v(\"[^0-9]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\w\")]),\n        _vm._v(\"等同于\"),\n        _c(\"code\", [_vm._v(\"[a-zA-Z0-9_]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\W\")]),\n        _vm._v(\"等同于\"),\n        _c(\"code\", [_vm._v(\"[^a-zA-Z0-9_]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\s\")]),\n        _vm._v(\"等同于\"),\n        _c(\"code\", [_vm._v(\"[\\\\r\\\\n\\\\t\\\\v\\\\f]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\S\")]),\n        _vm._v(\"等同于\"),\n        _c(\"code\", [_vm._v(\"[^\\\\r\\\\n\\\\t\\\\v\\\\f]\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"\\\\b\")]), _vm._v(\"匹配词的边界\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"\\\\B\")]),\n        _vm._v(\"匹配非词边界，即在词的内部\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"重复类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#重复类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 重复类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"a{n}\")]),\n      _vm._v(\"匹配 a 字符重复 n 次\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"量字符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#量字符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 量字符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"?\")]),\n        _vm._v(\"匹配 0 次或 1 次，等同于\"),\n        _c(\"code\", [_vm._v(\"{0, 1}\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"*\")]),\n        _vm._v(\"匹配 任意次，等同于\"),\n        _c(\"code\", [_vm._v(\"{0,}\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"+\")]),\n        _vm._v(\"匹配 1 次或多次，等同于\"),\n        _c(\"code\", [_vm._v(\"{1,}\")])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"贪婪模式\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#贪婪模式\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 贪婪模式\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\n          \"量字符的原则是最大可能匹配，知道下一个字符不匹配为止，我们称这种匹配模式为贪婪模式\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"如果想讲贪婪模式改为非贪婪模式，则在量字符后面加上\"),\n        _c(\"code\", [_vm._v(\"?\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"*?\")]),\n        _vm._v(\"表示某个模式出现 0 次或多次，采用非贪婪模式\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"+?\")]),\n        _vm._v(\"表示某个模式出现 1 次或者多次匹配，采用非贪婪模式\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"修饰符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#修饰符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 修饰符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"g\")]),\n        _vm._v(\"修饰符，全局匹配，主要用于搜索和替换\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"code\", [_vm._v(\"i\")]),\n        _vm._v(\"修饰符，忽略大小写进行匹配\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"code\", [_vm._v(\"m\")]), _vm._v(\"修饰符，多行匹配模式\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"组匹配\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#组匹配\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 组匹配\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\n          \"正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"使用组匹配的时候，不宜使用\"),\n        _c(\"code\", [_vm._v(\"g\")]),\n        _vm._v(\"修饰符，否则\"),\n        _c(\"code\", [_vm._v(\"match()\")]),\n        _vm._v(\"方法不回获取分组的内容，可以使用循环配合\"),\n        _c(\"code\", [_vm._v(\"RegExp.prototype.exec()\")]),\n        _vm._v(\"获取每一轮的组捕获\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _vm._v(\"正则表达式内部可以使用\"),\n        _c(\"code\", [_vm._v(\"\\\\1\")]),\n        _vm._v(\",\"),\n        _c(\"code\", [_vm._v(\"、2\")]),\n        _vm._v(\"，来获取括号匹配的内容，\"),\n        _c(\"code\", [_vm._v(\"\\\\1\")]),\n        _vm._v(\"表示获取第一个括号匹配的内容\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"非组捕获\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#非组捕获\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 非组捕获\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"(?:x)\")]),\n      _vm._v(\"称为非组捕获，表示不返回该组捕获的内容\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"var\")]),\n          _vm._v(\" m \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'abc'\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"match\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token regex\" } }, [\n            _vm._v(\"/(?:.)b(.)/\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\nm \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v('// [\"abc\", \"c\"];')\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"先行断言\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#先行断言\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 先行断言\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"x(?=y)\")]),\n      _vm._v(\"称为先行断言，\"),\n      _c(\"code\", [_vm._v(\"x\")]),\n      _vm._v(\"只有在\"),\n      _c(\"code\", [_vm._v(\"y\")]),\n      _vm._v(\"前面才匹配，\"),\n      _c(\"code\", [_vm._v(\"y\")]),\n      _vm._v(\"不计入匹配结果\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"var\")]),\n          _vm._v(\" m \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'xy'\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"match\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token regex\" } }, [_vm._v(\"/x(?:y)/\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\nm \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// ['x']\")\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"先行否定断言\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#先行否定断言\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 先行否定断言\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"x(?!y)\")]),\n      _vm._v(\"称为先行否定断言，只有不再\"),\n      _c(\"code\", [_vm._v(\"y\")]),\n      _vm._v(\"前面的\"),\n      _c(\"code\", [_vm._v(\"x\")]),\n      _vm._v(\"才匹配，\"),\n      _c(\"code\", [_vm._v(\"y\")]),\n      _vm._v(\"不计入匹配结果\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"var\")]),\n          _vm._v(\" m \"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token string\" } }, [\n            _vm._v(\"'abcdca'\")\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"match\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token regex\" } }, [_vm._v(\"/c(?!a)/\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\";\")]),\n          _vm._v(\"\\nm \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// ['c']\")\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}