{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/symbol.md?vue&type=template&id=7c3f0ff3&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/symbol.md","mtime":1537944817436},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"symbol-2\"><a class=\"header-anchor\" href=\"#symbol-2\" aria-hidden=\"true\">#</a> Symbol(2)</h1>\n<ul>\n<li>JavaScript 第七种数据类型，表示独一无二的值</li>\n<li>Symbol 值通过<code>Symbol函数</code>生成，对象的属性可以是字符串类型，也可以是 Symbol 类型</li>\n<li>调用<code>Symbol函数</code>不能使用<code>new</code>命令，接受一个字符串作为函数的参数，主要是对 Symbol 值的描述，在控制台显示</li>\n<li>Symbol 值不能参与运算</li>\n<li>Symbol 可以转化为布尔值，但是不能转化为数值</li>\n<li>Symbol 不是私有属性</li>\n</ul>\n<h2 id=\"作为属性名的-symbol\"><a class=\"header-anchor\" href=\"#作为属性名的-symbol\" aria-hidden=\"true\">#</a> 作为属性名的 Symbol</h2>\n<ul>\n<li>每个<code>Symbol</code>值都是唯一的，意味着<code>Symbol</code>可以作为标识符</li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> mySymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//第一种写法</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//第二种写法</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//第三种写法</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> mySymbol<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>Symbol</code>作为属性名时，不能用点运算符</li>\n</ul>\n<h2 id=\"实例：消除魔术字符串\"><a class=\"header-anchor\" href=\"#实例：消除魔术字符串\" aria-hidden=\"true\">#</a> 实例：消除魔术字符串</h2>\n<blockquote>\n<p>魔术字符串：在代码中多次出现，与代码形成强耦合的某一具体的字符串或值。</p>\n</blockquote>\n<p>在代码编写过程中，尽量用<code>Symbol</code>值来代替魔术字符串</p>\n<h2 id=\"属性名的遍历\"><a class=\"header-anchor\" href=\"#属性名的遍历\" aria-hidden=\"true\">#</a> 属性名的遍历</h2>\n<ul>\n<li>通过<code>Object.getOwnPropertySymbols</code>和<code>Reflect.ownKeys()</code>可以获取对象的<code>Symbol</code>属性</li>\n<li>可以利用<code>Symbol</code>属性的特性可以定义一些非私有，但又只希望用于内部的方法</li>\n</ul>\n<h2 id=\"symbol-for-symbol-keyfor\"><a class=\"header-anchor\" href=\"#symbol-for-symbol-keyfor\" aria-hidden=\"true\">#</a> Symbol.for(), Symbol.keyFor()</h2>\n<ul>\n<li>可以通过<code>Symbol.for()</code>方法定义相同的<code>Symbol</code>值，以相同<code>key</code>生成的<code>Symbol</code>值为同一个<code>Symbol</code>值</li>\n<li><code>Symbol.keyFor()</code>，参数为一个<code>Symbol</code>值，返回一个已经登记<code>Symbol</code>值的<code>key</code>，简单来说，利用<code>Symbol()</code>生成的值，<code>key</code>都不会相同</li>\n</ul>\n<h2 id=\"内置的-symbol-值\"><a class=\"header-anchor\" href=\"#内置的-symbol-值\" aria-hidden=\"true\">#</a> 内置的 Symbol 值</h2>\n</div>\n",null]}