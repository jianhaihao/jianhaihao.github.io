{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/this.md?vue&type=template&id=5849ec41&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/this.md","mtime":1537933948863},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"this-关键字\"><a class=\"header-anchor\" href=\"#this-关键字\" aria-hidden=\"true\">#</a> this 关键字</h1>\n<p>JavaScript 里面的<code>this</code>指向当前函数运行环境所处的对象</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span>\n  getName<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"jack\"</span>\n\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'rose'</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"rose\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>obj.getName()</code>运行环境在<code>obj</code>对象里面，<code>f()</code>的运行环境在全局对象里面，所以返回不同的结果</p>\n<h2 id=\"使用场合\"><a class=\"header-anchor\" href=\"#使用场合\" aria-hidden=\"true\">#</a> 使用场合</h2>\n<h3 id=\"全局环境\"><a class=\"header-anchor\" href=\"#全局环境\" aria-hidden=\"true\">#</a> 全局环境</h3>\n<p>全局环境下使用<code>this</code>，<code>this</code>指向的是<code>window</code>，下面两种情况下的<code>this</code>都指向<code>window</code></p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window\n<span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"构造函数\"><a class=\"header-anchor\" href=\"#构造函数\" aria-hidden=\"true\">#</a> 构造函数</h3>\n<p>构造函数里的<code>this</code>指向实例对象</p>\n<h3 id=\"对象的方法\"><a class=\"header-anchor\" href=\"#对象的方法\" aria-hidden=\"true\">#</a> 对象的方法</h3>\n<p>对象方法里面的<code>this</code>指向该方法运行时所处的环境，参考本文开始的例子</p>\n<h2 id=\"注意事项\"><a class=\"header-anchor\" href=\"#注意事项\" aria-hidden=\"true\">#</a> 注意事项</h2>\n<h3 id=\"避免多层使用-this\"><a class=\"header-anchor\" href=\"#避免多层使用-this\" aria-hidden=\"true\">#</a> 避免多层使用 this</h3>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n  f1<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 1</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>f1 的<code>this</code>指向<code>obj</code>，f2 的<code>this</code>指向<code>window</code></p>\n<h3 id=\"避免在回调函数中使用-this\"><a class=\"header-anchor\" href=\"#避免在回调函数中使用-this\" aria-hidden=\"true\">#</a> 避免在回调函数中使用 this</h3>\n<p>回调函数中的<code>this</code>的指向往往已经改变，请不要使用</p>\n<h3 id=\"避免在数组的处理方法中使用-this\"><a class=\"header-anchor\" href=\"#避免在数组的处理方法中使用-this\" aria-hidden=\"true\">#</a> 避免在数组的处理方法中使用 this</h3>\n<p>数组中例如<code>forEach()</code>、<code>map()</code>、<code>filter()</code>等等这些方法处理方法里面的<code>this</code>普遍情况下是指向全局对象，可以使用第二个参数来指定处理方法里面的<code>this</code>的指向</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  flag<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  f<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"绑定-this-的方法\"><a class=\"header-anchor\" href=\"#绑定-this-的方法\" aria-hidden=\"true\">#</a> 绑定 this 的方法</h2>\n<p>可以通过<code>call()</code>、<code>apply()</code>、<code>bind()</code>三个方法来改变<code>this</code>的指向</p>\n<h3 id=\"function-prototype-call\"><a class=\"header-anchor\" href=\"#function-prototype-call\" aria-hidden=\"true\">#</a> Function.prototype.call()</h3>\n<p><code>Function.prototype.call()</code>方法第一个参数是函数执行内部<code>this</code>的指向，也就是函数执行的作用域，后面可以传一个可变参数，作为函数的参数</p>\n<p>不传参数，内部<code>this</code>默认指向全局对象</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  n<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nf<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 2</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"function-prototype-apply\"><a class=\"header-anchor\" href=\"#function-prototype-apply\" aria-hidden=\"true\">#</a> Function.prototype.apply()</h3>\n<p>与<code>Function.prototype.call()</code>一致，只是传递给函数调用的参数用数组传递</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"function-prototype-bind\"><a class=\"header-anchor\" href=\"#function-prototype-bind\" aria-hidden=\"true\">#</a> Function.prototype.bind()</h3>\n<p><code>Function.prototype.bind()</code>方法用于将一个方法内部<code>this</code>的指向绑定到某个对象，返回一个新的函数，这样就可以安全的将一个方法赋值给其他变量</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span>\n  getName<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"jack\"</span>\n\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"jack\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这个例子与第一个例子形成对比，将<code>obj</code>的<code>getName</code>方法赋值给<code>f</code>变量的时候，将该方法执行时内部<code>this</code>的指向固定为<code>obj</code>对象，调用<code>f</code>方法的时候能正确的返回想要的结果</p>\n</div>\n",null]}