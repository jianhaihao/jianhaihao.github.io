{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/console.md?vue&type=template&id=306f1140&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/console.md","mtime":1537926977706},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"console\"><a class=\"header-anchor\" href=\"#console\" aria-hidden=\"true\">#</a> console</h1>\n<blockquote>\n<p>提供一个简单的控制台,类似于 Web 浏览器提供的 JavaScript 控制台</p>\n</blockquote>\n<p>包含两个组件</p>\n<ul>\n<li>Console 类,包含<code>console.log()</code>、<code>console.error()</code>、<code>console.warn()</code>等方法,可以被写入任何的 Node 流</li>\n<li>全局的<code>console</code>实例,可被用于写入到<code>process.stdout</code>和<code>process.stderr</code></li>\n</ul>\n<h2 id=\"console-类\"><a class=\"header-anchor\" href=\"#console-类\" aria-hidden=\"true\">#</a> Console 类</h2>\n<p>可通过 Console 类创建一个简单的可配置输出流的记录器,可通过<code>require('console').Console</code>或者<code>console.Console</code>使用</p>\n<p><strong>new Console(stdout[,stderr[,ignoreErrors]])</strong></p>\n<p><strong>new Console(options)</strong></p>\n<ul>\n<li><code>options</code>\n<ul>\n<li><code>stdout</code>正常输出流</li>\n<li><code>stderr</code>错误和警告输出流,不提供则使用<code>stdout</code></li>\n<li><code>ignoreErrors</code>是否忽略错误输出流</li>\n<li><code>colorMode</code>输出的颜色模式</li>\n</ul>\n</li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./stdout.log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> errorOutput <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./stderr.log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> stdout<span class=\"token punctuation\">:</span> output<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">:</span> errorOutput <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count: %d'</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// count: 5</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>全局的<code>console</code>是一个特殊的<code>Console</code>实例,它的输出流会被送往<code>process.stdout</code>和<code>process.stderr</code>,等价于</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  stdout<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n  stderr<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>console.clear()</strong></p>\n<p>清除当前 TTY 的输出</p>\n<p><strong>console.log()</strong></p>\n<p>打印到<code>stdout</code>,并带上换行符</p>\n<p><strong>console.info()</strong></p>\n<p><code>console.log()</code>的别名</p>\n</div>\n",null]}