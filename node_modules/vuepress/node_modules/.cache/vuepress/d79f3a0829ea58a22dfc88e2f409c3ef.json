{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/datatype.md?vue&type=template&id=d6edcf2c&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/datatype.md","mtime":1537944817428},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"数据类型\\\"><a href=\\\"#数据类型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数据类型</h1> <ul><li>Boolean</li> <li>String</li> <li>Number</li> <li>null, undefined</li> <li>Object</li> <li>Function</li> <li>Array</li> <li>Symbol</li> <li>BigInt</li></ul> <h2 id=\\\"boolean\\\"><a href=\\\"#boolean\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Boolean</h2> <p><code>true</code>表示“真”，<code>false</code>表示假</p> <p>下列运算符会返回布尔值</p> <ul><li>两元逻辑运算符<code>&amp;&amp;</code>,<code>||</code></li> <li>前置逻辑运算符<code>!</code></li> <li>相等运算符<code>==</code>,<code>!=</code>,<code>===</code>,<code>!===</code></li> <li>比较运算符<code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code></li></ul> <p>下列值在 JavaScript 中做真假运算时会自动转换为<code>false</code></p> <ul><li><code>undefined</code></li> <li><code>null</code></li> <li><code>''</code>或者<code>&quot;&quot;</code></li> <li><code>0</code></li> <li><code>NaN</code></li> <li><code>false</code></li></ul> <h2 id=\\\"string\\\"><a href=\\\"#string\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> String</h2> <ul><li>可以使用单引号<code>''</code>或者双引号<code>&quot;&quot;</code>表示一个字符串，但是建议使用单引号</li> <li>字符串本身是一个字符数组，可以通过下标访问字符串的里的每一个字符</li> <li>有一个<code>length</code>属性表示字符串的长度</li> <li><code>btoa()</code>任意值转为 Base64 编码</li> <li><code>atob()</code>还原 Base64 编码</li></ul> <h2 id=\\\"number\\\"><a href=\\\"#number\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Number</h2> <ul><li>JavaScript 所有数值都是利用 64 位浮点数形式存储，第 0 位为符号位，第 1 位到第 11 位为指数位，第 12 位到第 63 位为小数部分，<code>(2^-1023 ~ 2^1024)</code></li></ul> <p><strong>特殊数值</strong></p> <ul><li><code>NaN</code>表示一个非数值的值</li> <li><code>Infinity</code>表示无穷大，超出 JavaScript 所表示的范围</li></ul> <p><strong>相关全局方法</strong></p> <ul><li><code>isNaN()</code>判断一个变量是不是<code>NaN</code></li> <li><code>parseInt()</code>将字符串转化为整数类型，删掉前导空格和前导 0 ，遇到第一个不是数字的字符结束</li> <li><code>parseFloat()</code>将字符串转化为浮点类型</li> <li><code>isFinite()</code>判断便是是否为正常的数值</li></ul> <h2 id=\\\"null-undefined\\\"><a href=\\\"#null-undefined\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> null,undefined</h2> <p>没什么特别大的区别，在实际开发过程中当作空值处理</p> <h2 id=\\\"object\\\"><a href=\\\"#object\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object</h2> <ul><li>“键值对”的集合，所有键名都是字符串，值可以是任意的 JavaScript 数据类型</li> <li>可以使用点运算符或者方括号运算符进行取值，数值类型键名必须以方括号运算符取值</li></ul> <p><strong>属性的删除</strong></p> <p>可以通过<code>delete</code>命令删除对象的属性，删除成功后返回<code>true</code></p> <p><strong>for...in</strong></p> <p>可以通过<code>for...in</code>来遍历对象，下面是一个判断一个对象是否为空对象的例子</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isEmptyObject</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"array\\\"><a href=\\\"#array\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Array</h2> <ul><li>特殊类型的对象，键名是自增长的数值</li> <li><code>length</code>属性表示数组的长度</li></ul> <h2 id=\\\"function\\\"><a href=\\\"#function\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Function</h2> <ul><li>特殊类型的对象</li> <li>是一个可以执行的方法，同时可以是一个数据类型</li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}