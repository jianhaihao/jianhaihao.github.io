{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\data-structure\\stack.md?vue&type=template&id=2823d575&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\data-structure\\stack.md","mtime":1553174919245},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552483045256},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552483045254},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552483045520}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"栈\\\"><a href=\\\"#栈\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 栈</h1> <blockquote><p>栈也是一种线性结构\\n相比数组，栈对应的操作是数组的子集\\n只能从一端添加元素，也只能从一端取出元素，这一端称为栈顶\\n栈是一种先进后出的数据结构，Last In First Out (LIFO)</p></blockquote> <p>栈的应用：</p> <blockquote><p>undo 操作 - 编辑器\\n系统调用栈 - 操作系统\\n括号匹配 - 编译器</p></blockquote> <h2 id=\\\"栈的复杂度分析\\\"><a href=\\\"#栈的复杂度分析\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 栈的复杂度分析</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"ArrayStack\"),_c('E')],2),_vm._ssrNode(\" <blockquote><ul><li>void push(E)     O(1) 均摊</li> <li>E pop()          O(1) 均摊</li> <li>E peek()         O(1)</li> <li>int getSize()    O(1)</li> <li>boolean isEmpty  O(1)</li></ul></blockquote> <blockquote><p>栈顶元素反映了在嵌套的层次关系中，最近的需要匹配的元素</p></blockquote>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}