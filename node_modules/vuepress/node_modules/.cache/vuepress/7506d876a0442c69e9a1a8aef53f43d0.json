{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/css-operator.md?vue&type=template&id=69be4485&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/css-operator.md","mtime":1537926977689},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"css-操作\\\"><a href=\\\"#css-操作\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 操作</h1> <ul><li>CSS 负责页面的视觉效果</li> <li>JavaScript 负责用户的行为互动</li></ul> <h2 id=\\\"html-元素的-style-属性\\\"><a href=\\\"#html-元素的-style-属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> HTML 元素的 style 属性</h2> <p>通过 HTML 元素操作属性的方法可以直接读写 style 属性</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'style'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'background-color: #fff;'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>HTML 元素的 style 属性不仅可以当作一个字符串进行读写，还是一个对象，实现了 CSSStyleDeclaration 接口，可以通过 css 键名来读写属性，例如<code>div.style.fontSize = '14px'</code></p> <h2 id=\\\"cssstyledelaration-接口\\\"><a href=\\\"#cssstyledelaration-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSStyleDelaration 接口</h2> <p>CSSStyleDeclaration 接口用来操作元素的样式，下面三个地方实现了这个接口</p> <ul><li>元素节点的<code>style</code>属性</li> <li><code>CSSStyle</code>实例的<code>style</code>属性</li> <li><code>window.getComputedStyle()</code>的返回值，参数为元素节点</li></ul> <p>CSSStyleDeclaration 接口可以直接读写 css 的样式属性，属性和 css 规则一一对应，</p> <ul><li>将横杠从 css 属性名中移除，将横杠后的第一个字母大写</li> <li>如果属性为 JavaScript 保留字规则名之前需加上<code>css</code>，例如<code>cssFloat</code></li> <li>属性值都是字符串，设置是必须包括单位</li> <li><code>Element.style</code>只包括行内样式，通过样式表或者继承的样式，无法获得，需通过<code>window.getComputedStyle()</code>方法获得所有 css 样式</li></ul> <h3 id=\\\"cssstyledeclaration-实例属性\\\"><a href=\\\"#cssstyledeclaration-实例属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSStyleDeclaration 实例属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>CSSStyleDeclaration.cssText</td> <td>用来读写当前规则的所有样式声明文本，是一个字符串</td></tr> <tr><td>CSSStyleDeclaration.length</td> <td>返回一个整数值，表示当前规则含有多少条样式声明</td></tr> <tr><td>CSSStyleDeclaration.parentRule</td> <td>返回当前规则属于哪一个实例块（ CSSRule 实例），如果不存在所属的实例块，返回<code>null</code>只读</td></tr></tbody></table> <h3 id=\\\"cssstyledeclaration-实例方法\\\"><a href=\\\"#cssstyledeclaration-实例方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSStyleDeclaration 实例方法</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>CSSStyleDeclaration.getPropertyPriority()</td> <td>接受 css 样式的属性名作为参数，表示该样式又没有设置<code>important</code>属性，有则返回<code>important</code>，没有返回空字符串</td></tr> <tr><td>CSSStyleDeclaration.getPropertyValue()</td> <td>接受 css 样式的属性名作为参数，返回该属性的属性值</td></tr> <tr><td>CSSStyleDeclaration.item()</td> <td>接受一个整数作为参数，返回第 n 个位置 css 属性的属性值</td></tr> <tr><td>CSSStyleDeclaration.removeProperty()</td> <td>移除某个属性，返回被移除的属性的属性值</td></tr> <tr><td>CSSStyleDeclaration.setProperty()</td> <td>设置某个属性的属性值，第一个参数是属性名，第二个参数是属性值，第三个参数是优先级</td></tr></tbody></table> <h2 id=\\\"css-模块的侦测\\\"><a href=\\\"#css-模块的侦测\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 模块的侦测</h2> <p>判断浏览器是否支持某个 css 属性</p> <ul><li>typeof Element.style.propertyName 的值为<code>string</code>，表示支持，如果不支持，会返回<code>undefined</code></li></ul> <h2 id=\\\"css-对象\\\"><a href=\\\"#css-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 对象</h2> <p>浏览器原生提供 CSS 对象，为 JavaScript 提供方法操作 CSS，目前，该对象有两个静态方法</p> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>CSS.escape()</td> <td>转义 css 选择器里面的特殊字符，比如元素节点的<code>id</code>属性里面带有<code>#</code>字符</td></tr> <tr><td>CSS.supports()</td> <td>返回一个布尔值，表示当前环境是否支持某一条 CSS 规则，第一个参数是属性名，第二个参数为属性值</td></tr></tbody></table> <h2 id=\\\"window-getcomputedstyle\\\"><a href=\\\"#window-getcomputedstyle\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Window.getComputedStyle()</h2> <ul><li>接受一个元素节点作为第一哥参数，返回元素经过浏览器计算后的到的最终样式规则，也就是各种 css 叠加后的结果</li> <li>可以传入第二个参数，表示当前元素的伪元素，比如<code>:before</code>,<code>:after</code>,<code>:first-line</code>,<code>first-letter</code></li> <li>CSSStyleDelaration 实例返回的 css 值都是绝对单位，比如，长度是像素单位，返回值包括<code>px</code>后缀，颜色是<code>rgba(#,#,#,#)</code></li> <li>该方法返回的 CSSStyledeclaration 实例没有<code>cssText</code>属性，返回<code>undefined</code></li></ul> <h2 id=\\\"css-伪元素\\\"><a href=\\\"#css-伪元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 伪元素</h2> <ul><li>CSS 伪元素是通过 css 向 DOM 添加的元素，主要是通过<code>:before</code>和<code>:after</code>选择器生成，内容通过<code>content</code>指定</li> <li>无法通过元素的<code>style</code>属性获取伪元素，只能通过<code>window.getComputedStyle()</code>方法传入第二个伪元素选择器来获取元素的伪元素的属性</li></ul> <h2 id=\\\"stylesheet-接口\\\"><a href=\\\"#stylesheet-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> StyleSheet 接口</h2> <ul><li><code>StyleSheet</code>接口表示一张网页的样式表，包括通过<code>&lt;link&gt;</code>加载的样式表和<code>&lt;style&gt;</code>内嵌的样式表</li> <li><code>document.styleSheets</code> 属性返回整个页面所有的样式表，返回一个<code>array-like-obj</code>，成员是每一个<code>StyleSheets</code>实例</li> <li>如果是<code>&lt;style&gt;</code>引入的内嵌样式，可以通过元素的<code>sheet</code>属性来获取<code>StyleSheets</code>接口</li> <li>CSSStyleSheet 接口继承了 StyleSheet 接口的属性</li></ul> <h3 id=\\\"实例属性\\\"><a href=\\\"#实例属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>StyleSheet.disabled</td> <td>设置样式表的禁用状态</td></tr> <tr><td>StyleSheet.href</td> <td>返回样式表的网址，如果是内嵌样式，返回<code>null</code>，只读</td></tr> <tr><td>StyleSheet.title</td> <td>返回样式表的<code>title</code>属性</td></tr> <tr><td>StyleSheet.type</td> <td>返回样式表的类型，通常是<code>text/css</code></td></tr> <tr><td>StyleSheet.parentStyleSheet</td> <td>CSS 的<code>@import</code>命令允许在样式表中加载其他样式表，返回包含当前样式表的样式表</td></tr> <tr><td>StyleSheet.media</td> <td>返回一个类似数组的对象（<code>MediaList</code>实例），成员是表示适用媒介的字符串，只读 <br> - 打印：<code>print</code> <br> - 屏幕：<code>screen</code><br> - 手持设备：<code>handheld</code> <br> - 所有：<code>all</code><br><code>MediaList</code> 实例的<code>appendMedia()</code>方法用于增加媒介，<code>deleteMedia()</code>方法用于删除媒介</td></tr> <tr><td>StyleSheet.ownerNode</td> <td>返回<code>StyleSheet</code>实例对象所在的 DOM 节点，通常是<code>&lt;style&gt;</code>或者<code>&lt;link&gt;</code></td></tr> <tr><td>CSSStyleSheet.cssRules</td> <td>指向一个<code>CSSRuleList</code>实例，里面的每个成员都是当前的一条 CSS 规则 <br> - 使用该规则的<code>cssText</code>属性，可以的到当前 CSS 规则对应的字符串表达形式 <br> - 使用改规则的<code>style</code>属性，指向一个对象，用来读写具体的 CSS 命令</td></tr> <tr><td>CSSStyleSheet.ownerRule</td> <td>有些样式表是通过<code>@import</code>引入的，他得<code>ownerRule</code>属性会返回一个<code>CSSRule</code>实例，代表那行<code>@import</code> 规则，如果当前样式表不是通过<code>@import</code>引入的，则返回<code>null</code></td></tr></tbody></table> <h3 id=\\\"实例方法\\\"><a href=\\\"#实例方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例方法</h3> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>CSSStyleSheet.insertRule()</td> <td>插入一条新的 CSS 规则，接受两个参数 <br> - 第一个参数是表示 CSS 规则的字符串，只能有一条规则，否则报错 <br> - 第二个参数是插入的位置，默认为 0 <br> - 浏览器对于用脚本插入样式规则有许多的限制，最好使用<code>try...catch</code>块对错误进行捕获</td></tr> <tr><td>CSSStyleSheet.deleteRule()</td> <td>用来删除一条规则，参数为整数，表示规则在 CSSRules 实例里面的位置</td></tr></tbody></table> <h2 id=\\\"添加样式表\\\"><a href=\\\"#添加样式表\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 添加样式表</h2> <p>网页添加样式表有两种方式：</p> <ol><li>添加一张内置样式表，也就是添加一个<code>&lt;style&gt;</code>节点</li> <li>添加一个<code>&lt;link&gt;</code>节点，并设置该节点的<code>href</code>属性</li></ol> <h2 id=\\\"cssrulelist-接口\\\"><a href=\\\"#cssrulelist-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSRuleList 接口</h2> <p>CSSRuleList 接口是一个<code>array-like-obj</code>，成员是 CSSRule 实实例， 一般通过<code>CSSStyleSheet.cssRules</code>属性获得</p> <h3 id=\\\"cssrule-接口\\\"><a href=\\\"#cssrule-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSRule 接口</h3> <p>一条 CSS 规则包括两个部分： CSS 选择器和样式声明，JavaScript 通过<code>CSSRule</code>接口来读取一条 CSS 规则</p> <h3 id=\\\"cssrule-实例属性\\\"><a href=\\\"#cssrule-实例属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSRule 实例属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>CSSRule.cssText</td> <td>返回当前规则的文本，如果是<code>@import</code>加载的样式，则返回<code>@import'url'</code></td></tr> <tr><td>CSSRule.parentStyleSheet</td> <td>返回当前规则所在的样式表对象<code>CSSStyleSheet</code>接口实例</td></tr> <tr><td>CSSRule.parentRule</td> <td>返回包括当前规则的父规则，如果不存在父规则，则返回<code>null</code></td></tr> <tr><td>CSSRule.style</td> <td>返回规则的类型 <br> - 1 : 普通样式规则 <br> - 3 : @import 规则 <br> - 4 : @media 规则 <br> - 5 : font-face 规则</td></tr></tbody></table> <h3 id=\\\"cssstylerule-接口\\\"><a href=\\\"#cssstylerule-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSStyleRule 接口</h3> <p>如果 CSS 规则是一条普通的 CSS 样式规则（不包含特殊的 CSS 命令），那么除了实现 CSSRule 接口之外，还实现了 CSSStyleRule 接口，接口实例具有下面两个属性</p> <ul><li>CSSStyleRule.selectorText 返回当前规则的选择器字符串</li> <li>CSSStyleRule.style 返回一个 CSSStyleDeclaration 实例</li></ul> <h3 id=\\\"cssmediarule-接口\\\"><a href=\\\"#cssmediarule-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSSMediaRule 接口</h3> <p>如果 CSS 是<code>@media</code>代码块，除了实现了 CSSRule 接口，还实现了 CSSMediaRule 接口，有两个属性</p> <ul><li>CSSMediaRule.media 返回代表<code>@media</code>规则的一个对象（ MediaList 实例）</li> <li>CSSMediaRule.conditionText 返回<code>@media</code>规则的生效条件</li></ul> <h2 id=\\\"window-matchmedia\\\"><a href=\\\"#window-matchmedia\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> window.matchMedia()</h2> <p>用来将 CSS 的<code>MediaQuery</code>条件语句，转换成<code>MediaQueryList</code>实例</p> <h3 id=\\\"实例属性-2\\\"><a href=\\\"#实例属性-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例属性</h3> <table><thead><tr><th>attribute</th> <th>desc</th></tr></thead> <tbody><tr><td>MediaQueryList.media</td> <td>返回一个字符串，表示对应的 MediaQuery 条件语句</td></tr> <tr><td>MediaQueryList.matches</td> <td>返回一个布尔值，表示当前页面是否符合指定的 MediaQuery 条件语句</td></tr> <tr><td>MediaQueryList.onchange</td> <td>如果 MediaQuery 条件语句的适配环境发生变化，会出发<code>change</code>事件，MediaQueryList.onchange 用来指定<code>change</code>事件监听的函数，该函数的参数是<code>change</code>事件的对象（MediaQueryListEvent 实例），与 MediaQueryList 相似，也有<code>media</code>和<code>matches</code>属性</td></tr></tbody></table> <h3 id=\\\"实例方法-2\\\"><a href=\\\"#实例方法-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例方法</h3> <p>MediaQueryList.addListener() 和 MediaQueryList.removeListener() 用来为<code>change</code>事件添加或移除监听函数</p> <h2 id=\\\"参考\\\"><a href=\\\"#参考\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://wangdoc.com/javascript/dom/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"网道（WangDoc.com）是一个文档网站，提供互联网开发文档\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}