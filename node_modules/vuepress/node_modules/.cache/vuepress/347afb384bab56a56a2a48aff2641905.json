{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/events.md?vue&type=template&id=f4127546&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/events.md","mtime":1537926977706},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"events-事件\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#events-事件\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" events 事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"大多数 Node 核心的 API 都采用异步事件驱动的架构，一般通过触发命名事件来调用函数对象\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"所有触发事件的对象都是\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\"对象的实例。这些对象开放了一个\"),\n        _c(\"code\", [_vm._v(\"emitEvent.on()\")]),\n        _vm._v(\"函数，允许将一个或者多个回调函数绑定在会被对象触发的命名事件上\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"当事件触发时，所有绑定在该事件的函数都被同步的调用，监听器的返回值会被丢弃\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"一个绑定了监听器的\"),\n        _c(\"code\", [_vm._v(\"eventEmitter\")]),\n        _vm._v(\"实例，通过\"),\n        _c(\"code\", [_vm._v(\"eventEmitter.on()\")]),\n        _vm._v(\"来注册事件，\"),\n        _c(\"code\", [_vm._v(\"eventEmitter.emit()\")]),\n        _vm._v(\"来触发事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"一个标准的事件注册和触发\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"const\")\n            ]),\n            _vm._v(\" events \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"require\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'events'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"class\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"eventEmitter\")\n            ]),\n            _vm._v(\" extend events \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"const\")\n            ]),\n            _vm._v(\" myEmitter \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"eventEmiiter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\nmyEmitter\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"on\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'events'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"function\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"str\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n  console\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"log\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"str\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\nmyEmitter\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"emit\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'hello word'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\"// hello world\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"给监听器传入参数与-this\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#给监听器传入参数与-this\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 给监听器传入参数与 this\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"code\", [_vm._v(\"EventEmitter.emit()\")]),\n        _vm._v(\"方法允许将任意参数传递给监听器，监听器的\"),\n        _c(\"code\", [_vm._v(\"this\")]),\n        _vm._v(\"指向\"),\n        _c(\"code\", [_vm._v(\"eventEmit\")]),\n        _vm._v(\"对象\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"异步与同步\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#异步与同步\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 异步与同步\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"当一个事件触发时，\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\n          \"会按照监听器注册的时间顺序同步的被调用，如果想要被异步调用，可以将其放入\"\n        ),\n        _c(\"code\", [_vm._v(\"setImmediate()\")]),\n        _vm._v(\"或者\"),\n        _c(\"code\", [_vm._v(\"process.nextTick()\")]),\n        _vm._v(\"方法的回调函数中\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"const\")\n            ]),\n            _vm._v(\" myEmitter \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"MyEmitter\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\nmyEmitter\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"on\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'event'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"a\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" b\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=>\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n  \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"setImmediate\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=>\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n    console\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"log\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'这个是异步发生的'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n  \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\nmyEmitter\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"emit\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'event'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'a'\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [_vm._v(\"'b'\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"事件只处理一次\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#事件只处理一次\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 事件只处理一次\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"使用\"),\n        _c(\"code\", [_vm._v(\"EventEmitter.once()\")]),\n        _vm._v(\n          \"可以注册一个只能被调用一次的监听器，当被监听的事件触发的时候，监听器会被注销，然后再调用\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"错误处理\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#错误处理\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 错误处理\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"当\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\"中发生错误的时候，会触发一个\"),\n        _c(\"code\", [_vm._v(\"error\")]),\n        _vm._v(\"事件，所以始终为\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\"注册一个\"),\n        _c(\"code\", [_vm._v(\"error\")]),\n        _vm._v(\"监听器是一个最佳实践\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"eventemitter-类\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#eventemitter-类\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" EventEmitter 类\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"当为\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\"添加一个新监听的时候，会触发一个\"),\n        _c(\"code\", [_vm._v(\"newListener\")]),\n        _vm._v(\"事件，当监听器被移除的时候，会触发\"),\n        _c(\"code\", [_vm._v(\"removeListener\")]),\n        _vm._v(\"事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"newListener 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"code\", [_vm._v(\"EventListener\")]),\n        _vm._v(\"实例在将一个监听器添加到内部监听器数组之前会触发自身的\"),\n        _c(\"code\", [_vm._v(\"newListener\")]),\n        _vm._v(\"事件，事件名和回调函数会作为参数传入监听\"),\n        _c(\"code\", [_vm._v(\"newListener\")]),\n        _vm._v(\"事件的监听器中\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"removeListener 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"code\", [_vm._v(\"removeListener\")]),\n        _vm._v(\"事件在监听器被移除后触发\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"静态属性\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#静态属性\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 静态属性\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"EventEmitter.defaultMaxListeners\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"每个事件默认可以注册 10 个监听器\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\"单个\"),\n          _c(\"code\", [_vm._v(\"EventEmitter\")]),\n          _vm._v(\"实例可以通过\"),\n          _c(\"code\", [_vm._v(\"setMaxListener(n)\")]),\n          _vm._v(\"来改变\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"所有的\"),\n          _c(\"code\", [_vm._v(\"EventEmitter\")]),\n          _vm._v(\"实例每个事件最大监听器数量可以通过\"),\n          _c(\"code\", [_vm._v(\"EventEmitter.defaultMaxListeners\")]),\n          _vm._v(\"属性改变\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"实例方法\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#实例方法\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 实例方法\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"emitter.addLisnter(evnetName, listener)\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"code\", [_vm._v(\"EventEmiter.on()\")]), _vm._v(\"的别名\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.emit(eventName)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"按照监听器的注册顺序，同步调用每个注册到\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的监听器，如果有监听器返回\"),\n        _c(\"code\", [_vm._v(\"true\")]),\n        _vm._v(\"，没有放回\"),\n        _c(\"code\", [_vm._v(\"false\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.eventNames()\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回触发器已经注册监听器的事件名称的名称\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.getMaxListeners()\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\"实例一个事件最多可以注册的监听器数量\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.listenerCount(eventName)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回正在监听名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"监听器的数量\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.listeners(eventName)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的事件的监听器的数组副本\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.off(eventName)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"code\", [_vm._v(\"emitter.removeListener\")]),\n        _vm._v(\"的别名\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.on(eventName, listener)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"注册一个名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.once(eventName, listener)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"添加一个单次\"),\n        _c(\"code\", [_vm._v(\"listener\")]),\n        _vm._v(\"函数到名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的事件的监听器，下次触发\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"之后，该监听器会被移除，再调用\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"emitter.prependListener(eventName, listener)\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"添加\"),\n        _c(\"code\", [_vm._v(\"listener\")]),\n        _vm._v(\"函数到名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的事件监听器数组的开头，返回一个\"),\n        _c(\"code\", [_vm._v(\"EventEmitter\")]),\n        _vm._v(\"实例，可以链式调用\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [\n          _vm._v(\"emitter.prependOnceListener(eventName, listener)\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"添加一个单次\"),\n        _c(\"code\", [_vm._v(\"listener\")]),\n        _vm._v(\"监听器到名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的事件的监听器数组的开头，下次触发\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"之后，该监听器会被移除，再调用\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"emitter.removeAllListeners(eventName)\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"移除全部或指定名称的监听器\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"emitter.removeListener(eventName, listener)\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"从名为\"),\n        _c(\"code\", [_vm._v(\"eventName\")]),\n        _vm._v(\"的事件的监听器数组中移除\"),\n        _c(\"code\", [_vm._v(\"listener\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"emitter.setMaxListeners(n)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"设置一个事件的最大监听器数量\")])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}