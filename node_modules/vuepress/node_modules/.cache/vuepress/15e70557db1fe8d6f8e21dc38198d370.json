{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\linux-up\\performance.md?vue&type=template&id=3c4a0500&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\linux-up\\performance.md","mtime":1555059115929},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552483045256},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552483045254},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552483045520}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"性能测试\"><a class=\"header-anchor\" href=\"#性能测试\" aria-hidden=\"true\">#</a> 性能测试</h1>\n<h2 id=\"性能指标\"><a class=\"header-anchor\" href=\"#性能指标\" aria-hidden=\"true\">#</a> 性能指标</h2>\n<ol>\n<li>合理的平均响应时间<br>\n2/5/10原则</li>\n<li>系统资源类<br>\nCPU：CPU的占用率<br>\n内存：内存的占用率、换页数等<br>\nI/O：读写的请求数、读写量等<br>\n带宽：进站出站带宽暂用率</li>\n</ol>\n<h2 id=\"性能测试分类\"><a class=\"header-anchor\" href=\"#性能测试分类\" aria-hidden=\"true\">#</a> 性能测试分类</h2>\n<ol>\n<li>负载测试（Load Test）<br>\n为了验证系统设计符合<code>正常业务负载</code>情况下系统性能表现的测试</li>\n<li>压力测试（Stress Test）<br>\n为了验证系统在<code>极端负载</code>情况下的系统性能表现的测试</li>\n</ol>\n<h2 id=\"性能测试工具\"><a class=\"header-anchor\" href=\"#性能测试工具\" aria-hidden=\"true\">#</a> 性能测试工具</h2>\n<ol>\n<li>top<br>\n监控每一个进程的资源占用</li>\n<li>sysstat\n统计系统的各种资源占用情况</li>\n</ol>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\nyum list sysstat\n\n<span class=\"token comment\"># 如果未提示 Installed Packages，再执行以下命令</span>\nyum <span class=\"token function\">install</span> sysstat.x86_64\n\n<span class=\"token comment\"># 查询 crontab 配置 sysstat的信息</span>\n<span class=\"token function\">cat</span> /etc/cron.d/sysstat\n\n<span class=\"token comment\"># 日志路径</span>\n<span class=\"token function\">cd</span> /var/log/sa/\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"sysstat-常用命令\"><a class=\"header-anchor\" href=\"#sysstat-常用命令\" aria-hidden=\"true\">#</a> <code>sysstat</code> 常用命令</h3>\n<ol>\n<li><code>sar -q -f</code></li>\n</ol>\n<p>CPU任务数、CPU的任务繁重程度</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -q -f sa25\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>runq-sz：等待执行的任务队列长度，越长阻塞越严重</li>\n<li>plist-sz：队列中的任务总数</li>\n<li>ldavg-1： 1分钟内系统负载描述</li>\n<li>ldavg-5： 5分钟内系统负载描述</li>\n<li>ldavg-15： 15分钟内系统负载描述</li>\n<li>ldavg &gt; CPU总数时表示CPU压力大<br>\nldavg值 等于大于CPU核数时，说明CPU负载非常大了</li>\n<li>ldavg值 是通过执行中的任务和等待执行的任务的个数的平均值得到的</li>\n</ul>\n<ol start=\"2\">\n<li><code>sar -p -f</code></li>\n</ol>\n<p>CPU占用百分比、CPU占用率</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -p -f sa08\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>%user：用户占用百分比</li>\n<li>%system：系统占用百分比</li>\n<li>%nice：改过优先级的进程CPU占用率</li>\n<li>%iowait： 等待io占用百分比</li>\n<li>%idle：空闲的CPU占比</li>\n<li>%steal：管理程序为另一个虚拟进程提供服务而等待虚拟CPU的百分比</li>\n</ul>\n<p><code>%steal 等待CPU</code> vs <code>%iowait 等待磁盘读写</code></p>\n<blockquote>\n<p>PRI：进程优先权，代表这个进程可被执行的优先级，值越小优先级越高，越早被执行<br>\nNI：进程Nice值，进程可被执行的优先级的修正数值<br>\nPRI(new) = PRI(old) + nice</p>\n</blockquote>\n<ol start=\"3\">\n<li><code>sar -r -f</code></li>\n</ol>\n<p>内存：实际上内存占的百分比</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -r -f sa25\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>kbmemfree：空闲的内存</li>\n<li>kbmemused：已经使用的内存</li>\n<li>%memused： 内存使用率</li>\n<li>kbbuffers：文件磁盘块缓存</li>\n<li>kbcached：文件缓存</li>\n<li>kbcommit：是为了保证程序的正常运行需要的内存数目</li>\n<li>%commit：是为了保证程序的正常运行还需要的内存百分比</li>\n</ul>\n<blockquote>\n<p>buffer/cached 是为了提高文件读取的性能的磁盘缓存\nkbcached 是针对文件系统的，是文件的缓存\nkbbuffers 是针对磁盘块的缓存\n<code>%memused</code> + <code>%commit</code> &gt; 100% ，则说明内存不够，会导致内存频繁的换页，需要去动用虚拟内存</p>\n</blockquote>\n<ol start=\"4\">\n<li><code>sar -B -f</code></li>\n</ol>\n<p>内存：换页频繁程度</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -B -f sa25\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>pgpgin/s：表示每秒从磁盘或SWAP置换到内存的字节数（KB）</li>\n<li>pgpgout/s：表示每秒从内存置换到磁盘或SWAP的字节数（KB）</li>\n<li>fault/s： 每秒钟系统产生的缺页数，即主缺页与轻微缺页之和（major + minor）</li>\n<li>majflt/s：每秒钟产生的主缺页数，该值大于0时，代表肯定会发生换页</li>\n</ul>\n<blockquote>\n<p>pgpgin/s &amp;&amp; pgpgout/s 一旦发生，意味着就有磁盘的读写，io的性能就会受到很大的冲击</p>\n</blockquote>\n<ol start=\"5\">\n<li><code>sar -W -f</code></li>\n</ol>\n<p>内存：swap交换的频繁程度</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -W -f sa25\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>pswpin/s：表示每秒从SWAP置换到内存的字节数（KB）</li>\n<li>pswpout/s：表示每秒从内存置换到SWAP的字节数（KB）</li>\n</ul>\n<blockquote>\n<p>pswpin/s &amp;&amp; pswpout/s 越大，意味着负载越重</p>\n</blockquote>\n<ol start=\"6\">\n<li><code>sar -b -f</code></li>\n</ol>\n<p>IO监控</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -b -f sa25\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>tps：每秒钟物理设备的 I/O 请求次数</li>\n<li>rtps：每秒钟从物理设备读入的请求次数</li>\n<li>wtps：每秒钟向物理设备写入的请求次数</li>\n<li>bread/s：每秒钟从物理设备读入的数据量，单位为 块/s</li>\n<li>bwrtn/s：每秒钟从物理设备写入的数据量，单位为 块/s</li>\n</ul>\n<ol start=\"7\">\n<li><code>sar -d -f</code></li>\n</ol>\n<p>IO监控</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>sar -d -f sa25\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>tps：每秒钟物理设备的 I/O 请求次数</li>\n<li>rd_sec/s：每秒读扇区的次数</li>\n<li>wr_sec/s：每秒写扇区的次数</li>\n<li>%util: I/O请求占CPU的百分比，比例越大，说明越饱和</li>\n</ul>\n<h3 id=\"评估磁盘读写性能极限\"><a class=\"header-anchor\" href=\"#评估磁盘读写性能极限\" aria-hidden=\"true\">#</a> 评估磁盘读写性能极限</h3>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># 安装fio</span>\nyum list fio\nyum <span class=\"token function\">install</span> fio.x86_64\n\n<span class=\"token comment\"># 执行 fio命令</span>\nfio -filename<span class=\"token operator\">=</span>/tmp/test -direct<span class=\"token operator\">=</span>1 -iodepth 1 -thread -rw<span class=\"token operator\">=</span>randrw -ioengine<span class=\"token operator\">=</span>psync -bs<span class=\"token operator\">=</span>16k -size<span class=\"token operator\">=</span>2G -numjobs<span class=\"token operator\">=</span>10 -runtime<span class=\"token operator\">=</span>30 -group_reporting -name<span class=\"token operator\">=</span>mytest13\n\n<span class=\"token comment\"># 查看打印结果中的 iops 具体值</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}