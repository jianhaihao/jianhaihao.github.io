{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/dom.md?vue&type=template&id=6dfe3a3b&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/dom.md","mtime":1537926977690},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"dom\\\"><a href=\\\"#dom\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> DOM</h1> <blockquote><p>JavaScript 操作网页的接口，全称 Document Object Model(文档对象模型)，JavaScript 可以通过 DOM 接口操作网页，</p></blockquote> <h2 id=\\\"节点\\\"><a href=\\\"#节点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 节点</h2> <blockquote><p>DOM 的最小组成单位，有七种类型的节点</p></blockquote> <table><thead><tr><th>node</th> <th>desc</th></tr></thead> <tbody><tr><td>Document</td> <td>文档树的顶层节点</td></tr> <tr><td>DocumentType</td> <td><code>doctype</code>标签，比如<code>&lt;!DOCTYPE html&gt;</code></td></tr> <tr><td>Element</td> <td>网页的各种 HTML 标签</td></tr> <tr><td>Attribute</td> <td>标签的属性</td></tr> <tr><td>Text</td> <td>标签之间或者标签内部的文本</td></tr> <tr><td>Comment</td> <td>文档的注释</td></tr> <tr><td>DocumentFragment</td> <td>文档的片段</td></tr></tbody></table> <p>浏览器提供了一个原生的<code>Node</code>对象，上面的节点都继承了该对象，因此具有一些共同的属性和方法</p> <h2 id=\\\"节点树\\\"><a href=\\\"#节点树\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 节点树</h2> <ul><li>浏览器原生提供<code>document</code>对象，代表整个文档，文档的第一层只有一个<code>&lt;html&gt;</code>标签，作为文档的根结点(root node)，其他的 html 标签都作为它的子节点</li></ul> <p>出了根节点外，其他节点互相可以形成三种关系</p> <ol><li>父节点关系 (ParentNode): 上一级节点</li> <li>子节点关系 (ChildNodes): 下一级节点</li> <li>同级节点关系 （sibling）: 同级节点</li></ol> <p>DOM 提供操作接口，用来获取三种关系的节点，子节点包括<code>firstChild(第一个字节点)</code>,<code>lastChild(最后一个字节点)</code>,<code>nextSibling(下一个同级节点)</code>,<code>previousSibling(上一个同级节点)</code></p> <h2 id=\\\"node-接口\\\"><a href=\\\"#node-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node 接口</h2> <blockquote><p>所有的 DOM 节点对象都继承了 Node 接口</p></blockquote> <h3 id=\\\"属性\\\"><a href=\\\"#属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性</h3> <h4 id=\\\"node-prototype-nodetype\\\"><a href=\\\"#node-prototype-nodetype\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.nodeType</h4> <blockquote><p>返回一个整数值，表示节点的类型，Node 对象定义了一些常量表示</p></blockquote> <table><thead><tr><th>nodeType</th> <th>number</th> <th>constant</th></tr></thead> <tbody><tr><td>document</td> <td>9</td> <td>Node.DOCUMENT_NODE</td></tr> <tr><td>element</td> <td>1</td> <td>Node.ELEMENT_NODE</td></tr> <tr><td>attribute</td> <td>2</td> <td>Node.ATTRIBUTE_NODE</td></tr> <tr><td>text</td> <td>3</td> <td>Node.TEXT_NODE</td></tr> <tr><td>DocumentType</td> <td>10</td> <td>Node.DOCUMENT_TYPE_NODE</td></tr> <tr><td>Comment</td> <td>8</td> <td>Node.COMMENT_NODE</td></tr> <tr><td>DocuemntFragment</td> <td>11</td> <td>NODE.DOCUMENT_FRAGMENT_NODE</td></tr></tbody></table> <h4 id=\\\"node-prototype-nodename\\\"><a href=\\\"#node-prototype-nodename\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.nodeName</h4> <blockquote><p>返回节点的名称</p></blockquote> <table><thead><tr><th>nodeType</th> <th>return</th></tr></thead> <tbody><tr><td>document</td> <td><code>#document</code></td></tr> <tr><td>element</td> <td>大写的标签名</td></tr> <tr><td>attribute</td> <td>大写的属性名</td></tr> <tr><td>text</td> <td><code>#text</code></td></tr> <tr><td>DocumentType</td> <td>文档类型，例如<code>html</code></td></tr> <tr><td>Comment</td> <td>#comemnt</td></tr> <tr><td>DocuemntFragment</td> <td><code>#document-fragment</code></td></tr></tbody></table> <h4 id=\\\"node-prototype-nodevalue\\\"><a href=\\\"#node-prototype-nodevalue\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.nodeValue</h4> <blockquote><p>返回当前节点本身的文本值，只有 text 和 comment 节点才会有值返回，其他节点该属性返回结果为<code>null</code>，可读写</p></blockquote> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// &lt;div id=&quot;node&quot;&gt; text &lt;/div&gt;</span>\\n\\ndocuemnt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'node'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>nodeValue <span class=\\\"token comment\\\">// null</span>\\ndocuemnt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'node'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>firstChild<span class=\\\"token punctuation\\\">.</span>nodeValue <span class=\\\"token comment\\\">// text</span>\\n</code></pre></div><h4 id=\\\"node-prototype-textcontent\\\"><a href=\\\"#node-prototype-textcontent\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.textContent</h4> <blockquote><p>返回当前节点和所有子节点的所有文本内容，不包括 comment 节点，可读写</p></blockquote> <ul><li>document 和 documentType 类型的节点的 textContent 值为<code>null</code>，要读取整个文档，使用<code>document.documentElement.textContent</code></li></ul> <h4 id=\\\"node-prototype-baseuri\\\"><a href=\\\"#node-prototype-baseuri\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.baseURI</h4> <blockquote><p>返回一个当前网页绝对路径的 URI，只读</p></blockquote> <p>可以通过<code>&lt;base&gt;</code>标签改变当前网页的 baseURI 属性</p> <h4 id=\\\"node-prototype-ownerdocument\\\"><a href=\\\"#node-prototype-ownerdocument\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.ownerDocument</h4> <blockquote><p>返回当前网页顶层的 document 对象</p></blockquote> <h4 id=\\\"node-prototype-nextsibling\\\"><a href=\\\"#node-prototype-nextsibling\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.nextSibling</h4> <blockquote><p>返回紧跟在当前节点后面的节点，没有返回<code>null</code></p></blockquote> <ul><li>如果节点后面是一个空格，则返回一个内容为一个空格的文本节点</li> <li>如果节点后面是注释，则返回注释节点</li></ul> <h4 id=\\\"node-prototype-previoussibling\\\"><a href=\\\"#node-prototype-previoussibling\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.previousSibling</h4> <blockquote><p>同上，返回紧跟当前节点前面的节点</p></blockquote> <h4 id=\\\"node-prototype-parentnode\\\"><a href=\\\"#node-prototype-parentnode\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.parentNode</h4> <blockquote><p>返回当前节点的父节点，只可能是 document 节点，element 节点 documentFragment 节点</p></blockquote> <h4 id=\\\"node-prototype-parentelement\\\"><a href=\\\"#node-prototype-parentelement\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.parentElement</h4> <blockquote><p>返回当前节点的父元素节点，如果当前节点不是节点或者父节点不是元素节点，则返回<code>null</code></p></blockquote> <h4 id=\\\"node-prototype-firstchild-node-prototype-lastchild\\\"><a href=\\\"#node-prototype-firstchild-node-prototype-lastchild\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.firstChild, Node.prototype.lastChild</h4> <blockquote><p>返回当前节点的子节点，包括文本节点和注释节点，没有则返回<code>null</code></p></blockquote> <h4 id=\\\"node-prototype-childnodes\\\"><a href=\\\"#node-prototype-childnodes\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.childNodes</h4> <blockquote><p>返回一个类似数组的对象（<code>nodeList</code>集合），包括当前节点所有子节点集合，包括注释节点和文本节点</p></blockquote> <h4 id=\\\"node-prototype-isconented\\\"><a href=\\\"#node-prototype-isconented\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.isConented</h4> <blockquote><p>返回一个布尔值，表示该节点是否在文档中</p></blockquote> <h3 id=\\\"方法\\\"><a href=\\\"#方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 方法</h3> <h4 id=\\\"node-prototyoe-appendchild\\\"><a href=\\\"#node-prototyoe-appendchild\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototyoe.appendChild()</h4> <blockquote><p>接受一个节点对象作为参数，表示将该参数节点作为当前节点的最后一个子节点插入，返回插入的节点对象</p></blockquote> <h4 id=\\\"node-haschildnodes\\\"><a href=\\\"#node-haschildnodes\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.hasChildNodes()</h4> <blockquote><p>返回一个布尔值，表示当前节点是否有子节点</p></blockquote> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// 判断一个节点是否有子节点的三种方法</span>\\nnode<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasChildNodes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nnode<span class=\\\"token punctuation\\\">.</span>firstChild <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\nnode<span class=\\\"token punctuation\\\">.</span>ChildNodes <span class=\\\"token operator\\\">&amp;&amp;</span> node<span class=\\\"token punctuation\\\">.</span>ChildNodes<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"node-prototype-clonenode\\\"><a href=\\\"#node-prototype-clonenode\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.cloneNode()</h4> <blockquote><p>克隆一个节点，接受一个布尔值作为参数，表示是否克隆其子节点，返回克隆出来的新节点</p></blockquote> <ul><li>克隆一个节点会拷贝该节点的所有属性，但是会丧失<code>addEventListener</code>方法和<code>on-</code>属性，添加在这个节点上的事件回调属性</li> <li>该方法返回的节点对象不在文档中</li> <li>须修改返回节点对象的<code>id</code>属性和<code>name</code>属性，避免被插入文档之后，文档中出现多个具有相同<code>id</code>或者<code>name</code>属性的节点</li></ul> <h4 id=\\\"node-prototype-insertbefore\\\"><a href=\\\"#node-prototype-insertbefore\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.insertBefore()</h4> <blockquote><p>接受两个参数，第一个为待插入节点，第二个为父节点内部的一个子节点，表示将第一个节点插入第二个参数节点的前面</p></blockquote> <ul><li>如果第二个参数为<code>null</code>，则将节点插入节点的最后一个节点</li></ul> <h4 id=\\\"node-prototype-removechild\\\"><a href=\\\"#node-prototype-removechild\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.removeChild()</h4> <blockquote><p>接受节点的一个子节点作为参数，将子节点从该节点内部移除</p></blockquote> <h4 id=\\\"node-prototype-replacechild\\\"><a href=\\\"#node-prototype-replacechild\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.replaceChild()</h4> <blockquote><p>用一个新节点，替换当前节点的某一个子节点</p></blockquote> <h4 id=\\\"node-prototype-contains\\\"><a href=\\\"#node-prototype-contains\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.contains()</h4> <blockquote><p>返回一个布尔值，传入一个参数节点，表示该参数节点是否为当前节点或者为当前节点的子节点或者当前节点的后代节点</p></blockquote> <h4 id=\\\"node-prototype-comparedocumentposition\\\"><a href=\\\"#node-prototype-comparedocumentposition\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.compareDocumentPosition()</h4> <blockquote><p>用法与<code>contains()</code>一直，返回一个七个比特为的二进制值，表示参数节点与当前节点的关系</p></blockquote> <table><thead><tr><th>binary</th> <th>decimal</th> <th>meaning</th></tr></thead> <tbody><tr><td>0000000</td> <td>0</td> <td>两个节点相同</td></tr> <tr><td>0000001</td> <td>1</td> <td>两个节点不在同一个文档中</td></tr> <tr><td>0000010</td> <td>2</td> <td>参数节点在该节点的前面</td></tr> <tr><td>0000100</td> <td>4</td> <td>参数节点在该节点的后面</td></tr> <tr><td>0001000</td> <td>8</td> <td>参数节点包含该节点</td></tr> <tr><td>0010000</td> <td>16</td> <td>该节点包含参数节点</td></tr> <tr><td>0100000</td> <td>32</td> <td>浏览器内部使用</td></tr></tbody></table> <h4 id=\\\"node-prototype-isequalnode-node-prototype-issamenode\\\"><a href=\\\"#node-prototype-isequalnode-node-prototype-issamenode\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.isEqualNode(), Node.prototype.isSameNode()</h4> <p>*<code>isEqualNode()</code>判断两个节点是否相等，包括类型相等，属性相等，子节点相同\\n*<code>isSameNode()</code>判断两个节点是否为同一个节点</p> <h4 id=\\\"node-prototype-normallize\\\"><a href=\\\"#node-prototype-normallize\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> node.prototype.normallize()</h4> <blockquote><p>清理当前节点内部所有文本节点，去除内容为空的文本节点，将内容不为空的毗邻的文本节点合并成一个文本节点</p></blockquote> <h4 id=\\\"node-prototype-getrootnode\\\"><a href=\\\"#node-prototype-getrootnode\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.prototype.getRootNode()</h4> <blockquote><p>返回文档的根结点</p></blockquote> <h2 id=\\\"nodelist-接口，htmlcollection-接口\\\"><a href=\\\"#nodelist-接口，htmlcollection-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> NodeList 接口，HTMLCollection 接口</h2> <blockquote><p>容纳多个节点的数据结构</p></blockquote> <h3 id=\\\"nodelist-接口\\\"><a href=\\\"#nodelist-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> NodeList 接口</h3> <blockquote><p>一个类似数组的对象，包括多个 Node 节点</p></blockquote> <p>获得途径</p> <ul><li>Node.prototype.ChildNodes</li> <li>document.querySelectorAll(), document.getDocumentByTagName() 等节点搜索方法</li></ul> <p>属性</p> <ul><li>length</li></ul> <p>方法</p> <ul><li>forEach()</li> <li>item()</li> <li>keys(), value(), entries()</li></ul> <h3 id=\\\"htmlcollection-接口\\\"><a href=\\\"#htmlcollection-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> HTMLCollection 接口</h3> <blockquote><p>元素节点的集合，没有<code>forEach()</code>方法</p></blockquote> <p>获得途径：<code>document</code>对象上的集合属性</p> <ul><li>document.links</li> <li>document.images</li> <li>document.forms</li> <li>...</li></ul> <p>属性</p> <ul><li>length</li></ul> <p>方法</p> <ul><li>item()</li> <li>nameItem() 参数是一个字符串，查找<code>id</code>或<code>name</code>属性为参数字符串的元素节点</li></ul> <h2 id=\\\"parentnode接口，childnode接口\\\"><a href=\\\"#parentnode接口，childnode接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ParentNode接口，ChildNode接口</h2> <p>节点对象出了继承 Node 接口之外，还会继承其他接口</p> <ul><li>ParentNode 表示当前节点是一个父节点，提供一些处理子节点的方法</li> <li>ChildNode 表示当前节点是一个子节点</li></ul> <h3 id=\\\"parentnode-接口\\\"><a href=\\\"#parentnode-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ParentNode 接口</h3> <blockquote><p>如果当前节点是父节点，就会继承 ParentNode 接口</p></blockquote> <p>属性&amp;方法</p> <table><thead><tr><th>attribute&amp;method</th> <th>desc</th></tr></thead> <tbody><tr><td>ParentNode.prototype.children</td> <td>返回一个 HTMLCollection 实例，所有子元素节点集合，只读</td></tr> <tr><td>ParentNode.prototype.firstElementChild <br> ParentNode.prototype.lastElementChild</td> <td>返回当前节点的第一个元素节点 <br> 返回当前节点最后一个元素节点 <br> 没有则返回<code>null</code></td></tr> <tr><td>ParentNode.childElementCount</td> <td>返回子元素节点的个数 <br> 等同于 ParentNode.prototype.children.length</td></tr> <tr><td>ParentNode.prototype.append() <br> ParentNode.prototype.prepend()</td> <td>将参数节点作为最后一个子元素节点插入 <br> 将参数节点作为第一个元素节点插入 <br> 没有返回值</td></tr></tbody></table> <h3 id=\\\"childnode-接口\\\"><a href=\\\"#childnode-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ChildNode 接口</h3> <blockquote><p>如果一个节点有父节点，则该节点继承 ChildNode 接口</p></blockquote> <p>方法</p> <table><thead><tr><th>method</th> <th>desc</th></tr></thead> <tbody><tr><td>ChildNode.prototype.remove()</td> <td>从父节点移除该节点</td></tr> <tr><td>ChildNode.prototype.before() <br> ChildNode.prototype.after()</td> <td>在当前节点前面插入参数节点 <br> 在当前节点后面插入参数节点</td></tr> <tr><td>ChildNode.prototype.replacewith()</td> <td>用参数节点替换当前节点</td></tr></tbody></table> <h2 id=\\\"参考\\\"><a href=\\\"#参考\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://wangdoc.com/javascript/dom/general.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"https://wangdoc.com/javascript/dom/general.html\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}