{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/number.md?vue&type=template&id=ee4f4012&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/number.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"数值的扩展（3）\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数值的扩展（3）\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数值的扩展（3）\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"二进制和八进制表示法\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#二进制和八进制表示法\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 二进制和八进制表示法\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_vm._v(\"使用前缀0b(0B)表示二进制\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"使用前缀0o(0O)表示八进制\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"number-isfinite-number-isnan\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#number-isfinite-number-isnan\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Number.isFinite(), Number.isNaN()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"与全局的\"),\n            _c(\"code\", [_vm._v(\"isFinite()\")]),\n            _vm._v(\"和\"),\n            _c(\"code\", [_vm._v(\"isNaN()\")]),\n            _vm._v(\"相比，这两个方法只对数值做判断，数值之外参数一律返回 \"),\n            _c(\"code\", [_vm._v(\"false\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"全局的\"),\n            _c(\"code\", [_vm._v(\"isFinite()\")]),\n            _vm._v(\"和\"),\n            _c(\"code\", [_vm._v(\"isNaN()\")]),\n            _vm._v(\"方法是先调用\"),\n            _c(\"code\", [_vm._v(\"Number()\")]),\n            _vm._v(\"转化为数值再进行判断\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"number-parseint-number-parsefloat\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#number-parseint-number-parsefloat\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Number.parseInt(), Number.parseFloat()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"用法没有任何变化，\"),\n        _c(\"code\", [_vm._v(\"es6\")]),\n        _vm._v(\" 旨在减少全局性方法，将语言逐渐模块化\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"number-isinteger\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#number-isinteger\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Number.isInteger()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"判断一个数值是否为整数\")]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"number-epsilon\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#number-epsilon\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Number.EPSILON\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"常量，表示\"),\n        _c(\"code\", [_vm._v(\"1\")]),\n        _vm._v(\"与大于\"),\n        _c(\"code\", [_vm._v(\"1\")]),\n        _vm._v(\"的最小浮点数之间的差\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"number-issafeinteger\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#number-issafeinteger\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Number.isSafeInteger()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"判断数值是否在\"),\n        _c(\"code\", [_vm._v(\"Number.MAX_SAFE_INTEGER\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\"Number.MIN_SAFE_INTEGER\")]),\n        _vm._v(\"安全范围之间\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"math-对象的扩展\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#math-对象的扩展\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Math 对象的扩展\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.trunc()\")]),\n          _vm._v(\"去除一个数的小数部分，返回证书部分\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.sign()\")]),\n          _vm._v(\"判断一个数是正数、负数、还是零\"),\n          _c(\"code\", [_vm._v(\"+1\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"-1\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"+0\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"-0\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"NaN\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.cbrt()\")]),\n          _vm._v(\"计算一个数的立方根\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.clz32()\")]),\n          _vm._v(\"返回一个数的32位无符号整数形式有多少个前导0\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.imul()\")]),\n          _vm._v(\n            \"返回两个数以32位带符号整数形式相乘的结果，在进行大精度计算的时候保证可以得到正确的低位数值\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.fround()\")]),\n          _vm._v(\"返回一个数的32位单精度浮点数形式\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Math.hypot()\")]),\n          _vm._v(\"返回两个数的平方和的平方根\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"4个对数运算方法\"),\n          _c(\"code\", [_vm._v(\"Math.expm1()\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.log1p()\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.log10()\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.log2()\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"6个双曲函数方法\"),\n          _c(\"code\", [_vm._v(\"Math.sinh(x)\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.cosh(x)\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.tanh(x)\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.asinh(x)\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.acosh(x)\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Math.atanh(x)\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"指数运算符\"),\n          _c(\"code\", [_vm._v(\"**``2 ** 3 //8\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"a **= 2 //等同于 a = a * a\")])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}