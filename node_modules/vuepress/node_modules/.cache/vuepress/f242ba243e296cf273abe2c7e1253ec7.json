{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/event/event.md?vue&type=template&id=a190631a&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/event/event.md","mtime":1537933948861},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"event-对象\"><a class=\"header-anchor\" href=\"#event-对象\" aria-hidden=\"true\">#</a> Event 对象</h1>\n<ul>\n<li>事件发生之后，会产生一个<code>Event</code>对象，作为参数传递给监听函数。所有的事件都是这个对象的实例，或者说是继承了<code>Event.prototype</code>\n*<code>Event</code>对象是一个构造函数，可以通过<code>new</code>创建一个事件，接受两个参数，第一个是字符串<code>type</code>，表示事件名，第二个是对象，表示事件的配置，该对象有下面两个属性\n1.<code>bubbles</code>: 布尔值，默认<code>false</code>，表示事件是否冒泡\n2.<code>cancelable</code>: 布尔值，默认<code>false</code>，表示事件是否可以被取消，即能否用<code>Event.preventDefault()</code>取消这个事件</li>\n</ul>\n<h2 id=\"实例属性\"><a class=\"header-anchor\" href=\"#实例属性\" aria-hidden=\"true\">#</a> 实例属性</h2>\n<table>\n<thead>\n<tr>\n<th>attribute</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Event.bubbles </br> Event.eventPhase</td>\n<td>当前事件是否可以冒泡，只读 </br> 返回有四种可能 </br> - 0 事件未发生 </br> - 1 事件处于捕获阶段，从祖先向下传播的过程 </br> - 2 事件到达目标节点，即<code>Event.target</code>指向目标节点 <br> - 3 - 事件处于冒泡阶段，从目标节点向祖先反传播的过程</td>\n</tr>\n<tr>\n<td>Event.cancelable </br> Event.cancelbubble </br> Event.defaultPrevented</td>\n<td>事件是否可以取消，浏览器原生事件是可以取消的，只读 </br> 将<code>Event.cancelBubble</code>设置为<code>true</code>，等于执行了<code>Event.stoppropagation()</code>阻止事件的传播 </br> 事件是否执行过<code>preventDefault()</code>方法，只读</td>\n</tr>\n<tr>\n<td>Event.currentTarget </br> Event.target</td>\n<td>事件当前所处节点对象 </br> 事件的目标对象</td>\n</tr>\n<tr>\n<td>Event.type</td>\n<td>返回事件的名称</td>\n</tr>\n<tr>\n<td>Event.timeStamp</td>\n<td>返回事件发生距离浏览器加载网页完成的时间</td>\n</tr>\n<tr>\n<td>Event.isTrusted</td>\n<td>表示时间是否由用户真实行为产生的，比如点击产生的<code>click</code>事件，手动调用<code>click()</code>方法触发的事件该属性返回<code>false</code>，通过<code>new</code>创建出来的时间的该属性返回为<code>false</code></td>\n</tr>\n<tr>\n<td>Event.detail</td>\n<td>该属性只有浏览器的 UI 事件才具有，该属性返回一个数值，表示事件的某种信息，比如，对于点击事件，会返回 1, 2, 3 表示点击的次数，对于滚动事件，则返回滚轮滚动的距离</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实例方法\"><a class=\"header-anchor\" href=\"#实例方法\" aria-hidden=\"true\">#</a> 实例方法</h2>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Event.preventDefault()</td>\n<td>取消浏览器对当前事件的默认行为，如果事件的<code>cancelalbe</code>为<code>false</code>，调用该方法无效，不会阻止事件的传播</td>\n</tr>\n<tr>\n<td>Event.stopPropagation() </br> Event.stopImmediatePropagation()</td>\n<td>阻止事件的继续传播，不影响当前节点的其他监听函数 </br> 阻止事件的传播，当前节点的其他监听函数也不会执行</td>\n</tr>\n<tr>\n<td>Event.composedPath()</td>\n<td>返回一个数组，成员是事件在冒泡过程中一次经过的节点，一直到<code>Window</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考</h2>\n<p><a href=\"https://wangdoc.com/javascript/events/event.html\" target=\"_blank\" rel=\"noopener noreferrer\">网道（WangDoc.com）是一个文档网站，提供互联网开发文档<OutboundLink/></a></p>\n</div>\n",null]}