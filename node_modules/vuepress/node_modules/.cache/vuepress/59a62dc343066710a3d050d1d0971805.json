{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/string.md?vue&type=template&id=e92a0ec8&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/string.md","mtime":1537944817436},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"字符串的扩展-2\\\"><a href=\\\"#字符串的扩展-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串的扩展 (2)</h1> <h2 id=\\\"字符的-unicode-表示法\\\"><a href=\\\"#字符的-unicode-表示法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符的 unicode 表示法</h2> <p>JavaScript 利用<code>\\\\uxxxx</code>(UTF-16) 表示一个字符，<code>xxxx</code>表示 unicode 码点，一个字符包括两个字节，表示范围只能是<code>\\\\u0000</code>~<code>\\\\uFFFF</code>，如果超出<code>\\\\uFFFF</code>的范围， ES5 就利用双字符表示，也就是四个字节，比如 <code>\\\\uD842\\\\uDFB7</code></p> <p>ES6 则支持将大于四位的码点放入大括号，可以当成一个字符识别，比如 <code>\\\\u{20BB7}</code></p> <h2 id=\\\"charpointat\\\"><a href=\\\"#charpointat\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> charPointAt()</h2> <ul><li><p>因为扩展了字符的 unicode 表示法，所以字符串的<code>charAt()</code>和<code>charCodeAt()</code>方法会失真，在对码点大于<code>0xFFFF</code>的字符的时候，这两个方法会把它当作两个字符处理</p></li> <li><p>ES6 新增了<code>charPointAt()</code>方法，来正确识别<code>4</code>个字节储存的字符</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'𠮷a'</span><span class=\\\"token punctuation\\\">;</span>\\n\\ns<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">codePointAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 134071</span>\\ns<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">codePointAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 57271</span>\\n\\ns<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">codePointAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 97</span>\\n</code></pre></div></li></ul> <p>上面代码中，JavaScript 会把<code>𠮷a</code>视为三个字符，<code>charPointAt(0)</code> 正确识别了<code>𠮷</code>的码点，<code>charPointAt(1)</code> 则识别了<code>𠮷</code>字符后面两个字节的码点，<code>charPointAt(2)</code>则识别了<code>a</code>字符的码点</p> <ul><li>经过测试发现，上面的方法还是不正确的，表面上看在<code>𠮷a</code>中，<code>a</code> 字符在第二个位置，正确的位置序号应该是<code>1</code>，解决办法为使用 <code>for...of</code>循环，它可以正确识别 32 位的 UTF-16 字符</li> <li><code>charPointAt(n)</code>返回的是十进制数据，可以通过<code>toString(16)</code>将其转换成 16 进制数据</li></ul> <h2 id=\\\"string-fromcodepoint\\\"><a href=\\\"#string-fromcodepoint\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> String.fromCodePoint()</h2> <ul><li>ES5 提供的<code>fromCharCode()</code>方法，用于从码点返回字符，但这个方法不能识别 32 位的 UTF-16 字符</li> <li>ES6 新增的<code>String.fromCodePoint()</code>方法则解决了上述问题，与<code>charPointAt()</code>方法的作用正好相反，需要注意的是<code>fromCodePoint()</code>方法定义在<code>String</code>上面，而<code>charPointAt()</code>方法定义在字符串实例上面</li></ul> <h2 id=\\\"字符串的遍历接口\\\"><a href=\\\"#字符串的遍历接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串的遍历接口</h2> <p>可以使用<code>for...of</code>遍历字符串，并且可以正确识别 32 位的 UTF-16 的字符</p> <h2 id=\\\"at\\\"><a href=\\\"#at\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> at()</h2> <p>替代 ES5 的<code>charAt()</code>方法，增加对  32 位的 UTF-16 的字符的识别</p> <h2 id=\\\"判断一个字符串是否包含在另外一个字符串内\\\"><a href=\\\"#判断一个字符串是否包含在另外一个字符串内\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断一个字符串是否包含在另外一个字符串内</h2> <ul><li><code>indexOf</code>ES5</li> <li><code>includes</code>ES6 返回布尔值</li> <li><code>startsWith</code>ES6 返回布尔值</li> <li><code>endWith</code>ES6 返回布尔值</li></ul> <h2 id=\\\"repeat\\\"><a href=\\\"#repeat\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> repeat()</h2> <p>返回一个新的字符串，将原字符串重复n次</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">repeat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\t<span class=\\\"token comment\\\">// 'xxx'</span>\\n</code></pre></div><h2 id=\\\"padstart-padend\\\"><a href=\\\"#padstart-padend\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> padStart(), padEnd()</h2> <p>字符串补齐</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">padStart</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span>\\t<span class=\\\"token comment\\\">// 'abac'</span>\\n</code></pre></div><h2 id=\\\"matchall\\\"><a href=\\\"#matchall\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> matchAll()</h2> <blockquote><p>参见《正则表达式》</p></blockquote> <h2 id=\\\"字符串模版\\\"><a href=\\\"#字符串模版\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串模版</h2> <blockquote><p>反引号,大括号里面可以写任意表达式</p></blockquote> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Tom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this is </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\t<span class=\\\"token comment\\\">// 'this is Tom'</span>\\n</code></pre></div><h2 id=\\\"剩余内容：模板编译、标签模板、-string-raw-、模板字符串的限制\\\"><a href=\\\"#剩余内容：模板编译、标签模板、-string-raw-、模板字符串的限制\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 剩余内容：模板编译、标签模板、 String.raw() 、模板字符串的限制</h2>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}