{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/object.md?vue&type=template&id=3c135739&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/object.md","mtime":1537944817435},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"对象的扩展-2\\\"><a href=\\\"#对象的扩展-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象的扩展(2)</h1> <h2 id=\\\"对象的简介表示法\\\"><a href=\\\"#对象的简介表示法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象的简介表示法</h2> <ul><li>ES6 允许直接写入变量和函数作为函数的属性和方法,属性名为变量名，属性值为变量的值</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> baz <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>foo<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">//等同于</span>\\n<span class=\\\"token keyword\\\">const</span> baz <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>foo<span class=\\\"token punctuation\\\">:</span> foo<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><ul><li>如果某个方法的值是一个<code>Generator</code>函数，前面需要加<code>*</code>号</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">m</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"属性名表达式\\\"><a href=\\\"#属性名表达式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性名表达式</h2> <p>ES6 允许字面量定义对象时，把表达式放在方括号内作为属性名</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> baz <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  abc<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'world'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><ul><li>同样也适用于定义属性方法名</li></ul> <h2 id=\\\"方法的-name-属性\\\"><a href=\\\"#方法的-name-属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 方法的 name 属性</h2> <p>返回函数名</p> <h2 id=\\\"object-is-a-b\\\"><a href=\\\"#object-is-a-b\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object.is(a, b)</h2> <p>比较两个值是否相等</p> <p>与<code>===</code>的区别</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token number\\\">NaN</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">NaN</span> <span class=\\\"token comment\\\">// false</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// false</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre></div><h2 id=\\\"object-assign\\\"><a href=\\\"#object-assign\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object.assign()</h2> <p>用于对象的合并</p> <ul><li>对对象只实行浅拷贝</li> <li>同名属性进行替换</li> <li>数组会当作对象进行处理</li> <li>只能进行值的复制，如果要复制的是一个取值函数，那么将求值后再复制</li></ul> <h2 id=\\\"常见用途\\\"><a href=\\\"#常见用途\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 常见用途</h2> <ul><li>为对象添加属性</li> <li>为对象添加方法</li> <li>克隆对象</li> <li>合并多个对象</li> <li>为属性指定默认值</li></ul> <h2 id=\\\"属性的可枚举性和遍历\\\"><a href=\\\"#属性的可枚举性和遍历\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性的可枚举性和遍历</h2> <h3 id=\\\"可枚举性\\\"><a href=\\\"#可枚举性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 可枚举性</h3> <p>对象的每个属性有一个描述对象<code>Descriptor</code>，来控制属性的行为，可以通过<code>Object.getOwnPropertyDescriptor()</code>来获取某对象的某属性的描述对象</p> <p>通常有四个值+两个方法</p> <ul><li><code>value</code>//值</li> <li><code>writable</code>//可写</li> <li><code>enumerable</code>//可枚举</li> <li><code>configuragle</code>//可配置</li> <li><code>getter</code>//getter函数</li> <li><code>setter</code>//setter函数</li></ul> <p>如果一个属性的<code>enumberable</code>为<code>false</code>，那么这个属性是不可枚举的，下面四个方法会忽略</p> <ul><li><code>for...in</code></li> <li><code>Object.keys()</code></li> <li><code>JSON.stringify()</code></li> <li><code>Object.assign()</code></li></ul> <p><code>es6</code> 规定，所有<code>Class</code>的原型的方法都是不可枚举的</p> <h3 id=\\\"属性的遍历\\\"><a href=\\\"#属性的遍历\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性的遍历</h3> <p><code>es6</code>共有5种方法可以遍历对象的属性</p> <ul><li><code>for...in</code> // 遍历对象自身的和继承的可枚举属性（不包括<code>Symbol属性</code>）</li> <li><code>Object.keys()</code> // 返回一个数组，包含对象自身（不含继承）所有可枚举属性（不包含<code>Symbol</code>属性）的键名</li> <li><code>Objet.getOwnPropertyNames(obj)</code> // 返回一个数组，包含对象自身的所有属性，（不含<code>Symbol</code>属性但是包括不可枚举属性）的键名</li> <li><code>Object.getOwnPropertySymbols()</code> // 返回一个数组，包含对象自身的所有<code>Symbole</code>属性的键名</li> <li><code>Reflect.ownKeys(obj)</code> // 返回一个数组，包含对象自身的所有键名，包括<code>Symbol</code>属性和不可枚举属性</li></ul> <h3 id=\\\"遍历遵循以下规则\\\"><a href=\\\"#遍历遵循以下规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 遍历遵循以下规则</h3> <ul><li>首先遍历所有的数值键，按照数值升序排序</li> <li>其次遍历所有的字符串键，按照加入时间升序排序</li> <li>最后遍历所有的<code>Symbol</code>键，按照加入时间排序</li></ul> <h2 id=\\\"object-getownpropertydescpriptors\\\"><a href=\\\"#object-getownpropertydescpriptors\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object.getOwnPropertyDescpriptors()</h2> <p>ES2017 引入该方法返回指定对象所有自身属性(非继承)的描述对象</p> <h2 id=\\\"proto-属性-object-setprototypeof-object-getprototypeof\\\"><a href=\\\"#proto-属性-object-setprototypeof-object-getprototypeof\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <strong><strong>proto</strong></strong> 属性,Object.setPrototypeOf(),Object.getPrototypeOf</h2> <h3 id=\\\"proto-属性\\\"><a href=\\\"#proto-属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <strong><strong>proto</strong></strong> 属性</h3> <p>指向原型对象的<code>prototype</code>属性，ES6 建议只在浏览器部署该属性，而且建议不直接使用该属性</p> <h3 id=\\\"object-setprototypeof\\\"><a href=\\\"#object-setprototypeof\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object.setPrototypeOf()</h3> <p>作用与<code>__proto__</code>相同，可以用来设置一个对象的原型，为 ES6 推荐设置对象原型的方法</p> <h3 id=\\\"object-getprototypeof\\\"><a href=\\\"#object-getprototypeof\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object.getPrototypeOf()</h3> <p>读取一个对象的原型对象</p> <h2 id=\\\"super-关键字\\\"><a href=\\\"#super-关键字\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> super 关键字</h2> <ul><li>ES6 规定<code>super</code>指向当前对象的原型对象</li> <li><code>super</code>只能用在对象的方法当中，用在其他地方都会报错，目前只有对象方法的简写方法才能够让<code>JavaScript</code>引擎确认定义的是对象的方法</li> <li><code>super.foo()</code>相当于 <code>Object.getPrototypeOf(this).foo</code></li></ul> <h2 id=\\\"object-keys-object-values-object-entries\\\"><a href=\\\"#object-keys-object-values-object-entries\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object.keys(), Object.values(), Object.entries()</h2>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}