{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/module.md?vue&type=template&id=6c04c418&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/module.md","mtime":1537926977696},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"module-的语法\"><a class=\"header-anchor\" href=\"#module-的语法\" aria-hidden=\"true\">#</a> Module 的语法</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\" aria-hidden=\"true\">#</a> 概述</h2>\n<p>为了使 JavaScript 有模块体系，将各个功能拆分成小模块，在用简单的方法拼装起来</p>\n<h2 id=\"与-commonjs-比较\"><a class=\"header-anchor\" href=\"#与-commonjs-比较\" aria-hidden=\"true\">#</a> 与 CommonJS 比较</h2>\n<ul>\n<li>ES6 模块采用编译时加载， CommonJS 是运行时加载</li>\n<li>ES6 采用按需加载，只加载需要的属性， CommonJS 将模块作为一个对象全部加载</li>\n</ul>\n<h2 id=\"严格模式\"><a class=\"header-anchor\" href=\"#严格模式\" aria-hidden=\"true\">#</a> 严格模式</h2>\n<p>ES6 模块自动采用严格模式，主要有以下限制</p>\n<ol>\n<li>变量必须申明后使用</li>\n<li>函数的参数不能有同名属性，否则报错</li>\n<li>不能使用<code>with</code>语句</li>\n<li>不能对只读对象赋值，否则报错</li>\n<li>必能使用前缀 0 表示八进制数，否则报错</li>\n<li>不能删除不可删除属性，否则报错</li>\n<li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li>\n<li><code>eval</code>不会在外层作用域引入变量</li>\n<li><code>eval</code>和<code>arguments</code>不能被赋值\n10.<code>arguments</code>不能反映参数的动态变化</li>\n<li>不能使用<code>arguments.callee</code></li>\n<li>不能使用<code>arguments.caller</code></li>\n<li>禁止<code>this</code> 指向全局对象</li>\n<li>不能使用<code>fn.caller()</code>和<code>fn.arguments</code>来获取函数调用的堆栈</li>\n<li>增加了保留字，（比如<code>protected</code>,<code>static</code>,<code>interface</code>）</li>\n</ol>\n<h2 id=\"export-命令和-import命令\"><a class=\"header-anchor\" href=\"#export-命令和-import命令\" aria-hidden=\"true\">#</a> export 命令和 import命令</h2>\n<ul>\n<li>模块主要由两个命令构成 <code>export</code>,<code>import</code>。<code>export</code>规定模块对外的借口，<code>import</code>主要用于输入其他模块的功能</li>\n</ul>\n<h3 id=\"export\"><a class=\"header-anchor\" href=\"#export\" aria-hidden=\"true\">#</a> export</h3>\n<p>模块内部可以直接通过<code>export</code>关键字输出模块内部定义的变量和方法</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> bar<span class=\"token punctuation\">,</span> foo <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>export</code>输出的变量名不变，可以通过<code>as</code>重命名</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> bar <span class=\"token keyword\">as</span> a <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>export</code>输出的值与 module 内部变量的是关联的，这一点与 CommonJS 完全不同， CommonJS 输出的值是模块内部值的拷贝</p>\n<p><strong>import</strong></p>\n<p><code>import</code>命令接受一对大括号，里面接受导入的变量名，必须与导出的变量名相同</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bar<span class=\"token punctuation\">,</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./config.js'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>import</code>输入的变量都是只读的，不可改写</p>\n<p>如果重复执行多次同一条<code>import</code>语句，那么只会执行一次，也就是说，<code>import</code>语句是 Singleton 模式</p>\n<p><code>import</code>命令有提升效果</p>\n<p><strong>模块的整体加载</strong></p>\n<p>ES6 模块机制可以通过星号<code>*</code>实现模块的整体加载</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> myModule <span class=\"token keyword\">from</span> <span class=\"token string\">'./myModule.js'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"export-default-命令\"><a class=\"header-anchor\" href=\"#export-default-命令\" aria-hidden=\"true\">#</a> export default 命令</h2>\n<p>为模块指定默认输出</p>\n<p>使用<code>export default</code>的输出不需要使用<code>{}</code>引入</p>\n<p>因为输出的时候不需要指定名称，引入的时候可以随意命令</p>\n<!--beforebegin--><div class=\"language-javasript extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>// myModule.js\nexport default function hello() {\n  console.log(&#39;hello world&#39;)\n}\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> p <span class=\"token keyword\">from</span> <span class=\"token string\">'./myModule.js'</span>\n<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"hello word\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}