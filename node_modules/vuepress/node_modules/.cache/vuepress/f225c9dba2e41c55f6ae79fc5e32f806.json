{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/git/webhook.md?vue&type=template&id=186b5be3&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/git/webhook.md","mtime":1543635517284},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1543635518223},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1543635521090},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1543635518223},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1543635521089},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1543635521178}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"ssh-key\"><a class=\"header-anchor\" href=\"#ssh-key\" aria-hidden=\"true\">#</a> ssh-key</h1>\n<h2 id=\"生成ssh-key\"><a class=\"header-anchor\" href=\"#生成ssh-key\" aria-hidden=\"true\">#</a> 生成ssh-key</h2>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># linux环境</span>\n\n<span class=\"token comment\"># 进入家目录</span>\n<span class=\"token function\">cd</span> ~\n\n<span class=\"token comment\"># 如未配置git全局用户名，进行配置</span>\n<span class=\"token function\">git</span> config --global  user.name <span class=\"token string\">\"用户名\"</span>\n\n<span class=\"token comment\"># 如未配置git全局邮箱，进行配置</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"邮箱\"</span>\n\n<span class=\"token comment\"># 生成密钥（执行命令后一直回车即可）</span>\nssh-keygen -t rsa -C <span class=\"token string\">\"邮箱\"</span>\n\n<span class=\"token comment\"># 进入生成密钥的目录</span>\n<span class=\"token function\">cd</span> ~/.ssh/\n\n<span class=\"token comment\"># 查看ssh-key</span>\n<span class=\"token function\">cat</span> id_rsa.pub\n\n<span class=\"token comment\"># 将ssh-key配置到个人git账户中</span>\n<span class=\"token comment\"># 进入github官网：https://github.com/settings/keys 中的 SSH keys</span>\n\n<span class=\"token comment\"># 测试 ssh-key</span>\n<span class=\"token function\">ssh</span> -T git@github.com\n<span class=\"token comment\"># 输入yes后若显示 </span>\nHi xxx<span class=\"token operator\">!</span> You’ve successfully authenticated, but GitHub does not provide shell access. \n<span class=\"token comment\"># 则代表成功</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"使ssh-key生效\"><a class=\"header-anchor\" href=\"#使ssh-key生效\" aria-hidden=\"true\">#</a> 使ssh-key生效</h2>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># github上传ssh-key后仍须输入密码问题</span>\n\n<span class=\"token comment\"># 这种事情通常发生在更换机器后克隆自己仓库的时候，通常我们会使用https方式克隆</span>\n<span class=\"token function\">git</span> clone https://github.com/Name/project.git\n<span class=\"token comment\"># 这样便会在你git push时候要求输入用户名和密码</span>\n\n<span class=\"token comment\"># 解决的方法是使用ssh方式克隆仓库</span>\n<span class=\"token function\">git</span> clone git@github.com:Name/project.git\n\n<span class=\"token comment\"># 如果你已经用https方式克隆了仓库，就不必删除仓库重新克隆，只需将 .git/config 文件中的</span>\nurl <span class=\"token operator\">=</span> https://github.com/Name/project.git\n<span class=\"token comment\"># 改为 </span>\nurl <span class=\"token operator\">=</span> git@github.com:Name/project.git\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"配置webhook\"><a class=\"header-anchor\" href=\"#配置webhook\" aria-hidden=\"true\">#</a> 配置webhook</h2>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># 查看当前网络访问时的用户</span>\n\n<span class=\"token comment\">##################文件内容开始线#############################</span>\n<span class=\"token operator\">&lt;</span>?php\n\nexec<span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span>, <span class=\"token variable\">$out</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\"># whoami = id -un</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"&lt;pre>\"</span><span class=\"token punctuation\">;</span>\nprint_r<span class=\"token punctuation\">(</span><span class=\"token variable\">$out</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">##################文件内容结束线#############################</span>\n<span class=\"token comment\"># 通过浏览器访问该文件，获得用户名</span>\napache      <span class=\"token comment\"># 本机演示得到的用户名，请以实际用户名为准</span>\n\n<span class=\"token comment\"># 将当前需要git同步的仓库目录，权限给到浏览器访问的用户名</span>\n<span class=\"token function\">chown</span> -R apache:apache demo    <span class=\"token comment\"># demo为演示的服务器仓库目录（demo 或 demo/ 都可以）</span>\n\n<span class=\"token comment\"># 如遇以下报错信息：</span>\nCould not create directory <span class=\"token string\">'/usr/share/httpd/.ssh'</span><span class=\"token keyword\">.</span>\nHost key verification failed.\nfatal: Could not <span class=\"token function\">read</span> from remote repository.\nPlease <span class=\"token function\">make</span> sure you have the correct access rights\nand the repository exists.\n\n<span class=\"token comment\"># 以上报错说明实际浏览器访问时，是到 /usr/share/httpd/.ssh 下读取公钥</span>\n<span class=\"token comment\"># 因没有读到，只需要复制实际公钥生成的文件到当前文件夹下即可</span>\n<span class=\"token function\">cd</span> /usr/share/httpd/\n<span class=\"token function\">mkdir</span> .ssh\n<span class=\"token function\">cp</span> ~/.ssh/id_rsa /usr/share/httpd/.ssh/\n<span class=\"token function\">cp</span> ~/.ssh/id_rsa.pub /usr/share/httpd/.ssh/\n<span class=\"token function\">cp</span> ~/.ssh/known_hosts /usr/share/httpd/.ssh/\n\n<span class=\"token comment\"># 将新增的密钥相关文件权限改到浏览器访问的用户名</span>\n<span class=\"token function\">chown</span> -R apache:apache .ssh\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"非root用户运行docker\"><a class=\"header-anchor\" href=\"#非root用户运行docker\" aria-hidden=\"true\">#</a> 非root用户运行docker</h2>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># 首先创建docker用户组，如果docker用户组存在可以忽略</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker\n\n<span class=\"token comment\"># 把用户添加进docker组中</span>\n<span class=\"token function\">sudo</span> gpasswd -a <span class=\"token variable\">${USER}</span> docker\n\n<span class=\"token comment\"># 重启docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> docker restart\n\n<span class=\"token comment\"># 如果普通用户执行docker命令，如果提示get …… dial unix /var/run/docker.sock权限不够</span>\n<span class=\"token comment\"># 则修改/var/run/docker.sock权限使用root用户执行如下命令即可</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> a+rw /var/run/docker.sock\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"更新linux系统时间\"><a class=\"header-anchor\" href=\"#更新linux系统时间\" aria-hidden=\"true\">#</a> 更新Linux系统时间</h2>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># 查看时间 </span>\n<span class=\"token function\">date</span>\n\n<span class=\"token comment\"># 更新时间</span>\nyum <span class=\"token function\">install</span> ntpdate\nntpdate time.windows.com\n\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}