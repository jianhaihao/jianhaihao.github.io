{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/linux/shell.md?vue&type=template&id=43230722&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/linux/shell.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"shell-基础\\\"><a href=\\\"#shell-基础\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Shell 基础</h1> <p>Shell原意为壳、贝壳、外形，在Linux当中相当于命令解释器，向用户提供了一个与内核交互的环境</p> <h2 id=\\\"shell语法分类\\\"><a href=\\\"#shell语法分类\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Shell语法分类</h2> <ul><li>Bourne Shell\\n<ul><li>sh、ksh、bash、psh、zsh</li></ul></li> <li>c shell\\n<ul><li>csh、tcsh</li></ul></li></ul> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token keyword\\\">echo</span> <span class=\\\"token variable\\\">$SHELL</span> <span class=\\\"token comment\\\"># 查看当前shell类型`</span>\\n</code></pre></div><h2 id=\\\"脚本执行方式\\\"><a href=\\\"#脚本执行方式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 脚本执行方式</h2> <h3 id=\\\"脚本文件\\\"><a href=\\\"#脚本文件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 脚本文件</h3> <ul><li>必须以<code>#!/bin/bash</code>开头</li></ul> <h3 id=\\\"echo输出命令\\\"><a href=\\\"#echo输出命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> echo输出命令</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token keyword\\\">echo</span> <span class=\\\"token punctuation\\\">[</span>选项<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">[</span>输出内容<span class=\\\"token punctuation\\\">]</span>\\n\\t-e  //支持反斜杠转义字符 \\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">&quot;\\\\e[1;31m this is a text with color \\\\e[0m&quot;</span>\\t//这是一段有颜色的文字\\n</code></pre></div><ul><li>赋予脚本执行权限<br> <code>chmod 755 hello.sh</code></li> <li>直接执行<br> <code>bash hello.sh</code> <code>./hello.sh</code></li></ul> <h2 id=\\\"bash的基本功能\\\"><a href=\\\"#bash的基本功能\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> bash的基本功能</h2> <ul><li>命令别名和快捷键</li> <li>历史命令</li> <li>输出重定向</li> <li>多命令顺序执行</li> <li>shell中的特殊符号</li></ul> <h3 id=\\\"别名\\\"><a href=\\\"#别名\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 别名</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">alias</span> <span class=\\\"token comment\\\"># 查看别名</span>\\n<span class=\\\"token function\\\">alias</span> 别名 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'原命令'</span>\\t<span class=\\\"token comment\\\"># 重启失效</span>\\n<span class=\\\"token function\\\">unalias</span> 别名\\t<span class=\\\"token comment\\\"># 删除别名</span>\\n<span class=\\\"token function\\\">vi</span> ~/.bashrc\\t<span class=\\\"token comment\\\"># 重新登录，永久有效</span>\\n<span class=\\\"token function\\\">source</span> .bashrc <span class=\\\"token comment\\\"># 立即永久生效</span>\\n</code></pre></div><h3 id=\\\"快捷键\\\"><a href=\\\"#快捷键\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 快捷键</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>ctrl + C\\t<span class=\\\"token comment\\\"># 强制终止当前命令</span>\\nctrl + L\\t<span class=\\\"token comment\\\"># 清屏</span>\\nctrl + A\\t<span class=\\\"token comment\\\"># 光标移动到命令行首</span>\\nctrl + E\\t<span class=\\\"token comment\\\"># 光标移动到行尾</span>\\nctrl + U\\t<span class=\\\"token comment\\\"># 从光标所在位置删除到行首</span>\\nctrl + Z\\t<span class=\\\"token comment\\\"># 把命令放入后台</span>\\nctrl + R\\t<span class=\\\"token comment\\\"># 在历史命令中搜索</span>\\n</code></pre></div><h3 id=\\\"历史命令\\\"><a href=\\\"#历史命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 历史命令</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">history</span> <span class=\\\"token punctuation\\\">[</span>命令选项<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">[</span>历史命令保存文件<span class=\\\"token punctuation\\\">]</span>\\n  -c <span class=\\\"token comment\\\"># 清空历史命令</span>\\n  -w <span class=\\\"token comment\\\"># 把缓存中的命令写入历史命令保存文件中 ~/bash_history</span>\\n\\n<span class=\\\"token operator\\\">!</span>n\\t<span class=\\\"token comment\\\"># 重复执行第n条命令</span>\\n<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>\\t<span class=\\\"token comment\\\"># 重复执行上一条命令</span>\\n<span class=\\\"token operator\\\">!</span>字符串\\t<span class=\\\"token comment\\\"># 重复执行最后一条以该字符串结尾的命令</span>\\n</code></pre></div><h3 id=\\\"命令和文件补全\\\"><a href=\\\"#命令和文件补全\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 命令和文件补全</h3> <p><code>tab</code>键</p> <h3 id=\\\"输出重定向\\\"><a href=\\\"#输出重定向\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 输出重定向</h3> <p><code>命令 &gt; 文件</code>以覆盖的方式将命令输出到文件<br> <code>命令 &gt;&gt; 文件</code>以追加的方式将命令输出到文件<br> <code>错误命令 2&gt;文件</code>以覆盖的方式将命令的错误输出到文件中<br> <code>错误命令 2&gt;&gt;文件</code>以追加的方式将命令的错误输出到文件中<br> <code>命令 &gt; 文件 2&gt;&amp;1</code> 以追加的方式将所有命令结果输出到文件<br> <code>命令 &gt;&gt; 文件 2&gt;&amp;q</code> 以覆盖的方式将所有命令结果输出到文件<br> <code>命令 &amp;&gt; 文件</code><br> <code>命令 &amp;&gt;&gt; 文件</code> 与上面两种命令功能相同<br> <code>命令 &gt;&gt; 文件1 2&gt;&gt;文件2</code> 把正确的输出追加到文件1，把错误的输出追加到文件2</p> <h3 id=\\\"输入重定向\\\"><a href=\\\"#输入重定向\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 输入重定向</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">wc</span> <span class=\\\"token punctuation\\\">[</span>选项<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">[</span>文件名<span class=\\\"token punctuation\\\">]</span>\\n  -c <span class=\\\"token comment\\\"># 统计字节数</span>\\n  -w <span class=\\\"token comment\\\"># 统计单词数</span>\\n  -l <span class=\\\"token comment\\\"># 统计行数</span>\\n\\n<span class=\\\"token function\\\">wc</span> <span class=\\\"token operator\\\">&lt;</span> access.log\\n<span class=\\\"token function\\\">wc</span> <span class=\\\"token operator\\\">&lt;&lt;</span> access.log\\n</code></pre></div><h3 id=\\\"多命令顺序执行\\\"><a href=\\\"#多命令顺序执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 多命令顺序执行</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># 顺序执行</span>\\n<span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token comment\\\"># 逻辑与</span>\\n<span class=\\\"token operator\\\">||</span> <span class=\\\"token comment\\\"># 逻辑或</span>\\n</code></pre></div><h3 id=\\\"管道符\\\"><a href=\\\"#管道符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 管道符</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>命令1 <span class=\\\"token operator\\\">|</span> 命令2 <span class=\\\"token comment\\\"># 命令1的结果作为命令2的参数执行，如果命令1错误，命令2不会执行</span>\\n</code></pre></div><h3 id=\\\"通配符\\\"><a href=\\\"#通配符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 通配符</h3> <table><thead><tr><th>通配符</th> <th>作用</th></tr></thead> <tbody><tr><td>？</td> <td>匹配一个任意字符</td></tr> <tr><td>*</td> <td>匹配任意0个或多个任意字符，也就是匹配任何内容</td></tr> <tr><td>[]</td> <td>匹配中括号内任意一个字符</td></tr> <tr><td>[-]</td> <td>匹配中括号内字符，-表示范围，比如a-z表示a到z的全部字母</td></tr> <tr><td>[^]</td> <td>取反</td></tr></tbody></table>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}