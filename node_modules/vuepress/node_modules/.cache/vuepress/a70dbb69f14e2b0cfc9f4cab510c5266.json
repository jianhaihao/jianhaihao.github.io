{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/destructuring.md?vue&type=template&id=9a8688ca&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/destructuring.md","mtime":1537926977694},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"变量的解构赋值\"><a class=\"header-anchor\" href=\"#变量的解构赋值\" aria-hidden=\"true\">#</a> 变量的解构赋值</h1>\n<h2 id=\"基本概念\"><a class=\"header-anchor\" href=\"#基本概念\" aria-hidden=\"true\">#</a> 基本概念</h2>\n<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p>\n<h2 id=\"数组的解构赋值\"><a class=\"header-anchor\" href=\"#数组的解构赋值\" aria-hidden=\"true\">#</a> 数组的解构赋值</h2>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>可以指定变量的默认值，当一个数组成员严格等于<code>undefied</code>时，默认值才会生效</li>\n<li>只要某种数据结构具有 Iterator 接口，就可以采用数组解构赋值</li>\n</ul>\n<h2 id=\"对象的解构赋值\"><a class=\"header-anchor\" href=\"#对象的解构赋值\" aria-hidden=\"true\">#</a> 对象的解构赋值</h2>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> bar<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>嵌套对象赋值注意模式和变量的区别</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token string\">'123'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\na <span class=\"token comment\">//报错</span>\nb <span class=\"token comment\">// \"123\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>此处<code>a</code>为模式，<code>b</code> 为变量，要为<code>a</code>赋值，可以写作</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token string\">'123'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\na <span class=\"token comment\">// Object {b: '123'}</span>\nb <span class=\"token comment\">// \"123\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"字符串的解构赋值\"><a class=\"header-anchor\" href=\"#字符串的解构赋值\" aria-hidden=\"true\">#</a> 字符串的解构赋值</h2>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>可以对字符串的<code>length</code>进行解构赋值</p>\n<h2 id=\"数值与布尔值的解构赋值\"><a class=\"header-anchor\" href=\"#数值与布尔值的解构赋值\" aria-hidden=\"true\">#</a> 数值与布尔值的解构赋值</h2>\n<p>对于数值和布尔值进行解构赋值时，如果等号右边是布尔值或者是数值，则会先将其转化为对象</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> toString <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\ntoString <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>由于<code>null</code>和<code>undefined</code>不能转化为对象，所有不能进行解构赋值</p>\n<h2 id=\"函数参数的解构赋值\"><a class=\"header-anchor\" href=\"#函数参数的解构赋值\" aria-hidden=\"true\">#</a> 函数参数的解构赋值</h2>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"用途\"><a class=\"header-anchor\" href=\"#用途\" aria-hidden=\"true\">#</a> 用途</h2>\n<ul>\n<li>交换变量 <code>[x, y] = [y, x]</code></li>\n<li>从函数返回多个值</li>\n<li>函数参数的定义</li>\n<li>提取json数据</li>\n<li>函数参数的默认值</li>\n<li>便利map结构</li>\n<li>输入模块的制定方法</li>\n</ul>\n</div>\n",null]}