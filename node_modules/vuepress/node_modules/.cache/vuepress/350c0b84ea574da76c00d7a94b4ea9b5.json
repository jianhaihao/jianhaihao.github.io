{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/other/interview.md?vue&type=template&id=bf38a570&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/other/interview.md","mtime":1537926977709},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"面试常见问题\\\"><a href=\\\"#面试常见问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 面试常见问题</h1> <h2 id=\\\"css\\\"><a href=\\\"#css\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS</h2> <h3 id=\\\"如何实现左边固定宽度，右边自适应的布局\\\"><a href=\\\"#如何实现左边固定宽度，右边自适应的布局\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何实现左边固定宽度，右边自适应的布局</h3> <div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>wrap<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>sidebar<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>content<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p><strong>方法1：使用 table 布局</strong></p> <div class=\\\"language-css extra-class\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">#wrap</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> table<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 800px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">margin</span><span class=\\\"token punctuation\\\">:</span> 0 auto<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#sidebar, #content</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 300px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> table-cell<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">;</span>\\n  \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#sidebar</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 240px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> fuchsia<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>把<code>wrap</code>容器的<code>display</code>属性设置为<code>table</code>，然后把子节点的<code>display</code>设置为<code>table-cell</code>，子节点就会自适应宽度，把要固定宽度节点的宽度设置固定，不支持 IE7</p> <p><strong>方法2：使用 float + 外边距</strong></p> <div class=\\\"language-css extra-class\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">#wrap</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">margin</span><span class=\\\"token punctuation\\\">:</span> 0 auto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 800px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#sidebar, #content</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 300px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#sidebar</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 240px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">float</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#content</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">margin-left</span><span class=\\\"token punctuation\\\">:</span> 240px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> fuchsia<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p><strong>方法3：使用 flex 布局</strong></p> <div class=\\\"language-css extra-class\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">#wrap</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">margin</span><span class=\\\"token punctuation\\\">:</span> 0 auto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 800px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> flex<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#sidebar, #content</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 300px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#sidebar</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 240px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">#content</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">flex</span><span class=\\\"token punctuation\\\">:</span> 1 0 auto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> fuchsia<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"如何实现垂直居中\\\"><a href=\\\"#如何实现垂直居中\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何实现垂直居中</h3> <p><strong>方法1（使用 flex 布局）：</strong></p> <p>父容器的<code>display</code>属性设置为<code>flex</code>，<code>align-item</code>属性设置为<code>center</code></p> <h2 id=\\\"javascript\\\"><a href=\\\"#javascript\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JavaScript</h2> <h3 id=\\\"如何让一个构造函数继承另一个构造函数\\\"><a href=\\\"#如何让一个构造函数继承另一个构造函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何让一个构造函数继承另一个构造函数</h3> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Parent</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n<span class=\\\"token punctuation\\\">}</span>\\nParent<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 第一步，继承父类的属性</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Child</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Parent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 第二步，继承父类的方法</span>\\nChild<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>Parent<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span>\\nChild<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">=</span> Child\\n\\n<span class=\\\"token comment\\\">// 调用</span>\\n<span class=\\\"token keyword\\\">var</span> child <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Child</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span>\\nchild<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &quot;hello&quot;</span>\\n</code></pre></div><h3 id=\\\"数组如何去重\\\"><a href=\\\"#数组如何去重\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组如何去重</h3> <ul><li>使用 ES6 的<code>Set</code>数据结构</li> <li>新建一个数组，将原数组的成员<code>push</code>进入新数组之前用<code>indexOf()</code>或者 ES6 的<code>includes()</code>检查</li></ul> <h2 id=\\\"网络\\\"><a href=\\\"#网络\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 网络</h2> <h3 id=\\\"get-请求和-post-请求的区别\\\"><a href=\\\"#get-请求和-post-请求的区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> get 请求和 post 请求的区别</h3> <p><strong>从 restful 规范角度回答</strong></p> <ul><li>get 请求用于获取数据，符合幂等性</li> <li>post 请求用于提交数据，不符合幂等性</li></ul> <p><strong>从参数角度回答</strong></p> <ul><li>get 请求明文传输，长度受限于 url 长度（2048 字符），不安全，只能进行 url 编码</li> <li>post 请求通过数据包的方式传输，无限制，相对安全，可以支持多种编码方法</li></ul> <p><strong>从传输过程角度回答</strong></p> <ul><li>get 请求浏览器会把 header 和 data 一起发送过去，服务器响应 200（返回数据）</li> <li>post 请求浏览器先发送 header，服务器响应 100（continue），浏览器在发送 data，服务器响应 200（返回数据）</li></ul> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://www.cnblogs.com/logsharing/p/8448446.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"很有意思的解释\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <h3 id=\\\"http-和-https-的区别\\\"><a href=\\\"#http-和-https-的区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> http 和 https 的区别</h3> <p><strong>HTTP 三次握手</strong></p> <ul><li>客户端发送请求连接报文，将<code>SYN</code>位置为<code>1</code>，<code>Sequence Number</code>位置为<code>x</code>，客户端进入<code>SYN_SEND</code>状态，等待确认</li> <li>服务端分析<code>SYN</code>请求报文，并且将<code>ACK</code>位置为<code>x+1</code>，同时发送一个请求报文，<code>SYN</code>位置为<code>1</code>，<code>Sequence Number</code>位置为<code>y</code>，服务端进入<code>SYN_RECV</code>状态</li> <li>客户端收到<code>ACK</code>+<code>SYN</code>报文，并且发送响应报文，<code>ACK</code>位置为<code>y+1</code>，客户端和服务端进入<code>ESTABLISHED</code>状态，连接建立</li></ul> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>&quot;Hello, can you hear me?&quot;\\n&quot;Yes, I can hear you. Can you hear me?&quot;\\n&quot;Yes.&quot;\\n&quot;balabala....&quot;\\n</code></pre></div><p><strong>HTTPS 连接过程：HTTP 连接 + SSL 连接</strong></p> <ul><li>客户端发起 SSL 连接请求</li> <li>服务端返回一个 CA 证书</li> <li>客户端进行 CA 证书校验，通过则生成对称加密的密钥，并利用 CA 证书携带的公钥加密对密钥进行加密，发送给服务端</li> <li>服务器端利用私钥解密出对称加密的密钥，对数据进行加密，发送给客户端</li> <li>客户端解密数据，连接简历</li></ul> <h3 id=\\\"常见的响应状态码\\\"><a href=\\\"#常见的响应状态码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 常见的响应状态码</h3> <ul><li>100：继续请求</li> <li>200：请求成功</li> <li>301：永久重定向</li> <li>302：临时重定向</li> <li>304：资源未修改</li> <li>403：服务器拒绝请求</li> <li>404：无法找到资源</li> <li>408：超时</li> <li>500：服务器内部错误</li> <li>502：充当网关或代理的服务器，接受到了一个无效的请求</li></ul> <h2 id=\\\"加密\\\"><a href=\\\"#加密\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 加密</h2> <h3 id=\\\"非对称加密\\\"><a href=\\\"#非对称加密\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 非对称加密</h3> <p>数据的加密传输：公钥加密，私钥解密，</p> <p>证书的签名及认证（程序补丁）：私钥加密，公钥解密</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}