{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\linux-up\\performance.md?vue&type=template&id=3c4a0500&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\linux-up\\performance.md","mtime":1555059115929},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552483045256},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552483045254},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552483045520}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"性能测试\\\"><a href=\\\"#性能测试\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 性能测试</h1> <h2 id=\\\"性能指标\\\"><a href=\\\"#性能指标\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 性能指标</h2> <ol><li>合理的平均响应时间<br>\\n2/5/10原则</li> <li>系统资源类<br>\\nCPU：CPU的占用率<br>\\n内存：内存的占用率、换页数等<br>\\nI/O：读写的请求数、读写量等<br>\\n带宽：进站出站带宽暂用率</li></ol> <h2 id=\\\"性能测试分类\\\"><a href=\\\"#性能测试分类\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 性能测试分类</h2> <ol><li>负载测试（Load Test）<br>\\n为了验证系统设计符合<code>正常业务负载</code>情况下系统性能表现的测试</li> <li>压力测试（Stress Test）<br>\\n为了验证系统在<code>极端负载</code>情况下的系统性能表现的测试</li></ol> <h2 id=\\\"性能测试工具\\\"><a href=\\\"#性能测试工具\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 性能测试工具</h2> <ol><li>top<br>\\n监控每一个进程的资源占用</li> <li>sysstat\\n统计系统的各种资源占用情况</li></ol> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\nyum list sysstat\\n\\n<span class=\\\"token comment\\\"># 如果未提示 Installed Packages，再执行以下命令</span>\\nyum <span class=\\\"token function\\\">install</span> sysstat.x86_64\\n\\n<span class=\\\"token comment\\\"># 查询 crontab 配置 sysstat的信息</span>\\n<span class=\\\"token function\\\">cat</span> /etc/cron.d/sysstat\\n\\n<span class=\\\"token comment\\\"># 日志路径</span>\\n<span class=\\\"token function\\\">cd</span> /var/log/sa/\\n\\n</code></pre></div><h3 id=\\\"sysstat-常用命令\\\"><a href=\\\"#sysstat-常用命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>sysstat</code> 常用命令</h3> <ol><li><code>sar -q -f</code></li></ol> <p>CPU任务数、CPU的任务繁重程度</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -q -f sa25\\n</code></pre></div><ul><li>runq-sz：等待执行的任务队列长度，越长阻塞越严重</li> <li>plist-sz：队列中的任务总数</li> <li>ldavg-1： 1分钟内系统负载描述</li> <li>ldavg-5： 5分钟内系统负载描述</li> <li>ldavg-15： 15分钟内系统负载描述</li> <li>ldavg &gt; CPU总数时表示CPU压力大<br>\\nldavg值 等于大于CPU核数时，说明CPU负载非常大了</li> <li>ldavg值 是通过执行中的任务和等待执行的任务的个数的平均值得到的</li></ul> <ol start=\\\"2\\\"><li><code>sar -p -f</code></li></ol> <p>CPU占用百分比、CPU占用率</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -p -f sa08\\n</code></pre></div><ul><li>%user：用户占用百分比</li> <li>%system：系统占用百分比</li> <li>%nice：改过优先级的进程CPU占用率</li> <li>%iowait： 等待io占用百分比</li> <li>%idle：空闲的CPU占比</li> <li>%steal：管理程序为另一个虚拟进程提供服务而等待虚拟CPU的百分比</li></ul> <p><code>%steal 等待CPU</code> vs <code>%iowait 等待磁盘读写</code></p> <blockquote><p>PRI：进程优先权，代表这个进程可被执行的优先级，值越小优先级越高，越早被执行<br>\\nNI：进程Nice值，进程可被执行的优先级的修正数值<br>\\nPRI(new) = PRI(old) + nice</p></blockquote> <ol start=\\\"3\\\"><li><code>sar -r -f</code></li></ol> <p>内存：实际上内存占的百分比</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -r -f sa25\\n</code></pre></div><ul><li>kbmemfree：空闲的内存</li> <li>kbmemused：已经使用的内存</li> <li>%memused： 内存使用率</li> <li>kbbuffers：文件磁盘块缓存</li> <li>kbcached：文件缓存</li> <li>kbcommit：是为了保证程序的正常运行需要的内存数目</li> <li>%commit：是为了保证程序的正常运行还需要的内存百分比</li></ul> <blockquote><p>buffer/cached 是为了提高文件读取的性能的磁盘缓存\\nkbcached 是针对文件系统的，是文件的缓存\\nkbbuffers 是针对磁盘块的缓存\\n<code>%memused</code> + <code>%commit</code> &gt; 100% ，则说明内存不够，会导致内存频繁的换页，需要去动用虚拟内存</p></blockquote> <ol start=\\\"4\\\"><li><code>sar -B -f</code></li></ol> <p>内存：换页频繁程度</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -B -f sa25\\n</code></pre></div><ul><li>pgpgin/s：表示每秒从磁盘或SWAP置换到内存的字节数（KB）</li> <li>pgpgout/s：表示每秒从内存置换到磁盘或SWAP的字节数（KB）</li> <li>fault/s： 每秒钟系统产生的缺页数，即主缺页与轻微缺页之和（major + minor）</li> <li>majflt/s：每秒钟产生的主缺页数，该值大于0时，代表肯定会发生换页</li></ul> <blockquote><p>pgpgin/s &amp;&amp; pgpgout/s 一旦发生，意味着就有磁盘的读写，io的性能就会受到很大的冲击</p></blockquote> <ol start=\\\"5\\\"><li><code>sar -W -f</code></li></ol> <p>内存：swap交换的频繁程度</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -W -f sa25\\n</code></pre></div><ul><li>pswpin/s：表示每秒从SWAP置换到内存的字节数（KB）</li> <li>pswpout/s：表示每秒从内存置换到SWAP的字节数（KB）</li></ul> <blockquote><p>pswpin/s &amp;&amp; pswpout/s 越大，意味着负载越重</p></blockquote> <ol start=\\\"6\\\"><li><code>sar -b -f</code></li></ol> <p>IO监控</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -b -f sa25\\n</code></pre></div><ul><li>tps：每秒钟物理设备的 I/O 请求次数</li> <li>rtps：每秒钟从物理设备读入的请求次数</li> <li>wtps：每秒钟向物理设备写入的请求次数</li> <li>bread/s：每秒钟从物理设备读入的数据量，单位为 块/s</li> <li>bwrtn/s：每秒钟从物理设备写入的数据量，单位为 块/s</li></ul> <ol start=\\\"7\\\"><li><code>sar -d -f</code></li></ol> <p>IO监控</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>sar -d -f sa25\\n</code></pre></div><ul><li>tps：每秒钟物理设备的 I/O 请求次数</li> <li>rd_sec/s：每秒读扇区的次数</li> <li>wr_sec/s：每秒写扇区的次数</li> <li>%util: I/O请求占CPU的百分比，比例越大，说明越饱和</li></ul> <h3 id=\\\"评估磁盘读写性能极限\\\"><a href=\\\"#评估磁盘读写性能极限\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 评估磁盘读写性能极限</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\n<span class=\\\"token comment\\\"># 安装fio</span>\\nyum list fio\\nyum <span class=\\\"token function\\\">install</span> fio.x86_64\\n\\n<span class=\\\"token comment\\\"># 执行 fio命令</span>\\nfio -filename<span class=\\\"token operator\\\">=</span>/tmp/test -direct<span class=\\\"token operator\\\">=</span>1 -iodepth 1 -thread -rw<span class=\\\"token operator\\\">=</span>randrw -ioengine<span class=\\\"token operator\\\">=</span>psync -bs<span class=\\\"token operator\\\">=</span>16k -size<span class=\\\"token operator\\\">=</span>2G -numjobs<span class=\\\"token operator\\\">=</span>10 -runtime<span class=\\\"token operator\\\">=</span>30 -group_reporting -name<span class=\\\"token operator\\\">=</span>mytest13\\n\\n<span class=\\\"token comment\\\"># 查看打印结果中的 iops 具体值</span>\\n\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}