{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/object.md?vue&type=template&id=3649eb09&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/object.md","mtime":1537926977692},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"object-对象\\\"><a href=\\\"#object-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object 对象</h1> <h2 id=\\\"object\\\"><a href=\\\"#object\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Object()</h2> <p><code>Object</code>对象本身可以当作一个普通函数调用，也可以当成构造函数调用</p> <p><strong>普通函数调用</strong></p> <p>将任意值转换成对象</p> <ul><li>参数为对象，则直接将参数返回</li> <li>参数为原始类型的值，返回原始类型的包装对象</li> <li>参数为<code>null</code>或者<code>undefined</code>，返回空对象</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// 判断一个值是否为对象</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isObject</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p><strong>构造函数调用</strong></p> <p>生成新的对象，通常使用<code>var a = {}</code></p> <h2 id=\\\"静态方法\\\"><a href=\\\"#静态方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 静态方法</h2> <h3 id=\\\"属性相关\\\"><a href=\\\"#属性相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性相关</h3> <ul><li><code>Object.keys(obj)</code>：返回对象自身的可枚举属性（不包括继承的属性）</li> <li><code>Object.getOwnPropertyNames(obj)</code>：返回对象自身的所有属性（不包括继承的属性，包括不可枚举的属性）</li></ul> <h3 id=\\\"对象属性模型相关\\\"><a href=\\\"#对象属性模型相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象属性模型相关</h3> <ul><li><code>Object.getOwnPropertyDescriptor(obj, key)</code>：返回对象属性描述对象，不包括继承的属性</li> <li><code>Object.defineProperty(Obj, key, options)</code>：定义定义对象上的属性</li> <li><code>Object.defineProperties(obj, props)</code>：定义对象上的多个属性</li></ul> <h3 id=\\\"控制对象状态相关\\\"><a href=\\\"#控制对象状态相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 控制对象状态相关</h3> <ul><li><code>Object.preventExtensions()</code>：禁止对象扩展，调用之后对象不可以增加属性</li> <li><code>Object.isExtensiable()</code>：查询对象是否可扩展</li> <li><code>Object.seal()</code>：禁止对象配置，调用之后对象既不可以增加属性，也不可以删除属性</li> <li><code>Object.isSeal()</code>：查询对象是否可以配置</li> <li><code>Object.freeze()</code>：冻结对象，调用之后，不可以增加删除属性，也不可以改变属性的值</li> <li><code>Object.isFrozen()</code>：查询对象是否已经冻结</li></ul> <h3 id=\\\"原型链相关\\\"><a href=\\\"#原型链相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型链相关</h3> <ul><li><code>Object.create()</code>：指定原型对象和属性，返回一个新的对象</li> <li><code>Object.getPropertyOf()</code>：获取对象的原型的标准方法</li> <li><code>Object.setPropertyOf(obj, prototype)</code>：设置对象的原型，返回参数对象</li></ul> <p><strong>Object.create()</strong></p> <p>接受一个对象作为第一个参数，以它为原型，返回一个实例对象，可以通过<code>Object.create()</code>方法从一个实例对象创造另一个实例对象，新对象完全继承参数对象的属性</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// 下面三种写法是等价的</span>\\n<span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">var</span> obj3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>可以接受第二个参数，为属性描述对象，添加的属性作为生成实例对象自身的属性</p> <h2 id=\\\"实例方法\\\"><a href=\\\"#实例方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例方法</h2> <ul><li><code>Object.prototype.valueOf()</code>：返回当前对象的值</li> <li><code>Object.prototype.toString()</code>：返回当前对象字符串表现形式</li> <li><code>Object.prototype.toLocalString()</code>：返回当前对象本地字符串表现形式</li> <li><code>Object.prototype.hasOwnProperty(key)</code>：返回当前对象是含有有某个属性，包括自身的和继承的属性，包括不可枚举的属性，包括<code>Symbol</code>键名的属性</li> <li><code>Object.prototype.isPrototypeOf(obj)</code>：判断当前对象是否为参数对象的原型</li> <li><code>Object.prototype.PropertyIsEnumerable()</code>：判断对象某个属性是否可以枚举</li></ul> <h2 id=\\\"实例属性\\\"><a href=\\\"#实例属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例属性</h2> <ul><li><code>Object.prototype.__proto__</code>：指向当前对象的原型，也就是构造函数的<code>prototype</code>属性，可读写，前后下划线表示该属性为内部属性，建议使用<code>Object.getPrototypeOf()</code>和<code>Object.setPrototypeOf()</code>进行对象原型的操作</li></ul> <h2 id=\\\"in-运算符和-for-in-循环\\\"><a href=\\\"#in-运算符和-for-in-循环\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> in 运算符和 for...in 循环</h2> <p>可以使用<code>in</code>运算符检查对象是否含有某个属性（自身的，继承的，不可枚举的）</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token string\\\">'length'</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">// true</span>\\n</code></pre></div><p><code>for...in</code>循环可以遍历对象的所有可枚举属性（自身的，继承的）</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'jack'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nobj<span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">12</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// &quot;age&quot;</span>\\n<span class=\\\"token comment\\\">// &quot;name&quot;</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}