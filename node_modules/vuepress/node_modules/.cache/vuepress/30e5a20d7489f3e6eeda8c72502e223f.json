{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/event/eventtarget.md?vue&type=template&id=ec9405a6&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/event/eventtarget.md","mtime":1537926977690},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"eventtarget-接口\\\"><a href=\\\"#eventtarget-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventTarget 接口</h1> <p>DOM 事件的操作（监听和触发），都定义在了<code>EventTarget</code>接口，所有的节点对象都部署了这个接口，其他一些需要事件通信的接口，例如<code>XMLHttpRequest</code>,<code>AudioNode</code>,<code>AudioContext</code>也都部署了这个接口，该接口实例主要有以下三个方法：</p> <ul><li><code>addEventListener()</code>: 绑定事件的监听函数</li> <li><code>removeEventListener()</code>: 移除时间的监听函数</li> <li><code>dispatchEvent()</code>: 触发事件</li></ul> <h2 id=\\\"eventtarget-addeventlistener\\\"><a href=\\\"#eventtarget-addeventlistener\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventTarget.addEventListener()</h2> <p>作用在当前节点或者对象上面，定义一个特定事件的监听函数，一旦事件触发，就会执行监听函数，该方法接受三个参数：</p> <ul><li><code>name</code>:  事件名称</li> <li><code>listener</code>: 监听函数</li> <li><code>useCapture</code>: 布尔值，表示事件是否在捕获阶段触发，默认为<code>false</code>，监听函数只在冒泡阶段触发</li></ul> <p>第二个参数除了是监听函数为，还可以是一个具有<code>handleEvent</code>方法的对象</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>element<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">handleEvent</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>第三个参数除了是布尔值之外，还可以是一个属性配置对象，该对象有以下属性</p> <ul><li><code>capture</code>: 布尔值，表示该事件是否在捕获阶段触发监听函数</li> <li><code>once</code>: 布尔值，表示监听函数是否只触发一次，然后自动移除</li> <li><code>passive</code>: 布尔值，表示监听函数不会调用事件的<code>preventDefault()</code>方法，如果监听函数调用了，浏览器将忽略，并输出警告</li></ul> <p>可以为同一个事件添加多个不同的监听函数，按照添加的顺序触发。如果为同一个事件多次添加同一个监听函数，则只会执行一次</p> <h2 id=\\\"eventtarget-removeeventlistener\\\"><a href=\\\"#eventtarget-removeeventlistener\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventTarget.removeEventListener()</h2> <p>参数和<code>EventTarget.addEventListener()</code>一样，移除事件的监听</p> <h2 id=\\\"eventtarget-dispatchevent\\\"><a href=\\\"#eventtarget-dispatchevent\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventTarget.dispatchEvent()</h2> <ul><li>在当前节点触发指定事件，从而触发回调函数，该方法返回一个布尔值，只要有一个监听函数调用了<code>Event.preventDefault()</code>方法，返回<code>false</code>，否则返回<code>true</code>。</li> <li><code>dispatchEvent()</code>方法的参数是一个<code>Event</code>实例。</li> <li>如果<code>dispatchEvent()</code>方法的参数为空，或者不是一个有效的事件对象，则报错</li></ul> <h2 id=\\\"参考\\\"><a href=\\\"#参考\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://wangdoc.com/javascript/events/eventtarget.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"网道（WangDoc.com）是一个文档网站，提供互联网开发文档\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}