{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/module.md?vue&type=template&id=49fb6d0a&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/module.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"module-的语法\\\"><a href=\\\"#module-的语法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Module 的语法</h1> <h2 id=\\\"概述\\\"><a href=\\\"#概述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概述</h2> <p>为了使 JavaScript 有模块体系，将各个功能拆分成小模块，在用简单的方法拼装起来</p> <h2 id=\\\"与-commonjs-比较\\\"><a href=\\\"#与-commonjs-比较\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 与 CommonJS 比较</h2> <ul><li>ES6 模块采用编译时加载， CommonJS 是运行时加载</li> <li>ES6 采用按需加载，只加载需要的属性， CommonJS 将模块作为一个对象全部加载</li></ul> <h2 id=\\\"严格模式\\\"><a href=\\\"#严格模式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 严格模式</h2> <p>ES6 模块自动采用严格模式，主要有以下限制</p> <ol><li>变量必须申明后使用</li> <li>函数的参数不能有同名属性，否则报错</li> <li>不能使用<code>with</code>语句</li> <li>不能对只读对象赋值，否则报错</li> <li>必能使用前缀 0 表示八进制数，否则报错</li> <li>不能删除不可删除属性，否则报错</li> <li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li> <li><code>eval</code>不会在外层作用域引入变量</li> <li><code>eval</code>和<code>arguments</code>不能被赋值\\n10.<code>arguments</code>不能反映参数的动态变化</li> <li>不能使用<code>arguments.callee</code></li> <li>不能使用<code>arguments.caller</code></li> <li>禁止<code>this</code> 指向全局对象</li> <li>不能使用<code>fn.caller()</code>和<code>fn.arguments</code>来获取函数调用的堆栈</li> <li>增加了保留字，（比如<code>protected</code>,<code>static</code>,<code>interface</code>）</li></ol> <h2 id=\\\"export-命令和-import命令\\\"><a href=\\\"#export-命令和-import命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> export 命令和 import命令</h2> <ul><li>模块主要由两个命令构成 <code>export</code>,<code>import</code>。<code>export</code>规定模块对外的借口，<code>import</code>主要用于输入其他模块的功能</li></ul> <h3 id=\\\"export\\\"><a href=\\\"#export\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> export</h3> <p>模块内部可以直接通过<code>export</code>关键字输出模块内部定义的变量和方法</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> bar<span class=\\\"token punctuation\\\">,</span> foo <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p><code>export</code>输出的变量名不变，可以通过<code>as</code>重命名</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> bar <span class=\\\"token keyword\\\">as</span> a <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p><code>export</code>输出的值与 module 内部变量的是关联的，这一点与 CommonJS 完全不同， CommonJS 输出的值是模块内部值的拷贝</p> <p><strong>import</strong></p> <p><code>import</code>命令接受一对大括号，里面接受导入的变量名，必须与导出的变量名相同</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> bar<span class=\\\"token punctuation\\\">,</span> foo <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./config.js'</span>\\n</code></pre></div><p><code>import</code>输入的变量都是只读的，不可改写</p> <p>如果重复执行多次同一条<code>import</code>语句，那么只会执行一次，也就是说，<code>import</code>语句是 Singleton 模式</p> <p><code>import</code>命令有提升效果</p> <p><strong>模块的整体加载</strong></p> <p>ES6 模块机制可以通过星号<code>*</code>实现模块的整体加载</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> myModule <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./myModule.js'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"export-default-命令\\\"><a href=\\\"#export-default-命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> export default 命令</h2> <p>为模块指定默认输出</p> <p>使用<code>export default</code>的输出不需要使用<code>{}</code>引入</p> <p>因为输出的时候不需要指定名称，引入的时候可以随意命令</p> <div class=\\\"language-javasript extra-class\\\"><pre class=\\\"language-text\\\"><code>// myModule.js\\nexport default function hello() {\\n  console.log('hello world')\\n}\\n</code></pre></div><div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> p <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./myModule.js'</span>\\n<span class=\\\"token function\\\">p</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// &quot;hello word&quot;</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}