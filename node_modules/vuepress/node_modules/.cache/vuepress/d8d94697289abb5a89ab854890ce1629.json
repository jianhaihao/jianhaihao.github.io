{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/wrapper.md?vue&type=template&id=7c7ee538&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/wrapper.md","mtime":1537933948863},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"wrapper-包装对象\"><a class=\"header-anchor\" href=\"#wrapper-包装对象\" aria-hidden=\"true\">#</a> wrapper 包装对象</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\" aria-hidden=\"true\">#</a> 概述</h2>\n<p>JavaScript 三种基本数据类型，布尔值、字符串、数值，在一定情况下会自动转化为对象，也就是包装对象</p>\n<p>所谓包装对象，也就是分别与布尔值、字符串、数值对应的<code>Boolean</code>、<code>String</code>、<code>Number</code>对象，这三个原生对象可以把原始数据类型的值包装成对象使用</p>\n<p>JavaScript 这么做的目的是为了践行一切事物可以当作对象处理的思想，可以用处理对象的思维处理任何变量</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 也可以去掉 new 生成包装对象</span>\n<span class=\"token keyword\">var</span> v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> v2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> v3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\nv1 <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// false</span>\nv2 <span class=\"token operator\">===</span> <span class=\"token string\">'hello word'</span> <span class=\"token comment\">// false</span>\nv3 <span class=\"token operator\">===</span> <span class=\"token number\">123</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"实例方法\"><a class=\"header-anchor\" href=\"#实例方法\" aria-hidden=\"true\">#</a> 实例方法</h2>\n<p>从 <code>Object</code> 对象继承而来</p>\n<p><strong>valueOf()</strong></p>\n<p>返回包装对象原始的值</p>\n<p><strong>toString()</strong></p>\n<p>返回包装对象的字符串表达形式</p>\n<h2 id=\"原始类型与实例对象的自动转换\"><a class=\"header-anchor\" href=\"#原始类型与实例对象的自动转换\" aria-hidden=\"true\">#</a> 原始类型与实例对象的自动转换</h2>\n<p>对于原始类型的值，JavaScript 会自动将其转换为包装对象，可直接使用包装对象的属性和方法</p>\n<p>举个🌰</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\na<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>a</code>变量是一个字符串，它本身是没有任何属性和方法，在执行的过程中，JavaScript 引擎会将<code>a</code>变量转化成一个<code>String</code>类型的包装对象，<code>String</code>对象包含很多可以操作字符串的方法和属性，所以可以直接使用<code>a.length</code></p>\n<ul>\n<li>可以通过在包装对象的<code>prototype</code>属性上面添加自定义方法和属性，与之对应的基本数据类型的变量就可以使用自定义的方法和属性</li>\n</ul>\n</div>\n",null]}