{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/console.md?vue&type=template&id=306f1140&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/console.md","mtime":1537933948875},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"console\\\"><a href=\\\"#console\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> console</h1> <blockquote><p>提供一个简单的控制台,类似于 Web 浏览器提供的 JavaScript 控制台</p></blockquote> <p>包含两个组件</p> <ul><li>Console 类,包含<code>console.log()</code>、<code>console.error()</code>、<code>console.warn()</code>等方法,可以被写入任何的 Node 流</li> <li>全局的<code>console</code>实例,可被用于写入到<code>process.stdout</code>和<code>process.stderr</code></li></ul> <h2 id=\\\"console-类\\\"><a href=\\\"#console-类\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Console 类</h2> <p>可通过 Console 类创建一个简单的可配置输出流的记录器,可通过<code>require('console').Console</code>或者<code>console.Console</code>使用</p> <p><strong>new Console(stdout[,stderr[,ignoreErrors]])</strong></p> <p><strong>new Console(options)</strong></p> <ul><li><code>options</code> <ul><li><code>stdout</code>正常输出流</li> <li><code>stderr</code>错误和警告输出流,不提供则使用<code>stdout</code></li> <li><code>ignoreErrors</code>是否忽略错误输出流</li> <li><code>colorMode</code>输出的颜色模式</li></ul></li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createWriteStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./stdout.log'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> errorOutput <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createWriteStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./stderr.log'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> logger <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Console</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> stdout<span class=\\\"token punctuation\\\">:</span> output<span class=\\\"token punctuation\\\">,</span> stderr<span class=\\\"token punctuation\\\">:</span> errorOutput <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\nlogger<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'count: %d'</span><span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// count: 5</span>\\n</code></pre></div><p>全局的<code>console</code>是一个特殊的<code>Console</code>实例,它的输出流会被送往<code>process.stdout</code>和<code>process.stderr</code>,等价于</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Console</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  stdout<span class=\\\"token punctuation\\\">:</span> process<span class=\\\"token punctuation\\\">.</span>stdout<span class=\\\"token punctuation\\\">,</span>\\n  stderr<span class=\\\"token punctuation\\\">:</span> process<span class=\\\"token punctuation\\\">.</span>stderr<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p><strong>console.clear()</strong></p> <p>清除当前 TTY 的输出</p> <p><strong>console.log()</strong></p> <p>打印到<code>stdout</code>,并带上换行符</p> <p><strong>console.info()</strong></p> <p><code>console.log()</code>的别名</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}