{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\php\\attention.md?vue&type=template&id=6238a301&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\php\\attention.md","mtime":1552483032818},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552483045256},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552483045254},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552483045520}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"php注意事项\"><a class=\"header-anchor\" href=\"#php注意事项\" aria-hidden=\"true\">#</a> PHP注意事项</h1>\n<h2 id=\"尽量静态化\"><a class=\"header-anchor\" href=\"#尽量静态化\" aria-hidden=\"true\">#</a> 尽量静态化</h2>\n<p>如果函数可以静态化，就尽量静态化<br>\n区别主要体现是内存的处理上:<br>\n静态方法在程序开始的时候分配内存，而实例方法在实例化的时候才会分配内存<br>\n静态方法可以直接调用，而实例方法要先生成实例，在通过实例调用</p>\n<blockquote>\n<p>静态方法过多，会占用内存</p>\n</blockquote>\n<h2 id=\"echo-vs-print\"><a class=\"header-anchor\" href=\"#echo-vs-print\" aria-hidden=\"true\">#</a> echo VS print</h2>\n<p>echo的性能高于print，因为echo没有返回值，而print返回一个整型</p>\n<blockquote>\n<p>echo 大字符串的时候需要在服务器进行对应的配置</p>\n</blockquote>\n<h2 id=\"echo-多个字符串\"><a class=\"header-anchor\" href=\"#echo-多个字符串\" aria-hidden=\"true\">#</a> echo 多个字符串</h2>\n<p>echo 多个字符串是采用<code>,</code>代替<code>.</code>来连接字符串</p>\n<h2 id=\"错误屏蔽\"><a class=\"header-anchor\" href=\"#错误屏蔽\" aria-hidden=\"true\">#</a> @ 错误屏蔽</h2>\n<p>用 @ 掩盖错误会降低脚本运行速度，特别是不要在循环中使用@</p>\n<h2 id=\"row-‘id’-row-id-row-1\"><a class=\"header-anchor\" href=\"#row-‘id’-row-id-row-1\" aria-hidden=\"true\">#</a> $row[‘id’] &amp; $row[id] &amp; $row[1]</h2>\n<p><code>'id'</code>会直接查找key为<code>'id'</code>的值，而没有引号如变量、常量在解析的时候会先判断类型在取值</p>\n<h2 id=\"isset-empty\"><a class=\"header-anchor\" href=\"#isset-empty\" aria-hidden=\"true\">#</a> isset() &amp; empty()</h2>\n<p>isset()是测试变量是否被赋值<br>\nempty()是测试变量是否为空，该变量已经赋值。如果变量没被赋值就引用是被允许的,但会有notice提示</p>\n<p>如果变量被赋予空值 <code>$t = &quot;&quot;;</code> <code>$t = 0;</code> <code>$t = false;</code>，<code>empty($t)</code>返回真，<code>isset($t)</code>也返回真<br>\n如果要注销一个变量采用 <code>unset($t)</code> <code>$t = NULL</code></p>\n<h2 id=\"循环前确认最大次数\"><a class=\"header-anchor\" href=\"#循环前确认最大次数\" aria-hidden=\"true\">#</a> 循环前确认最大次数</h2>\n<p>在执行for循环前确认最大字数，不要每次循环的时候都重新计算最大值</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># 不要这样做</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span>0<span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;=</span>count<span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span>++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 应该这样做</span>\n<span class=\"token variable\">$len</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span>0<span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;=</span><span class=\"token variable\">$len</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span>++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"不要随便复制变量\"><a class=\"header-anchor\" href=\"#不要随便复制变量\" aria-hidden=\"true\">#</a> 不要随便复制变量</h2>\n<p>把变量复制到另一个变量会增加一倍的内存消耗</p>\n<h2 id=\"if-else-switch-case\"><a class=\"header-anchor\" href=\"#if-else-switch-case\" aria-hidden=\"true\">#</a> if else &amp; switch case</h2>\n<p>switch case好于使用多个if，else if语句，并且代码更加容易阅读和维护</p>\n<h3 id=\"并不是事必面向对象\"><a class=\"header-anchor\" href=\"#并不是事必面向对象\" aria-hidden=\"true\">#</a> 并不是事必面向对象</h3>\n<p>面向对象往往开销很大，每个方法和对象的调用都会消耗内存</p>\n<h3 id=\"不要把方法细分得过多\"><a class=\"header-anchor\" href=\"#不要把方法细分得过多\" aria-hidden=\"true\">#</a> 不要把方法细分得过多</h3>\n<p>每个方法的调用都会消耗内存</p>\n<blockquote>\n<p>尽量采用的PHP内置函数<br>\n循环内部不要声明变量，尤其是大变量：对象<br>\n销毁变量释放内存，特别是大的数组<br>\n字符串函数代替正则表达式<br>\nsplit比exploade快</p>\n</blockquote>\n</div>\n",null]}