{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/promise.md?vue&type=template&id=1180dfbb&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/promise.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"promise-对象\\\"><a href=\\\"#promise-对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise 对象</h1> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/promise\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"http://es6.ruanyifeng.com/#docs/promise\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <p>异步解决方案，避免回调地狱，最早有社区提出和实现，ES6 将其编入其标准</p> <p>简而言之Promise对象通过引入一个回调而避免更多的回调</p> <p>Promise 对象有以下两个特点</p> <ul><li>对象的状态不受外界影响</li> <li>一旦状态改变，就不会再变，任何时候得到的都是改变之后的结果</li></ul> <p>三个状态</p> <ul><li><code>pending</code>进行中</li> <li><code>fullfilled</code>已成功</li> <li><code>reject</code>已失败</li></ul> <h2 id=\\\"构造函数\\\"><a href=\\\"#构造函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 构造函数</h2> <p>可以直接通过<code>new Promise()</code>构造一个 Promise 对象，接受一个回调函数作为参数，回调函数的参数由<code>JavaScript</code>引擎提供，<code>resolve</code>和<code>reject</code>，用来控制 Promise 进入下一个状态。在回调函数中调用<code>resolve()</code>将 Promise 对象置为<code>fullfiled</code>状态，调用<code>reject()</code>将对象置为<code>rejected</code>状态</p> <h2 id=\\\"promise-prototype-then\\\"><a href=\\\"#promise-prototype-then\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.prototype.then()</h2> <ul><li>第一个参数为<code>resolved</code>状态的回调函数，第二个参数为<code>rejected</code>状态的回调函数</li> <li>返回一个全新的 Promise 实例</li></ul> <h2 id=\\\"promise-prototype-catch\\\"><a href=\\\"#promise-prototype-catch\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.prototype.catch()</h2> <p>用来捕获在构造函数或者<code>then()</code>回调处理里面出现的错误</p> <h2 id=\\\"promise-prototype-finally\\\"><a href=\\\"#promise-prototype-finally\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.prototype,finally</h2> <p><code>finally</code>方法用于不管最后状态如何都会执行的操作，在 ES2018 中引入标准</p> <h2 id=\\\"promise-all\\\"><a href=\\\"#promise-all\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.all()</h2> <p>用于将多个 Promise 对象包装成一个新的Promise实例</p> <p>所有的 Promise 对象状态都变为<code>resolved</code>状态后，新的实例的状态才会变为<code>resolved</code>，只要有一个<code>rejected</code>，新的实例的状态都会变为 <code>rejected</code></p> <h2 id=\\\"promise-race\\\"><a href=\\\"#promise-race\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.race()</h2> <p>和<code>Promise.all()</code>一样，将多个 Promise 对象包装成一个新的 Promise 对象</p> <p><code>race</code> 时比赛的意思，所以这个方法的意思是多个 Promise 对象中谁的状态先改变，新的Promise对象的状态就会跟着改变</p> <h2 id=\\\"promise-resolve\\\"><a href=\\\"#promise-resolve\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.resolve()</h2> <ul><li>将现有的对象转化为 Promise 对象，返回一个状态为<code>resolved</code>状态的Promise对象</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">//相当于</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h2 id=\\\"promise-reject\\\"><a href=\\\"#promise-reject\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.reject()</h2> <ul><li>将现有的对象转化为 Promise 对象，返回一个状态为<code>rejected</code>状态的 Promise 对象</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">//相当于</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h2 id=\\\"promise-try\\\"><a href=\\\"#promise-try\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise.try()</h2>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}