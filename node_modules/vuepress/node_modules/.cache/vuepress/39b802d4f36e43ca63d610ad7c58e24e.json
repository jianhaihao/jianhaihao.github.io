{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\mysql\\colony.md?vue&type=template&id=d4207a00&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\mysql\\colony.md","mtime":1552483032816},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552483045256},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552483045254},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552483045520}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"数据库集群\"><a class=\"header-anchor\" href=\"#数据库集群\" aria-hidden=\"true\">#</a> 数据库集群</h1>\n<h2 id=\"单节点数据库弊端\"><a class=\"header-anchor\" href=\"#单节点数据库弊端\" aria-hidden=\"true\">#</a> 单节点数据库弊端</h2>\n<blockquote>\n<ul>\n<li>大型互联网程序用户群体庞大，架构必须要特殊设计</li>\n<li>无法满足性能上的要求</li>\n<li>没有冗余设计，无法满足高可用</li>\n</ul>\n</blockquote>\n<h2 id=\"常见mysql集群方案\"><a class=\"header-anchor\" href=\"#常见mysql集群方案\" aria-hidden=\"true\">#</a> 常见Mysql集群方案</h2>\n<p><img src=\"/mysql-jq.jpg\" alt=\"/mysql-jq.jpg\">\n<img src=\"/mysql-jq-1.jpg\" alt=\"/mysql-jq-1.jpg\">\n<img src=\"/mysql-jq-2.jpg\" alt=\"/mysql-jq-2.jpg\">\n<img src=\"/mysql-jq-3.jpg\" alt=\"/mysql-jq-3.jpg\">\n<img src=\"/mysql-jq-4.jpg\" alt=\"/mysql-jq-4.jpg\"></p>\n<h2 id=\"创建集群\"><a class=\"header-anchor\" href=\"#创建集群\" aria-hidden=\"true\">#</a> 创建集群</h2>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>\n<span class=\"token comment\"># 拉取 pxc 镜像</span>\ndocker pull percona/percona-xtradb-cluster\n\n<span class=\"token comment\"># 查看已安装的镜像</span>\ndocker images\n\n<span class=\"token comment\">#######################分割线##################################</span>\n\n<span class=\"token comment\"># 修改镜像名称（名称太长，不方便使用，选择性操作）</span>\ndocker tag percona/percona-xtradb-cluster pxc\n<span class=\"token comment\"># 删除旧的镜像</span>\ndocker rmi percona/percona-xtradb-cluster\n<span class=\"token comment\"># 查看已安装的镜像</span>\ndocker images\n\n<span class=\"token comment\">#######################分割线##################################</span>\n\n<span class=\"token comment\">#（出于安全考虑，需要给pxc集群实例创建docker内部网络）</span>\n<span class=\"token comment\"># docker虚拟机自带的网段地址为：172.17.0.XXX</span>\n\n<span class=\"token comment\"># 创建内部网段</span>\ndocker network create net1\n<span class=\"token comment\"># 查看内部网段</span>\ndocker network inspect net1   <span class=\"token comment\"># network可省略</span>\n<span class=\"token comment\"># 删除内部网段</span>\ndocker network <span class=\"token function\">rm</span> net1\n\n<span class=\"token comment\"># 创建指定网段</span>\ndocker network create --subnet<span class=\"token operator\">=</span>172.18.0.0/24 net1\n\n<span class=\"token comment\"># Docker容器使用原则：不要在容器里面保存业务数据！！！</span>\n<span class=\"token comment\"># 要把业务数据保存到宿主机中，使用的技术是目录映射</span>\n\n<span class=\"token comment\"># pxc无法使用映射目录，可以采用docker卷来处理</span>\n\n<span class=\"token comment\"># 容器中的pxc节点映射数据目录的解决办法</span>\ndocker volume create --name v1    <span class=\"token comment\"># --name可省略</span>\n\n<span class=\"token comment\"># 查看数据卷在宿主机的真实路径</span>\ndocker inspect v1\n\n<span class=\"token comment\"># 删除数据卷</span>\ndocker volume <span class=\"token function\">rm</span> v1\n\n<span class=\"token comment\">#######################分割线##################################</span>\n\n<span class=\"token comment\"># 向pxc镜像传入运行参数创建pxc容器</span>\ndocker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_NAME<span class=\"token operator\">=</span>PXC -e XTRABACKUP_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -v v1:/var/lib/mysql --privileged --name<span class=\"token operator\">=</span>node1 --net<span class=\"token operator\">=</span>net1 --ip 172.18.0.2 pxc\n\n<span class=\"token comment\"># 创建第二个容器</span>\ndocker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_NAME<span class=\"token operator\">=</span>PXC -e XTRABACKUP_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_JOIN<span class=\"token operator\">=</span>node1 -v v2:/var/lib/mysql --privileged --name<span class=\"token operator\">=</span>node2 --net<span class=\"token operator\">=</span>net1 --ip 172.18.0.3 pxc\n\n<span class=\"token comment\"># 创建第三个容器</span>\ndocker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_NAME<span class=\"token operator\">=</span>PXC -e XTRABACKUP_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_JOIN<span class=\"token operator\">=</span>node1 -v v3:/var/lib/mysql --privileged --name<span class=\"token operator\">=</span>node3 --net<span class=\"token operator\">=</span>net1 --ip 172.18.0.4 pxc\n\n<span class=\"token comment\"># 创建第四个容器</span>\ndocker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_NAME<span class=\"token operator\">=</span>PXC -e XTRABACKUP_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_JOIN<span class=\"token operator\">=</span>node1 -v v4:/var/lib/mysql --privileged --name<span class=\"token operator\">=</span>node4 --net<span class=\"token operator\">=</span>net1 --ip 172.18.0.5 pxc\n\n<span class=\"token comment\"># 创建第五个容器</span>\ndocker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_NAME<span class=\"token operator\">=</span>PXC -e XTRABACKUP_PASSWORD<span class=\"token operator\">=</span>yiyun2018 -e CLUSTER_JOIN<span class=\"token operator\">=</span>node1 -v v5:/var/lib/mysql --privileged --name<span class=\"token operator\">=</span>node5 --net<span class=\"token operator\">=</span>net1 --ip 172.18.0.6 pxc\n\n<span class=\"token comment\"># -d 后台运行</span>\n<span class=\"token comment\"># -p [宿主机端口]:[容器端口]  把容器的3306端口映射到宿主机的3306端口</span>\n<span class=\"token comment\"># -v v1:/var/lib/mysql 路径映射，/var/lib/mysql 容器内的目录</span>\n<span class=\"token comment\"># -e MYSQL_ROOT_PASSWORD  参数，创建出的数据库实例的密码（用户名是root，不可修改）</span>\n<span class=\"token comment\"># -e MYSQL_ROOT_PASSWORD  参数，创建出的pxc集群的名字</span>\n<span class=\"token comment\"># -e MYSQL_ROOT_PASSWORD  参数，数据库节点之间同步使用的密码</span>\n<span class=\"token comment\"># -e CLUSTER_JOIN  参数，和第一个节点容器进行同步</span>\n\n\n\n\n\n\n\n\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}