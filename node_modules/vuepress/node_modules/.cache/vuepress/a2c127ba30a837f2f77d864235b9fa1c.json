{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/event/eventtarget.md?vue&type=template&id=3dc94ab5&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/event/eventtarget.md","mtime":1537944817430},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"eventtarget-接口\"><a class=\"header-anchor\" href=\"#eventtarget-接口\" aria-hidden=\"true\">#</a> EventTarget 接口</h1>\n<p>DOM 事件的操作（监听和触发），都定义在了<code>EventTarget</code>接口，所有的节点对象都部署了这个接口，其他一些需要事件通信的接口，例如<code>XMLHttpRequest</code>,<code>AudioNode</code>,<code>AudioContext</code>也都部署了这个接口，该接口实例主要有以下三个方法：</p>\n<ul>\n<li><code>addEventListener()</code>: 绑定事件的监听函数</li>\n<li><code>removeEventListener()</code>: 移除时间的监听函数</li>\n<li><code>dispatchEvent()</code>: 触发事件</li>\n</ul>\n<h2 id=\"eventtarget-addeventlistener\"><a class=\"header-anchor\" href=\"#eventtarget-addeventlistener\" aria-hidden=\"true\">#</a> EventTarget.addEventListener()</h2>\n<p>作用在当前节点或者对象上面，定义一个特定事件的监听函数，一旦事件触发，就会执行监听函数，该方法接受三个参数：</p>\n<ul>\n<li><code>name</code>:  事件名称</li>\n<li><code>listener</code>: 监听函数</li>\n<li><code>useCapture</code>: 布尔值，表示事件是否在捕获阶段触发，默认为<code>false</code>，监听函数只在冒泡阶段触发</li>\n</ul>\n<p>第二个参数除了是监听函数为，还可以是一个具有<code>handleEvent</code>方法的对象</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleEvent</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>第三个参数除了是布尔值之外，还可以是一个属性配置对象，该对象有以下属性</p>\n<ul>\n<li><code>capture</code>: 布尔值，表示该事件是否在捕获阶段触发监听函数</li>\n<li><code>once</code>: 布尔值，表示监听函数是否只触发一次，然后自动移除</li>\n<li><code>passive</code>: 布尔值，表示监听函数不会调用事件的<code>preventDefault()</code>方法，如果监听函数调用了，浏览器将忽略，并输出警告</li>\n</ul>\n<p>可以为同一个事件添加多个不同的监听函数，按照添加的顺序触发。如果为同一个事件多次添加同一个监听函数，则只会执行一次</p>\n<h2 id=\"eventtarget-removeeventlistener\"><a class=\"header-anchor\" href=\"#eventtarget-removeeventlistener\" aria-hidden=\"true\">#</a> EventTarget.removeEventListener()</h2>\n<p>参数和<code>EventTarget.addEventListener()</code>一样，移除事件的监听</p>\n<h2 id=\"eventtarget-dispatchevent\"><a class=\"header-anchor\" href=\"#eventtarget-dispatchevent\" aria-hidden=\"true\">#</a> EventTarget.dispatchEvent()</h2>\n<ul>\n<li>在当前节点触发指定事件，从而触发回调函数，该方法返回一个布尔值，只要有一个监听函数调用了<code>Event.preventDefault()</code>方法，返回<code>false</code>，否则返回<code>true</code>。</li>\n<li><code>dispatchEvent()</code>方法的参数是一个<code>Event</code>实例。</li>\n<li>如果<code>dispatchEvent()</code>方法的参数为空，或者不是一个有效的事件对象，则报错</li>\n</ul>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考</h2>\n<p><a href=\"https://wangdoc.com/javascript/events/eventtarget.html\" target=\"_blank\" rel=\"noopener noreferrer\">网道（WangDoc.com）是一个文档网站，提供互联网开发文档<OutboundLink/></a></p>\n</div>\n",null]}