{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/events.md?vue&type=template&id=4cb00910&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/events.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"events-事件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#events-事件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" events 事件\")]),_vm._v(\" \"),_c('p',[_vm._v(\"大多数 Node 核心的 API 都采用异步事件驱动的架构，一般通过触发命名事件来调用函数对象\")]),_vm._v(\" \"),_c('p',[_vm._v(\"所有触发事件的对象都是\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"对象的实例。这些对象开放了一个\"),_c('code',[_vm._v(\"emitEvent.on()\")]),_vm._v(\"函数，允许将一个或者多个回调函数绑定在会被对象触发的命名事件上\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当事件触发时，所有绑定在该事件的函数都被同步的调用，监听器的返回值会被丢弃\")]),_vm._v(\" \"),_c('p',[_vm._v(\"一个绑定了监听器的\"),_c('code',[_vm._v(\"eventEmitter\")]),_vm._v(\"实例，通过\"),_c('code',[_vm._v(\"eventEmitter.on()\")]),_vm._v(\"来注册事件，\"),_c('code',[_vm._v(\"eventEmitter.emit()\")]),_vm._v(\"来触发事件\")]),_vm._v(\" \"),_c('p',[_vm._v(\"一个标准的事件注册和触发\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-javascript extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-javascript\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" events \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'events'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"class\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token class-name\"}},[_vm._v(\"eventEmitter\")]),_vm._v(\" extend events \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" myEmitter \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"new\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token class-name\"}},[_vm._v(\"eventEmiiter\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nmyEmitter\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"on\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'events'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"str\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"str\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nmyEmitter\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"emit\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'hello word'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// hello world\")]),_vm._v(\"\\n\")])])]),_c('h2',{attrs:{\"id\":\"给监听器传入参数与-this\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#给监听器传入参数与-this\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 给监听器传入参数与 this\")]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"EventEmitter.emit()\")]),_vm._v(\"方法允许将任意参数传递给监听器，监听器的\"),_c('code',[_vm._v(\"this\")]),_vm._v(\"指向\"),_c('code',[_vm._v(\"eventEmit\")]),_vm._v(\"对象\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"异步与同步\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#异步与同步\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 异步与同步\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当一个事件触发时，\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"会按照监听器注册的时间顺序同步的被调用，如果想要被异步调用，可以将其放入\"),_c('code',[_vm._v(\"setImmediate()\")]),_vm._v(\"或者\"),_c('code',[_vm._v(\"process.nextTick()\")]),_vm._v(\"方法的回调函数中\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-javascript extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-javascript\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" myEmitter \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"new\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token class-name\"}},[_vm._v(\"MyEmitter\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\nmyEmitter\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"on\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'event'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"a\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" b\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"setImmediate\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'这个是异步发生的'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\nmyEmitter\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"emit\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'event'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'a'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'b'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])]),_c('h2',{attrs:{\"id\":\"事件只处理一次\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#事件只处理一次\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 事件只处理一次\")]),_vm._v(\" \"),_c('p',[_vm._v(\"使用\"),_c('code',[_vm._v(\"EventEmitter.once()\")]),_vm._v(\"可以注册一个只能被调用一次的监听器，当被监听的事件触发的时候，监听器会被注销，然后再调用\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"错误处理\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#错误处理\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 错误处理\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"中发生错误的时候，会触发一个\"),_c('code',[_vm._v(\"error\")]),_vm._v(\"事件，所以始终为\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"注册一个\"),_c('code',[_vm._v(\"error\")]),_vm._v(\"监听器是一个最佳实践\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"eventemitter-类\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#eventemitter-类\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" EventEmitter 类\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当为\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"添加一个新监听的时候，会触发一个\"),_c('code',[_vm._v(\"newListener\")]),_vm._v(\"事件，当监听器被移除的时候，会触发\"),_c('code',[_vm._v(\"removeListener\")]),_vm._v(\"事件\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"newListener 事件\")])]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"EventListener\")]),_vm._v(\"实例在将一个监听器添加到内部监听器数组之前会触发自身的\"),_c('code',[_vm._v(\"newListener\")]),_vm._v(\"事件，事件名和回调函数会作为参数传入监听\"),_c('code',[_vm._v(\"newListener\")]),_vm._v(\"事件的监听器中\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"removeListener 事件\")])]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"removeListener\")]),_vm._v(\"事件在监听器被移除后触发\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"静态属性\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#静态属性\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 静态属性\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"EventEmitter.defaultMaxListeners\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"每个事件默认可以注册 10 个监听器\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"单个\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"实例可以通过\"),_c('code',[_vm._v(\"setMaxListener(n)\")]),_vm._v(\"来改变\")]),_vm._v(\" \"),_c('li',[_vm._v(\"所有的\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"实例每个事件最大监听器数量可以通过\"),_c('code',[_vm._v(\"EventEmitter.defaultMaxListeners\")]),_vm._v(\"属性改变\")])]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"实例方法\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#实例方法\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 实例方法\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.addLisnter(evnetName, listener)\")])]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"EventEmiter.on()\")]),_vm._v(\"的别名\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.emit(eventName)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"按照监听器的注册顺序，同步调用每个注册到\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的监听器，如果有监听器返回\"),_c('code',[_vm._v(\"true\")]),_vm._v(\"，没有放回\"),_c('code',[_vm._v(\"false\")])]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.eventNames()\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"返回触发器已经注册监听器的事件名称的名称\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.getMaxListeners()\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"返回\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"实例一个事件最多可以注册的监听器数量\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.listenerCount(eventName)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"返回正在监听名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"监听器的数量\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.listeners(eventName)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"返回名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的事件的监听器的数组副本\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.off(eventName)\")])]),_vm._v(\" \"),_c('p',[_c('code',[_vm._v(\"emitter.removeListener\")]),_vm._v(\"的别名\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.on(eventName, listener)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"注册一个名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的事件\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.once(eventName, listener)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"添加一个单次\"),_c('code',[_vm._v(\"listener\")]),_vm._v(\"函数到名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的事件的监听器，下次触发\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"之后，该监听器会被移除，再调用\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.prependListener(eventName, listener)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"添加\"),_c('code',[_vm._v(\"listener\")]),_vm._v(\"函数到名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的事件监听器数组的开头，返回一个\"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\"实例，可以链式调用\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.prependOnceListener(eventName, listener)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"添加一个单次\"),_c('code',[_vm._v(\"listener\")]),_vm._v(\"监听器到名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的事件的监听器数组的开头，下次触发\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"之后，该监听器会被移除，再调用\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.removeAllListeners(eventName)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"移除全部或指定名称的监听器\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.removeListener(eventName, listener)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"从名为\"),_c('code',[_vm._v(\"eventName\")]),_vm._v(\"的事件的监听器数组中移除\"),_c('code',[_vm._v(\"listener\")])]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"emitter.setMaxListeners(n)\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"设置一个事件的最大监听器数量\")])])}]\n\nexport { render, staticRenderFns }"]}