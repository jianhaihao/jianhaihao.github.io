{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/storage.md?vue&type=template&id=2a8e65c9&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/bom/storage.md","mtime":1537933948859},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"storage-接口\\\"><a href=\\\"#storage-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Storage 接口</h1> <p><code>Storage</code>接口脚本在浏览器保存数据，<code>LocalStorage</code>和<code>SessionStorage</code>实现了这个接口，<code>LocalStorage</code>的数据会长期存在，<code>SessionStorage</code>的数据在窗口关闭之后被清除</p> <h2 id=\\\"属性和方法\\\"><a href=\\\"#属性和方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性和方法</h2> <p><strong>Storage.length</strong></p> <p>返回保存数据的个数</p> <p><strong>Storage.setItem(key, value)</strong></p> <p>保存一对数据</p> <p><strong>Storage.getItem(key)</strong></p> <p>获取保存的数据</p> <p><strong>Storage.clear()</strong></p> <p>清除所有数据</p> <p><strong>Storage.removeItem(key)</strong></p> <p>移除一项数据</p> <p><strong>Storage.key(index)</strong></p> <p>返回位于<code>index</code>位置的数据</p> <h2 id=\\\"storage-事件\\\"><a href=\\\"#storage-事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> storage 事件</h2> <p>当 Storage 发生变化时，会触发<code>Storage</code>事件，回调函数接受一个<code>Event</code>对象作为参数，该对象有以下几个参数</p> <ul><li><code>key</code>：发生变动的键名</li> <li><code>newValue</code>：新的键值</li> <li><code>oldValue</code>：旧的键值</li> <li><code>storageArea</code>：键值所在的对象</li> <li><code>url</code>：触发<code>Storage</code>的事件网页的网址</li></ul> <p>该事件有一个特别的地方，当前页面发生的变动不会触发该事件，只有当打开同源的另一个窗口的 Storage 发生变化的时候，当前窗口的<code>storage</code>事件才会被触发</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}