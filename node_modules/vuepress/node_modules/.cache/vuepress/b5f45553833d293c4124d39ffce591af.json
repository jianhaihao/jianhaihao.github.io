{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/computer-basic/unicode.md?vue&type=template&id=57e6b224&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/computer-basic/unicode.md","mtime":1537926977685},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"unicode-理解\\\"><a href=\\\"#unicode-理解\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Unicode 理解</h1> <h2 id=\\\"发展历史\\\"><a href=\\\"#发展历史\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 发展历史</h2> \"),_vm._ssrNode(\"<h3 id=\\\"ascii-码-ascii-码对照表\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#ascii-码-ascii-码对照表\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ASCII 码 \"),_vm._ssrNode(\"<a href=\\\"http://www.asciitable.com\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Ascii 码对照表\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <ul><li>利用<code>8</code>个可以开关的晶体管表示不同的状态，可以组合出来的状态总共有<code>2^8</code>，也就是<code>256</code>种状态，十六进制表示为<code>0x00 ~ 0xFF</code>，</li> <li>从<code>0(0x00)</code>开始的<code>32(0x10)</code>种状态 规定特殊用途，比如换行(<code>0x10</code>)，嘟嘟声(<code>0x07</code>)，后来继续编写到<code>127(0x7F)</code>号表示所有的字母数字和标点，后来这种编码被称为 ASCII(American Standard Code for Information Interchange 美国信息互换标准代码) 编码</li> <li>后来为了满足一些西方国家的需求，继续把后面的<code>128(0x80) ～ 255(0xFF)</code>继续进行编码，形成了 ASCII 码的<code>扩展字符集</code>，至此，一个字节<code>8</code>位所能表示的状态全部被使用完。</li></ul> <h3 id=\\\"gb2312\\\"><a href=\\\"#gb2312\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> GB2312</h3> <ul><li>小于<code>127</code>的字节还是和原来表示的意义一样，大于<code>127</code>的编码全部干掉</li> <li>两个大于<code>127</code>的字节组成一个汉字，分为高低字节，高字节使用<code>0xA1 ~ 0xF7</code>，低字节使用<code>0xA1 ~ 0xFE</code>，可以组合出<code>86 * 93</code>，<code>7998</code>种情况，包括了 7000 多个简体汉字，数学符号，罗马希腊的字母，日文的假名，并称之为 <code>全角</code> 字符，占用两个字节，小于<code>127</code>的字叫做<code>半角</code>字符，占用一个字节</li></ul> <h3 id=\\\"gbk-gb18030\\\"><a href=\\\"#gbk-gb18030\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> GBK, GB18030</h3> <p>由于中国文化的博大精深，我们又把繁体字的编码也加了进来，规定只要第一个字节的码大于<code>127</code>，就表示一个汉字的开始，不用后面一个字节值要大于<code>127</code>，这种编码集称之为<code>GBK</code>编码集；后来又增加了一些少数名族的字符，扩展称为了<code>GB18030</code>字符集</p> <h3 id=\\\"dbsc\\\"><a href=\\\"#dbsc\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> DBSC</h3> <p>上面 GB 相关字符集后来统称为 <code>DBSC (Double Byte Charecter Set) 双字节字符集</code>，认为只要有字节值是大于 <code>127</code> 字节出现，就代表一个汉字。这套标准的特点是把一个字节长的英文字符和两个字节长的中文字符统一到了一个字符集里面；然后就出现了后来的 <code>一个汉字占两个字节，一个英文占一个字节</code> 的必背知识</p> <h2 id=\\\"标准化，unicode-的出现\\\"><a href=\\\"#标准化，unicode-的出现\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标准化，Unicode 的出现</h2> <p>由于各个地区的语言的差异，后来导致了很多字符编码规范，后来一个叫做<code>ISO</code>的国际组织决定着手解决这个问题，决定废掉所有的地方编码规范，新建一个叫做<code>Universal Multiple-Octet Coded Character Set</code>，简称<code>USC</code>，俗称<code>Unicode</code></p> <ul><li>一个字符统一使用两个字节表示，<code>ASCII</code>编码保持不变，只是在高位字节补 8 个 0</li> <li><code>字符</code>是文化相关符号，<code>字节</code>是一个 8 位的物理存贮单元</li></ul> <h3 id=\\\"unicode-的问题\\\"><a href=\\\"#unicode-的问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Unicode 的问题</h3> <ul><li>空间浪费</li> <li>不能和 ASCII 码区分开来</li></ul> <h3 id=\\\"utf-8-utf-16\\\"><a href=\\\"#utf-8-utf-16\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> UTF-8, UTF-16</h3> <p>为了解决 unidcode 在网络空间传输空间浪费的问题，出现了 UTF(UCS Transfer Fommat) 标准</p> <ul><li>UTF-8 一次使用 8 个位传输数据，使用变长的编码方式，会采用 1-4 个字节来表示一个字符，英文字符采用 1 个字节，中文字符则采用 3 个字节</li> <li>UTF-16 一次使用 16 个位传输数据</li></ul> <h2 id=\\\"参考\\\"><a href=\\\"#参考\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://www.zhihu.com/question/23374078\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"参考\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}