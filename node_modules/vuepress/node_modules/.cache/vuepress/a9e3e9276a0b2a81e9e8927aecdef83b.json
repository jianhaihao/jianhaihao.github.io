{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/array.md?vue&type=template&id=3cd04094&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/array.md","mtime":1537933948864},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"数组的扩展-2-5\\\"><a href=\\\"#数组的扩展-2-5\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组的扩展(2.5)</h1> <h2 id=\\\"扩展运算符\\\"><a href=\\\"#扩展运算符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 扩展运算符 ...</h2> <ul><li><code>rest</code>参数的逆运算</li> <li>可以作为<code>apply</code>函数的替代</li></ul> <p>应用：</p> <ol><li>深复制数组</li> <li>合并数组与解构赋值结合</li> <li>与解构赋值结合</li> <li>将字符串转化为真正的字符数组</li> <li>实现了<code>Iterator</code>接口的对象，可以将类数组对象转化为真正的数组<code>arguments</code>,<code>nodeList</code>字符串都为类数组对象</li> <li><code>Map</code>和<code>Set</code>结构，<code>Generator</code>函数返回的对象，只要使用对象部署了 Iterator 接口，都可以被<code>...</code>遍历，否则报错</li></ol> <h2 id=\\\"array-from\\\"><a href=\\\"#array-from\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Array.from()</h2> <ul><li><code>Array.from</code>可以将两类对象转化为真正的数组：类似数组的对象 (<code>array-like-object</code>) 、可遍历对象 (<code>iterable</code>) ，包括 ES6 新增的<code>Set</code>,<code>Map</code>数据结构</li> <li>也可以对真实数组对象实现完全复制</li> <li>接受第二个参数，类似于数组的<code>map()</code>方法，将每个元素处理后返回，并且能够正确处理 32 位的 UTF-16 字符，可以避免将码点大于<code>0xFFFF</code>的字符当作两个字符的 bug</li></ul> <h2 id=\\\"array-of\\\"><a href=\\\"#array-of\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Array.of()</h2> <ul><li>将一组值转化为数组</li> <li><code>Array()</code>的替代方案，<code>Array.of()</code>总是返回参数值组成的数组，而<code>Array()</code>再无参数，一个参数，多个参数返回的值是不一样的</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\t<span class=\\\"token comment\\\">// [1,2,3]</span>\\n</code></pre></div><h2 id=\\\"数组实例的-copywithin\\\"><a href=\\\"#数组实例的-copywithin\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组实例的 copyWithin()</h2> <ul><li>讲数组内部的数据复制到其他位置，覆盖原有成员</li> <li>接受三个参数<code>target</code>、<code>start</code>、<code>end</code>，写入开始位置、开始读取位置、结束读取位置</li></ul> <h2 id=\\\"数组实例的-find-和-findindex\\\"><a href=\\\"#数组实例的-find-和-findindex\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组实例的 find() 和 findIndex()</h2> <ul><li><code>find()</code>参数为一个回调函数，所有数组成员依次执行该函数，返回第一个符合该条件的成员，没有则返回<code>undefined</code></li> <li><code>findIndex()</code>返回第一个符合条件的成员的位置，如果都不符合，则返回<code>-1</code></li></ul> <h2 id=\\\"数组实例的-fill\\\"><a href=\\\"#数组实例的-fill\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组实例的 fill()</h2> <p>使用给定值填充数组，默认抹掉以前的数组成员</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// [7, 7, 7]</span>\\n</code></pre></div><p>可以用于数组的初始化，接受第二个参数和第三个参数，表示起始位置和结束位置</p> <h2 id=\\\"数组实例的-entries-、-keys-、-values\\\"><a href=\\\"#数组实例的-entries-、-keys-、-values\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组实例的 entries() 、 keys() 、 values()</h2> <p>返回一个遍历器对象，可以利用<code>for...of</code>遍历</p> <h2 id=\\\"数组实例的-includes\\\"><a href=\\\"#数组实例的-includes\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组实例的 includes()</h2> <p>返回一个布尔值，数组是否包含该成员，与字符串的<code>includes()</code>类似，ES2016 引入</p> <h2 id=\\\"数组的空位处理\\\"><a href=\\\"#数组的空位处理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组的空位处理</h2> <ul><li><p>ES5 对于空位的处理\\n*<code>forEach()</code>,<code>filter()</code>,<code>reduce()</code>,<code>every()</code>,<code>some()</code>都会跳过空位\\n*<code>map()</code>会跳过空位，但会保留这个值\\n*<code>join()</code>,<code>toString()</code>,都会讲空位视为<code>undefined</code>,而<code>undefined</code>和<code>null</code>都会被处理成空字符串</p></li> <li><p>ES6 明确将空位转为<code>undefined</code></p> <ul><li><code>Array.from()</code>会将数组的空位转化为<code>undefined</code>，扩展运算符<code>...</code>也是一样</li> <li><code>copyWithin()</code>会连着空位一起拷贝</li> <li><code>fill()</code>会将空位视为正常的数组位置</li> <li><code>for...in</code>遍历也会循环空位</li> <li><code>keys</code>,<code>values()</code>,<code>entries()</code>,<code>find()</code>,<code>findIndex</code>会将空位当作<code>undefined</code>处理</li></ul></li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}