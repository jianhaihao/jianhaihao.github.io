{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/number.md?vue&type=template&id=6d7f7f29&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/number.md","mtime":1537926977696},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"数值的扩展（3）\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#数值的扩展（3）\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 数值的扩展（3）\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"二进制和八进制表示法\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#二进制和八进制表示法\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 二进制和八进制表示法\")]),_vm._v(\" \"),_c('ul',[_c('li',[_vm._v(\"使用前缀0b(0B)表示二进制\")]),_vm._v(\" \"),_c('li',[_vm._v(\"使用前缀0o(0O)表示八进制\")])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"number-isfinite-number-isnan\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#number-isfinite-number-isnan\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Number.isFinite(), Number.isNaN()\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"与全局的\"),_c('code',[_vm._v(\"isFinite()\")]),_vm._v(\"和\"),_c('code',[_vm._v(\"isNaN()\")]),_vm._v(\"相比，这两个方法只对数值做判断，数值之外参数一律返回 \"),_c('code',[_vm._v(\"false\")])])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"全局的\"),_c('code',[_vm._v(\"isFinite()\")]),_vm._v(\"和\"),_c('code',[_vm._v(\"isNaN()\")]),_vm._v(\"方法是先调用\"),_c('code',[_vm._v(\"Number()\")]),_vm._v(\"转化为数值再进行判断\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"number-parseint-number-parsefloat\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#number-parseint-number-parsefloat\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Number.parseInt(), Number.parseFloat()\")]),_vm._v(\" \"),_c('p',[_vm._v(\"用法没有任何变化，\"),_c('code',[_vm._v(\"es6\")]),_vm._v(\" 旨在减少全局性方法，将语言逐渐模块化\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"number-isinteger\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#number-isinteger\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Number.isInteger()\")]),_vm._v(\" \"),_c('p',[_vm._v(\"判断一个数值是否为整数\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"number-epsilon\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#number-epsilon\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Number.EPSILON\")]),_vm._v(\" \"),_c('p',[_vm._v(\"常量，表示\"),_c('code',[_vm._v(\"1\")]),_vm._v(\"与大于\"),_c('code',[_vm._v(\"1\")]),_vm._v(\"的最小浮点数之间的差\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"number-issafeinteger\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#number-issafeinteger\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Number.isSafeInteger()\")]),_vm._v(\" \"),_c('p',[_vm._v(\"判断数值是否在\"),_c('code',[_vm._v(\"Number.MAX_SAFE_INTEGER\")]),_vm._v(\"和\"),_c('code',[_vm._v(\"Number.MIN_SAFE_INTEGER\")]),_vm._v(\"安全范围之间\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"math-对象的扩展\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#math-对象的扩展\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Math 对象的扩展\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('code',[_vm._v(\"Math.trunc()\")]),_vm._v(\"去除一个数的小数部分，返回证书部分\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"Math.sign()\")]),_vm._v(\"判断一个数是正数、负数、还是零\"),_c('code',[_vm._v(\"+1\")]),_vm._v(\",\"),_c('code',[_vm._v(\"-1\")]),_vm._v(\",\"),_c('code',[_vm._v(\"+0\")]),_vm._v(\",\"),_c('code',[_vm._v(\"-0\")]),_vm._v(\",\"),_c('code',[_vm._v(\"NaN\")])]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"Math.cbrt()\")]),_vm._v(\"计算一个数的立方根\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"Math.clz32()\")]),_vm._v(\"返回一个数的32位无符号整数形式有多少个前导0\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"Math.imul()\")]),_vm._v(\"返回两个数以32位带符号整数形式相乘的结果，在进行大精度计算的时候保证可以得到正确的低位数值\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"Math.fround()\")]),_vm._v(\"返回一个数的32位单精度浮点数形式\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"Math.hypot()\")]),_vm._v(\"返回两个数的平方和的平方根\")]),_vm._v(\" \"),_c('li',[_vm._v(\"4个对数运算方法\"),_c('code',[_vm._v(\"Math.expm1()\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.log1p()\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.log10()\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.log2()\")])]),_vm._v(\" \"),_c('li',[_vm._v(\"6个双曲函数方法\"),_c('code',[_vm._v(\"Math.sinh(x)\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.cosh(x)\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.tanh(x)\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.asinh(x)\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.acosh(x)\")]),_vm._v(\",\"),_c('code',[_vm._v(\"Math.atanh(x)\")])]),_vm._v(\" \"),_c('li',[_vm._v(\"指数运算符\"),_c('code',[_vm._v(\"**``2 ** 3 //8\")]),_vm._v(\",\"),_c('code',[_vm._v(\"a **= 2 //等同于 a = a * a\")])])])])}]\n\nexport { render, staticRenderFns }"]}