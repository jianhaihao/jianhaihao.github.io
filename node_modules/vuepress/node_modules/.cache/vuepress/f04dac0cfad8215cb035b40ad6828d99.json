{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/dom.md?vue&type=template&id=0b3080d4&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/dom/dom.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"dom\"><a class=\"header-anchor\" href=\"#dom\" aria-hidden=\"true\">#</a> DOM</h1>\n<blockquote>\n<p>JavaScript 操作网页的接口，全称 Document Object Model(文档对象模型)，JavaScript 可以通过 DOM 接口操作网页，</p>\n</blockquote>\n<h2 id=\"节点\"><a class=\"header-anchor\" href=\"#节点\" aria-hidden=\"true\">#</a> 节点</h2>\n<blockquote>\n<p>DOM 的最小组成单位，有七种类型的节点</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>node</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Document</td>\n<td>文档树的顶层节点</td>\n</tr>\n<tr>\n<td>DocumentType</td>\n<td><code>doctype</code>标签，比如<code>&lt;!DOCTYPE html&gt;</code></td>\n</tr>\n<tr>\n<td>Element</td>\n<td>网页的各种 HTML 标签</td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td>标签的属性</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>标签之间或者标签内部的文本</td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>文档的注释</td>\n</tr>\n<tr>\n<td>DocumentFragment</td>\n<td>文档的片段</td>\n</tr>\n</tbody>\n</table>\n<p>浏览器提供了一个原生的<code>Node</code>对象，上面的节点都继承了该对象，因此具有一些共同的属性和方法</p>\n<h2 id=\"节点树\"><a class=\"header-anchor\" href=\"#节点树\" aria-hidden=\"true\">#</a> 节点树</h2>\n<ul>\n<li>浏览器原生提供<code>document</code>对象，代表整个文档，文档的第一层只有一个<code>&lt;html&gt;</code>标签，作为文档的根结点(root node)，其他的 html 标签都作为它的子节点</li>\n</ul>\n<p>出了根节点外，其他节点互相可以形成三种关系</p>\n<ol>\n<li>父节点关系 (ParentNode): 上一级节点</li>\n<li>子节点关系 (ChildNodes): 下一级节点</li>\n<li>同级节点关系 （sibling）: 同级节点</li>\n</ol>\n<p>DOM 提供操作接口，用来获取三种关系的节点，子节点包括<code>firstChild(第一个字节点)</code>,<code>lastChild(最后一个字节点)</code>,<code>nextSibling(下一个同级节点)</code>,<code>previousSibling(上一个同级节点)</code></p>\n<h2 id=\"node-接口\"><a class=\"header-anchor\" href=\"#node-接口\" aria-hidden=\"true\">#</a> Node 接口</h2>\n<blockquote>\n<p>所有的 DOM 节点对象都继承了 Node 接口</p>\n</blockquote>\n<h3 id=\"属性\"><a class=\"header-anchor\" href=\"#属性\" aria-hidden=\"true\">#</a> 属性</h3>\n<h4 id=\"node-prototype-nodetype\"><a class=\"header-anchor\" href=\"#node-prototype-nodetype\" aria-hidden=\"true\">#</a> Node.prototype.nodeType</h4>\n<blockquote>\n<p>返回一个整数值，表示节点的类型，Node 对象定义了一些常量表示</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>nodeType</th>\n<th>number</th>\n<th>constant</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>document</td>\n<td>9</td>\n<td>Node.DOCUMENT_NODE</td>\n</tr>\n<tr>\n<td>element</td>\n<td>1</td>\n<td>Node.ELEMENT_NODE</td>\n</tr>\n<tr>\n<td>attribute</td>\n<td>2</td>\n<td>Node.ATTRIBUTE_NODE</td>\n</tr>\n<tr>\n<td>text</td>\n<td>3</td>\n<td>Node.TEXT_NODE</td>\n</tr>\n<tr>\n<td>DocumentType</td>\n<td>10</td>\n<td>Node.DOCUMENT_TYPE_NODE</td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>8</td>\n<td>Node.COMMENT_NODE</td>\n</tr>\n<tr>\n<td>DocuemntFragment</td>\n<td>11</td>\n<td>NODE.DOCUMENT_FRAGMENT_NODE</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"node-prototype-nodename\"><a class=\"header-anchor\" href=\"#node-prototype-nodename\" aria-hidden=\"true\">#</a> Node.prototype.nodeName</h4>\n<blockquote>\n<p>返回节点的名称</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>nodeType</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>document</td>\n<td><code>#document</code></td>\n</tr>\n<tr>\n<td>element</td>\n<td>大写的标签名</td>\n</tr>\n<tr>\n<td>attribute</td>\n<td>大写的属性名</td>\n</tr>\n<tr>\n<td>text</td>\n<td><code>#text</code></td>\n</tr>\n<tr>\n<td>DocumentType</td>\n<td>文档类型，例如<code>html</code></td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>#comemnt</td>\n</tr>\n<tr>\n<td>DocuemntFragment</td>\n<td><code>#document-fragment</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"node-prototype-nodevalue\"><a class=\"header-anchor\" href=\"#node-prototype-nodevalue\" aria-hidden=\"true\">#</a> Node.prototype.nodeValue</h4>\n<blockquote>\n<p>返回当前节点本身的文本值，只有 text 和 comment 节点才会有值返回，其他节点该属性返回结果为<code>null</code>，可读写</p>\n</blockquote>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// &lt;div id=\"node\"> text &lt;/div></span>\n\ndocuemnt<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>nodeValue <span class=\"token comment\">// null</span>\ndocuemnt<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token comment\">// text</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"node-prototype-textcontent\"><a class=\"header-anchor\" href=\"#node-prototype-textcontent\" aria-hidden=\"true\">#</a> Node.prototype.textContent</h4>\n<blockquote>\n<p>返回当前节点和所有子节点的所有文本内容，不包括 comment 节点，可读写</p>\n</blockquote>\n<ul>\n<li>document 和 documentType 类型的节点的 textContent 值为<code>null</code>，要读取整个文档，使用<code>document.documentElement.textContent</code></li>\n</ul>\n<h4 id=\"node-prototype-baseuri\"><a class=\"header-anchor\" href=\"#node-prototype-baseuri\" aria-hidden=\"true\">#</a> Node.prototype.baseURI</h4>\n<blockquote>\n<p>返回一个当前网页绝对路径的 URI，只读</p>\n</blockquote>\n<p>可以通过<code>&lt;base&gt;</code>标签改变当前网页的 baseURI 属性</p>\n<h4 id=\"node-prototype-ownerdocument\"><a class=\"header-anchor\" href=\"#node-prototype-ownerdocument\" aria-hidden=\"true\">#</a> Node.prototype.ownerDocument</h4>\n<blockquote>\n<p>返回当前网页顶层的 document 对象</p>\n</blockquote>\n<h4 id=\"node-prototype-nextsibling\"><a class=\"header-anchor\" href=\"#node-prototype-nextsibling\" aria-hidden=\"true\">#</a> Node.prototype.nextSibling</h4>\n<blockquote>\n<p>返回紧跟在当前节点后面的节点，没有返回<code>null</code></p>\n</blockquote>\n<ul>\n<li>如果节点后面是一个空格，则返回一个内容为一个空格的文本节点</li>\n<li>如果节点后面是注释，则返回注释节点</li>\n</ul>\n<h4 id=\"node-prototype-previoussibling\"><a class=\"header-anchor\" href=\"#node-prototype-previoussibling\" aria-hidden=\"true\">#</a> Node.prototype.previousSibling</h4>\n<blockquote>\n<p>同上，返回紧跟当前节点前面的节点</p>\n</blockquote>\n<h4 id=\"node-prototype-parentnode\"><a class=\"header-anchor\" href=\"#node-prototype-parentnode\" aria-hidden=\"true\">#</a> Node.prototype.parentNode</h4>\n<blockquote>\n<p>返回当前节点的父节点，只可能是 document 节点，element 节点 documentFragment 节点</p>\n</blockquote>\n<h4 id=\"node-prototype-parentelement\"><a class=\"header-anchor\" href=\"#node-prototype-parentelement\" aria-hidden=\"true\">#</a> Node.prototype.parentElement</h4>\n<blockquote>\n<p>返回当前节点的父元素节点，如果当前节点不是节点或者父节点不是元素节点，则返回<code>null</code></p>\n</blockquote>\n<h4 id=\"node-prototype-firstchild-node-prototype-lastchild\"><a class=\"header-anchor\" href=\"#node-prototype-firstchild-node-prototype-lastchild\" aria-hidden=\"true\">#</a> Node.prototype.firstChild, Node.prototype.lastChild</h4>\n<blockquote>\n<p>返回当前节点的子节点，包括文本节点和注释节点，没有则返回<code>null</code></p>\n</blockquote>\n<h4 id=\"node-prototype-childnodes\"><a class=\"header-anchor\" href=\"#node-prototype-childnodes\" aria-hidden=\"true\">#</a> Node.prototype.childNodes</h4>\n<blockquote>\n<p>返回一个类似数组的对象（<code>nodeList</code>集合），包括当前节点所有子节点集合，包括注释节点和文本节点</p>\n</blockquote>\n<h4 id=\"node-prototype-isconented\"><a class=\"header-anchor\" href=\"#node-prototype-isconented\" aria-hidden=\"true\">#</a> Node.prototype.isConented</h4>\n<blockquote>\n<p>返回一个布尔值，表示该节点是否在文档中</p>\n</blockquote>\n<h3 id=\"方法\"><a class=\"header-anchor\" href=\"#方法\" aria-hidden=\"true\">#</a> 方法</h3>\n<h4 id=\"node-prototyoe-appendchild\"><a class=\"header-anchor\" href=\"#node-prototyoe-appendchild\" aria-hidden=\"true\">#</a> Node.prototyoe.appendChild()</h4>\n<blockquote>\n<p>接受一个节点对象作为参数，表示将该参数节点作为当前节点的最后一个子节点插入，返回插入的节点对象</p>\n</blockquote>\n<h4 id=\"node-haschildnodes\"><a class=\"header-anchor\" href=\"#node-haschildnodes\" aria-hidden=\"true\">#</a> Node.hasChildNodes()</h4>\n<blockquote>\n<p>返回一个布尔值，表示当前节点是否有子节点</p>\n</blockquote>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 判断一个节点是否有子节点的三种方法</span>\nnode<span class=\"token punctuation\">.</span><span class=\"token function\">hasChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token punctuation\">.</span>firstChild <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token punctuation\">.</span>ChildNodes <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"node-prototype-clonenode\"><a class=\"header-anchor\" href=\"#node-prototype-clonenode\" aria-hidden=\"true\">#</a> Node.prototype.cloneNode()</h4>\n<blockquote>\n<p>克隆一个节点，接受一个布尔值作为参数，表示是否克隆其子节点，返回克隆出来的新节点</p>\n</blockquote>\n<ul>\n<li>克隆一个节点会拷贝该节点的所有属性，但是会丧失<code>addEventListener</code>方法和<code>on-</code>属性，添加在这个节点上的事件回调属性</li>\n<li>该方法返回的节点对象不在文档中</li>\n<li>须修改返回节点对象的<code>id</code>属性和<code>name</code>属性，避免被插入文档之后，文档中出现多个具有相同<code>id</code>或者<code>name</code>属性的节点</li>\n</ul>\n<h4 id=\"node-prototype-insertbefore\"><a class=\"header-anchor\" href=\"#node-prototype-insertbefore\" aria-hidden=\"true\">#</a> Node.prototype.insertBefore()</h4>\n<blockquote>\n<p>接受两个参数，第一个为待插入节点，第二个为父节点内部的一个子节点，表示将第一个节点插入第二个参数节点的前面</p>\n</blockquote>\n<ul>\n<li>如果第二个参数为<code>null</code>，则将节点插入节点的最后一个节点</li>\n</ul>\n<h4 id=\"node-prototype-removechild\"><a class=\"header-anchor\" href=\"#node-prototype-removechild\" aria-hidden=\"true\">#</a> Node.prototype.removeChild()</h4>\n<blockquote>\n<p>接受节点的一个子节点作为参数，将子节点从该节点内部移除</p>\n</blockquote>\n<h4 id=\"node-prototype-replacechild\"><a class=\"header-anchor\" href=\"#node-prototype-replacechild\" aria-hidden=\"true\">#</a> Node.prototype.replaceChild()</h4>\n<blockquote>\n<p>用一个新节点，替换当前节点的某一个子节点</p>\n</blockquote>\n<h4 id=\"node-prototype-contains\"><a class=\"header-anchor\" href=\"#node-prototype-contains\" aria-hidden=\"true\">#</a> Node.prototype.contains()</h4>\n<blockquote>\n<p>返回一个布尔值，传入一个参数节点，表示该参数节点是否为当前节点或者为当前节点的子节点或者当前节点的后代节点</p>\n</blockquote>\n<h4 id=\"node-prototype-comparedocumentposition\"><a class=\"header-anchor\" href=\"#node-prototype-comparedocumentposition\" aria-hidden=\"true\">#</a> Node.prototype.compareDocumentPosition()</h4>\n<blockquote>\n<p>用法与<code>contains()</code>一直，返回一个七个比特为的二进制值，表示参数节点与当前节点的关系</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>binary</th>\n<th>decimal</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0000000</td>\n<td>0</td>\n<td>两个节点相同</td>\n</tr>\n<tr>\n<td>0000001</td>\n<td>1</td>\n<td>两个节点不在同一个文档中</td>\n</tr>\n<tr>\n<td>0000010</td>\n<td>2</td>\n<td>参数节点在该节点的前面</td>\n</tr>\n<tr>\n<td>0000100</td>\n<td>4</td>\n<td>参数节点在该节点的后面</td>\n</tr>\n<tr>\n<td>0001000</td>\n<td>8</td>\n<td>参数节点包含该节点</td>\n</tr>\n<tr>\n<td>0010000</td>\n<td>16</td>\n<td>该节点包含参数节点</td>\n</tr>\n<tr>\n<td>0100000</td>\n<td>32</td>\n<td>浏览器内部使用</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"node-prototype-isequalnode-node-prototype-issamenode\"><a class=\"header-anchor\" href=\"#node-prototype-isequalnode-node-prototype-issamenode\" aria-hidden=\"true\">#</a> Node.prototype.isEqualNode(), Node.prototype.isSameNode()</h4>\n<p>*<code>isEqualNode()</code>判断两个节点是否相等，包括类型相等，属性相等，子节点相同\n*<code>isSameNode()</code>判断两个节点是否为同一个节点</p>\n<h4 id=\"node-prototype-normallize\"><a class=\"header-anchor\" href=\"#node-prototype-normallize\" aria-hidden=\"true\">#</a> node.prototype.normallize()</h4>\n<blockquote>\n<p>清理当前节点内部所有文本节点，去除内容为空的文本节点，将内容不为空的毗邻的文本节点合并成一个文本节点</p>\n</blockquote>\n<h4 id=\"node-prototype-getrootnode\"><a class=\"header-anchor\" href=\"#node-prototype-getrootnode\" aria-hidden=\"true\">#</a> Node.prototype.getRootNode()</h4>\n<blockquote>\n<p>返回文档的根结点</p>\n</blockquote>\n<h2 id=\"nodelist-接口，htmlcollection-接口\"><a class=\"header-anchor\" href=\"#nodelist-接口，htmlcollection-接口\" aria-hidden=\"true\">#</a> NodeList 接口，HTMLCollection 接口</h2>\n<blockquote>\n<p>容纳多个节点的数据结构</p>\n</blockquote>\n<h3 id=\"nodelist-接口\"><a class=\"header-anchor\" href=\"#nodelist-接口\" aria-hidden=\"true\">#</a> NodeList 接口</h3>\n<blockquote>\n<p>一个类似数组的对象，包括多个 Node 节点</p>\n</blockquote>\n<p>获得途径</p>\n<ul>\n<li>Node.prototype.ChildNodes</li>\n<li>document.querySelectorAll(), document.getDocumentByTagName() 等节点搜索方法</li>\n</ul>\n<p>属性</p>\n<ul>\n<li>length</li>\n</ul>\n<p>方法</p>\n<ul>\n<li>forEach()</li>\n<li>item()</li>\n<li>keys(), value(), entries()</li>\n</ul>\n<h3 id=\"htmlcollection-接口\"><a class=\"header-anchor\" href=\"#htmlcollection-接口\" aria-hidden=\"true\">#</a> HTMLCollection 接口</h3>\n<blockquote>\n<p>元素节点的集合，没有<code>forEach()</code>方法</p>\n</blockquote>\n<p>获得途径：<code>document</code>对象上的集合属性</p>\n<ul>\n<li>document.links</li>\n<li>document.images</li>\n<li>document.forms</li>\n<li>...</li>\n</ul>\n<p>属性</p>\n<ul>\n<li>length</li>\n</ul>\n<p>方法</p>\n<ul>\n<li>item()</li>\n<li>nameItem() 参数是一个字符串，查找<code>id</code>或<code>name</code>属性为参数字符串的元素节点</li>\n</ul>\n<h2 id=\"parentnode接口，childnode接口\"><a class=\"header-anchor\" href=\"#parentnode接口，childnode接口\" aria-hidden=\"true\">#</a> ParentNode接口，ChildNode接口</h2>\n<p>节点对象出了继承 Node 接口之外，还会继承其他接口</p>\n<ul>\n<li>ParentNode 表示当前节点是一个父节点，提供一些处理子节点的方法</li>\n<li>ChildNode 表示当前节点是一个子节点</li>\n</ul>\n<h3 id=\"parentnode-接口\"><a class=\"header-anchor\" href=\"#parentnode-接口\" aria-hidden=\"true\">#</a> ParentNode 接口</h3>\n<blockquote>\n<p>如果当前节点是父节点，就会继承 ParentNode 接口</p>\n</blockquote>\n<p>属性&amp;方法</p>\n<table>\n<thead>\n<tr>\n<th>attribute&amp;method</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ParentNode.prototype.children</td>\n<td>返回一个 HTMLCollection 实例，所有子元素节点集合，只读</td>\n</tr>\n<tr>\n<td>ParentNode.prototype.firstElementChild </br> ParentNode.prototype.lastElementChild</td>\n<td>返回当前节点的第一个元素节点 </br> 返回当前节点最后一个元素节点 </br> 没有则返回<code>null</code></td>\n</tr>\n<tr>\n<td>ParentNode.childElementCount</td>\n<td>返回子元素节点的个数 </br> 等同于 ParentNode.prototype.children.length</td>\n</tr>\n<tr>\n<td>ParentNode.prototype.append() </br> ParentNode.prototype.prepend()</td>\n<td>将参数节点作为最后一个子元素节点插入 </br> 将参数节点作为第一个元素节点插入 </br> 没有返回值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"childnode-接口\"><a class=\"header-anchor\" href=\"#childnode-接口\" aria-hidden=\"true\">#</a> ChildNode 接口</h3>\n<blockquote>\n<p>如果一个节点有父节点，则该节点继承 ChildNode 接口</p>\n</blockquote>\n<p>方法</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ChildNode.prototype.remove()</td>\n<td>从父节点移除该节点</td>\n</tr>\n<tr>\n<td>ChildNode.prototype.before() </br> ChildNode.prototype.after()</td>\n<td>在当前节点前面插入参数节点 </br> 在当前节点后面插入参数节点</td>\n</tr>\n<tr>\n<td>ChildNode.prototype.replacewith()</td>\n<td>用参数节点替换当前节点</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考</h2>\n<p><a href=\"https://wangdoc.com/javascript/dom/general.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://wangdoc.com/javascript/dom/general.html<OutboundLink/></a></p>\n</div>\n",null]}