{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/docker/demo.md?vue&type=template&id=f529ba72&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/docker/demo.md","mtime":1543230166409},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1543230167140},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1543230169205},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1543230167140},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1543230169204},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1543230169274}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"docker搭建应用\\\"><a href=\\\"#docker搭建应用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Docker搭建应用</h1> <h2 id=\\\"centos-docker-安装\\\"><a href=\\\"#centos-docker-安装\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CentOS Docker 安装</h2> <h3 id=\\\"docker支持以下的centos版本：\\\"><a href=\\\"#docker支持以下的centos版本：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Docker支持以下的CentOS版本：</h3> <p>CentOS 7 (64-bit)<br>\\nCentOS 6.5 (64-bit) 或更高的版本</p> <h3 id=\\\"前提条件\\\"><a href=\\\"#前提条件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前提条件</h3> <p>目前，CentOS 仅发行版本中的内核支持 Docker。<br>\\n在CentOS 7 上，要求系统64位、内核版本为 3.10 以上。<br>\\n在CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、内核版本为 2.6.32-431 或者更高版本。</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\"># 验证CentOS 版本是否支持 Docker</span>\\n<span class=\\\"token function\\\">uname</span> -r    <span class=\\\"token comment\\\"># 查看内核版本</span>\\n</code></pre></div><h3 id=\\\"安装docker\\\"><a href=\\\"#安装docker\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装Docker</h3> <p>从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: <code>Docker CE</code> 和 <code>Docker EE</code>。<br>\\nDocker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。<br>\\n本文介绍 Docker CE 的安装使用。</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\n<span class=\\\"token comment\\\"># 使用 sudo 或 root 权限登录 Centos</span>\\n\\n<span class=\\\"token function\\\">sudo</span> yum update    <span class=\\\"token comment\\\"># 确保yum包更新到最新</span>\\n\\n<span class=\\\"token comment\\\"># 执行 Docker 安装脚本</span>\\n<span class=\\\"token function\\\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\\n<span class=\\\"token function\\\">sudo</span> sh get-docker.sh\\n\\n<span class=\\\"token comment\\\"># 启动Docker进程</span>\\n<span class=\\\"token function\\\">sudo</span> systemctl start docker\\n\\n<span class=\\\"token comment\\\"># 验证docker是否安装成功并在容器中执行一个测试的镜像</span>\\n<span class=\\\"token function\\\">sudo</span> docker run hello-world\\ndocker images\\n\\n<span class=\\\"token comment\\\"># 镜像加速</span>\\n<span class=\\\"token function\\\">vi</span> /etc/docker/daemon.json     <span class=\\\"token comment\\\"># 如没有该文件，请先新建一个</span>\\n\\n<span class=\\\"token comment\\\"># 新建daemon.json文件</span>\\n<span class=\\\"token comment\\\">###############################################################</span>\\n<span class=\\\"token function\\\">cd</span> /etc/docker/\\n<span class=\\\"token function\\\">touch</span> daemon.json\\n<span class=\\\"token comment\\\">###############################################################</span>\\n\\n<span class=\\\"token comment\\\"># 文件内容</span>\\n<span class=\\\"token comment\\\">###############################################################</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">&quot;registry-mirrors&quot;</span><span class=\\\"token keyword\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;http://hub-mirror.c.163.com&quot;</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">###############################################################</span>\\n\\n<span class=\\\"token comment\\\"># 删除Docker CE</span>\\n<span class=\\\"token function\\\">sudo</span> yum remove docker-ce\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">rm</span> -rf /var/lib/docker\\n\\n</code></pre></div><h3 id=\\\"docker-使用\\\"><a href=\\\"#docker-使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Docker 使用</h3> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\n<span class=\\\"token comment\\\">## Docker Hello World ##</span>\\n\\n<span class=\\\"token comment\\\"># Docker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序，输出Hello world</span>\\ndocker run ubuntu:15.10 /bin/echo <span class=\\\"token string\\\">&quot;Hello world&quot;</span>\\n\\n<span class=\\\"token comment\\\"># 各个参数解析：</span>\\n<span class=\\\"token comment\\\"># docker: Docker 的二进制执行文件。</span>\\n<span class=\\\"token comment\\\"># run:与前面的 docker 组合来运行一个容器。</span>\\n<span class=\\\"token comment\\\"># ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</span>\\n<span class=\\\"token comment\\\"># /bin/echo &quot;Hello world&quot;: 在启动的容器里执行的命令</span>\\n<span class=\\\"token comment\\\"># 以上命令完整的意思为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo &quot;Hello world&quot;，然后输出结果。</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 运行交互式的容器 ##</span>\\n\\n<span class=\\\"token comment\\\"># 通过docker的两个参数 -i -t，让docker运行的容器实现&quot;对话&quot;的能力</span>\\ndocker run -i -t ubuntu:15.10 /bin/bash\\n\\n<span class=\\\"token comment\\\"># 各个参数解析：</span>\\n<span class=\\\"token comment\\\"># -t:在新容器内指定一个伪终端或终端</span>\\n<span class=\\\"token comment\\\"># -i:允许你对容器内的标准输入 (STDIN) 进行交互</span>\\n<span class=\\\"token comment\\\"># 此时我们已进入一个 ubuntu15.10系统的容器</span>\\n\\n<span class=\\\"token function\\\">cat</span> /proc/version  <span class=\\\"token comment\\\"># 查看当前系统的版本信息</span>\\n<span class=\\\"token function\\\">ls</span>                 <span class=\\\"token comment\\\"># 当前目录下的文件列表</span>\\n\\n<span class=\\\"token comment\\\"># 运行exit命令或者使用CTRL+D来退出容器。</span>\\n\\n<span class=\\\"token comment\\\">########################分割线#####################################</span>\\n\\n<span class=\\\"token comment\\\">## 启动容器（后台模式） ##</span>\\n\\n<span class=\\\"token comment\\\"># 创建一个以进程方式运行的容器</span>\\ndocker run -d ubuntu:15.10 /bin/sh -c <span class=\\\"token string\\\">&quot;while true; do echo hello world; sleep 1; done&quot;</span>\\n<span class=\\\"token comment\\\"># 返回的一段字符串，为容器ID，可以通过容器ID来查看对应的容器发生了什么。</span>\\n\\ndocker <span class=\\\"token function\\\">ps</span>     <span class=\\\"token comment\\\"># 查看运行容器</span>\\n\\ndocker logs <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 查看容器日志信息</span>\\n\\ndocker stop <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 停止容器</span>\\n\\n<span class=\\\"token comment\\\">########################分割线#####################################</span>\\n\\n</code></pre></div><h4 id=\\\"docker容器使用\\\"><a href=\\\"#docker容器使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Docker容器使用</h4> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\n<span class=\\\"token comment\\\">## 运行一个web应用 ##</span>\\n\\ndocker pull training/webapp    <span class=\\\"token comment\\\"># 载入镜像</span>\\n\\ndocker run -d -P training/webapp python app.py\\n<span class=\\\"token comment\\\"># 参数说明:</span>\\n<span class=\\\"token comment\\\"># -d:让容器在后台运行</span>\\n<span class=\\\"token comment\\\"># -P:将容器内部使用的网络端口映射到我们使用的主机上</span>\\n\\ndocker <span class=\\\"token function\\\">ps</span>   <span class=\\\"token comment\\\"># 查看运行容器</span>\\n<span class=\\\"token comment\\\"># 此时，可以看到端口信息</span>\\nPORTS\\n0.0.0.0:32769-<span class=\\\"token operator\\\">&gt;</span>5000/tcp\\n<span class=\\\"token comment\\\"># Docker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上</span>\\n\\n<span class=\\\"token comment\\\"># 通过浏览器访问WEB应用</span>\\n192.168.217.10:32769\\n\\n<span class=\\\"token comment\\\"># 也可以通过 -p 参数来设置不一样的端口：</span>\\ndocker run -d -p 5000:5000 training/webapp python app.py\\n<span class=\\\"token comment\\\"># 容器内部的 5000 端口映射到我们本地主机的 5000 端口上。</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 网络端口的快捷方式 ##</span>\\ndocker port <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 查看容器端口的映射情况</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 查看 WEB 应用程序日志 ##</span>\\ndocker logs <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 查看容器内部的标准输出</span>\\n\\ndocker logs -f <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>   <span class=\\\"token comment\\\"># 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 查看WEB应用程序容器的进程 ##</span>\\ndocker <span class=\\\"token function\\\">top</span> <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 查看容器内部运行的进程</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 检查 WEB 应用程序 ##</span>\\ndocker inspect <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 查看 Docker 的底层信息</span>\\n<span class=\\\"token comment\\\"># 返回一个 JSON 文件记录着 Docker 容器的配置和状态信息</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 停止 WEB 应用容器 ##</span>\\ndocker stop <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 停止容器</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 重启WEB应用容器 ##</span>\\ndocker start <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 已经停止的容器，使用 docker start 来启动</span>\\n\\ndocker <span class=\\\"token function\\\">ps</span> -l        <span class=\\\"token comment\\\"># 查询最后一次创建的容器  </span>\\n\\ndocker restart <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 正在运行的容器，使用 docker restart 来重启</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 移除WEB应用容器 ##</span>\\ndocker <span class=\\\"token function\\\">rm</span> <span class=\\\"token punctuation\\\">[</span>容器ID 或 容器名称<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 删除不需要的容器</span>\\n<span class=\\\"token comment\\\"># 删除容器时，容器必须是停止状态，否则会报错</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n</code></pre></div><h4 id=\\\"docker-镜像使用\\\"><a href=\\\"#docker-镜像使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Docker 镜像使用</h4> <p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载；<br>\\n默认是从 Docker Hub 公共镜像源下载。</p> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\n<span class=\\\"token comment\\\">## 列出镜像列表 ##</span>\\n\\ndocker images     <span class=\\\"token comment\\\"># 列出本地主机上的镜像</span>\\n\\n<span class=\\\"token comment\\\"># 各个选项说明:</span>\\n<span class=\\\"token comment\\\"># REPOSITORY：表示镜像的仓库源</span>\\n<span class=\\\"token comment\\\"># TAG：镜像的标签</span>\\n<span class=\\\"token comment\\\"># IMAGE ID：镜像ID</span>\\n<span class=\\\"token comment\\\"># CREATED：镜像创建时间</span>\\n<span class=\\\"token comment\\\"># SIZE：镜像大小</span>\\n\\n<span class=\\\"token comment\\\"># 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本</span>\\n<span class=\\\"token comment\\\"># 如ubuntu仓库源里，有15.10、14.04等多个不同的版本，可以使用 REPOSITORY:TAG 来定义不同的镜像。</span>\\n\\n<span class=\\\"token comment\\\"># 使用版本为15.10的ubuntu系统镜像来运行容器：</span>\\ndocker run -t -i ubuntu:15.10 /bin/bash \\n<span class=\\\"token comment\\\"># 使用版本为14.04的ubuntu系统镜像来运行容器：</span>\\ndocker run -t -i ubuntu:14.04 /bin/bash\\n\\n<span class=\\\"token comment\\\"># 如果不指定一个镜像的版本标签，默认使用latest镜像</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 获取一个新的镜像 ##</span>\\ndocker pull <span class=\\\"token punctuation\\\">[</span>镜像名称:镜像标签<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 获取新镜像</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 查找镜像 ##</span>\\ndocker search <span class=\\\"token punctuation\\\">[</span>待查找内容<span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token comment\\\"># 查找镜像</span>\\n\\n<span class=\\\"token comment\\\"># NAME:镜像仓库源的名称</span>\\n<span class=\\\"token comment\\\"># DESCRIPTION:镜像的描述</span>\\n<span class=\\\"token comment\\\"># OFFICIAL:是否docker官方发布</span>\\n<span class=\\\"token comment\\\"># 查找地址：https://hub.docker.com/</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\">## 创建镜像 ##</span>\\n\\n<span class=\\\"token comment\\\"># 当从docker镜像仓库中下载的镜像不能满足需求时，可以通过以下两种方式对镜像进行更改：</span>\\n<span class=\\\"token comment\\\"># 1.从已经创建的容器中更新镜像，并且提交这个镜像</span>\\n<span class=\\\"token comment\\\"># 2.使用 Dockerfile 指令来创建一个新的镜像</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n</code></pre></div><h2 id=\\\"搭建php7和nginx运行环境\\\"><a href=\\\"#搭建php7和nginx运行环境\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 搭建php7和nginx运行环境</h2> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\n<span class=\\\"token comment\\\"># 下载相关镜像</span>\\ndocker pull nginx\\ndocker pull php:7.2.12-fpm\\n\\n<span class=\\\"token comment\\\"># 建立相关目录</span>\\n<span class=\\\"token function\\\">mkdir</span> -p /home/www\\n<span class=\\\"token function\\\">mkdir</span> -p /home/nginx/conf.d\\n\\n<span class=\\\"token comment\\\"># 编辑default.conf</span>\\nvim /home/nginx/conf.d/default.conf\\n<span class=\\\"token comment\\\">######################文件内容开始分割线###################################</span>\\nserver <span class=\\\"token punctuation\\\">{</span>\\n  listen  80 default_server<span class=\\\"token punctuation\\\">;</span>\\n  server_name _<span class=\\\"token punctuation\\\">;</span>\\n  root   /usr/share/nginx/html<span class=\\\"token punctuation\\\">;</span>\\n \\n  location / <span class=\\\"token punctuation\\\">{</span>\\n   index index.html index.htm index.php<span class=\\\"token punctuation\\\">;</span>\\n   autoindex off<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  location ~ \\\\.php<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$ <span class=\\\"token punctuation\\\">{</span>\\n   root   /var/www/html/<span class=\\\"token punctuation\\\">;</span>\\n   fastcgi_pass 172.17.0.2:9000<span class=\\\"token punctuation\\\">;</span>\\n   fastcgi_index index.php<span class=\\\"token punctuation\\\">;</span>\\n   fastcgi_split_path_info ^<span class=\\\"token punctuation\\\">((</span>?U<span class=\\\"token punctuation\\\">)</span>.+\\\\.php<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>/?.+<span class=\\\"token punctuation\\\">)</span>$<span class=\\\"token punctuation\\\">;</span>\\n   fastcgi_param SCRIPT_FILENAME <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_script_name</span><span class=\\\"token punctuation\\\">;</span>\\n   fastcgi_param PATH_INFO <span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n   fastcgi_param PATH_TRANSLATED <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n   include  fastcgi_params<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">######################文件内容结束分割线###################################</span>\\n\\n<span class=\\\"token comment\\\"># 启动php环境</span>\\ndocker run -p 9000:9000 --name php -v /home/www/:/var/www/html/ --privileged<span class=\\\"token operator\\\">=</span>true --rm -d php:7.2.12-fpm\\n\\n<span class=\\\"token comment\\\"># 查看php镜像的ip地址</span>\\ndocker inspect --format<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'{{.NetworkSettings.IPAddress}}'</span> php\\n172.17.0.2\\n\\n<span class=\\\"token comment\\\"># 修改default.conf配置文件，使fastcgi_pass的值为172.17.0.2:9000</span>\\nvim /home/nginx/conf.d/default.conf\\nfastcgi_pass 172.17.0.2:9000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># 启动nginx镜像</span>\\ndocker run -p 80:80 --name nginx -v /home/www:/usr/share/nginx/html -v /home/nginx/conf.d:/etc/nginx/conf.d --privileged<span class=\\\"token operator\\\">=</span>true --rm -d nginx\\n\\ndocker run -p 80:80 -p 443:443 --name nginxlog \\\\\\n-v /usr/java/docker/nginxlog/log/:/var/log/nginx:rw \\\\\\n-v /usr/java/docker/nginxlog/conf.d/:/etc/nginx/conf.d:rw \\\\\\n-v /etc/letsencrypt:/etc/letsencrypt:rw \\\\\\n-d nginx\\n\\n\\n<span class=\\\"token comment\\\"># 查看镜像运行状态</span>\\ndocker <span class=\\\"token function\\\">ps</span>\\n\\n<span class=\\\"token comment\\\"># 生成php测试文件info.php</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">&quot;&lt;?php phpinfo();&quot;</span> <span class=\\\"token operator\\\">&gt;</span> /home/www/info.php\\n<span class=\\\"token comment\\\"># 浏览器访问 http://localhost/info.php 验证</span>\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\"># nginx虚拟机配置</span>\\n\\n<span class=\\\"token comment\\\"># 以配置www.demo.com虚拟机为例,项目目录地址为/home/www/demo</span>\\nvim /home/nginx/conf.d/demo.conf\\n<span class=\\\"token comment\\\">######################文件内容开始分割线###################################</span>\\nserver <span class=\\\"token punctuation\\\">{</span>\\n\\tlisten  80<span class=\\\"token punctuation\\\">;</span>\\n\\tserver_name www.demo.com<span class=\\\"token punctuation\\\">;</span>\\n\\troot   /usr/share/nginx/html/demo/<span class=\\\"token punctuation\\\">;</span>\\n\\n\\tlocation / <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tindex index.html index.htm index.php<span class=\\\"token punctuation\\\">;</span>\\n\\t\\tautoindex off<span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>-e <span class=\\\"token variable\\\">$request_filename</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\trewrite  ^<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$  /index.php?s<span class=\\\"token operator\\\">=</span>/<span class=\\\"token variable\\\">$1</span>  last<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tlocation ~ \\\\.php<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$ <span class=\\\"token punctuation\\\">{</span>\\n\\t\\troot   /var/www/html/demo/<span class=\\\"token punctuation\\\">;</span>\\n\\t\\tfastcgi_pass 172.17.0.2:9000<span class=\\\"token punctuation\\\">;</span>\\n\\t\\tfastcgi_index index.php<span class=\\\"token punctuation\\\">;</span>\\n\\t\\tfastcgi_split_path_info ^<span class=\\\"token punctuation\\\">((</span>?U<span class=\\\"token punctuation\\\">)</span>.+\\\\.php<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>/?.+<span class=\\\"token punctuation\\\">)</span>$<span class=\\\"token punctuation\\\">;</span>\\n\\t\\tfastcgi_param SCRIPT_FILENAME <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_script_name</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tfastcgi_param PATH_INFO <span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tfastcgi_param PATH_TRANSLATED <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tinclude  fastcgi_params<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">######################文件内容结束分割线###################################</span>\\n<span class=\\\"token comment\\\"># 注意上述文件两处root的配置！！！</span>\\n<span class=\\\"token comment\\\"># 因已指定宿主机的映射，这里 /usr/share/nginx/html 与 /var/www/html 目录实际就是宿主机的 /home/www </span>\\n<span class=\\\"token comment\\\"># 但不可写为/home/www，否则会报File not found的错误，因为宿主机的配置是映射到容器目录的</span>\\n\\n\\n<span class=\\\"token comment\\\">########################分割线###################################</span>\\n\\n<span class=\\\"token comment\\\"># 配置https</span>\\n\\n<span class=\\\"token comment\\\"># 建立https证书放置文件夹ssl</span>\\n<span class=\\\"token function\\\">mkdir</span> -p /home/nginx/conf.d/ssl\\n\\n<span class=\\\"token comment\\\"># 放置https证书至宿主机/home/nginx/conf.d/ssl目录下</span>\\n\\n<span class=\\\"token comment\\\"># 配置虚拟机文件</span>\\n<span class=\\\"token comment\\\"># 以配置www.demo.com虚拟机为例,项目目录地址为/home/www/demo</span>\\n<span class=\\\"token comment\\\">######################文件内容开始分割线###################################</span>\\nserver <span class=\\\"token punctuation\\\">{</span>\\n    listen 80<span class=\\\"token punctuation\\\">;</span>\\n    listen 443 ssl<span class=\\\"token punctuation\\\">;</span>\\n    server_name www.demo.com<span class=\\\"token punctuation\\\">;</span>\\n    root   /usr/share/nginx/html/demo/<span class=\\\"token punctuation\\\">;</span>\\n\\n    ssl_certificate  /etc/nginx/conf.d/ssl/1_www.demo.com_bundle.crt<span class=\\\"token punctuation\\\">;</span>\\n    ssl_certificate_key  /etc/nginx/conf.d/ssl/2_www.demo.com.key<span class=\\\"token punctuation\\\">;</span>\\n\\n    location / <span class=\\\"token punctuation\\\">{</span>\\n        index index.html index.htm index.php<span class=\\\"token punctuation\\\">;</span>\\n        autoindex off<span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>-e <span class=\\\"token variable\\\">$request_filename</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            rewrite  ^<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$  /index.php?s<span class=\\\"token operator\\\">=</span>/<span class=\\\"token variable\\\">$1</span>  last<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    location ~ \\\\.php<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$ <span class=\\\"token punctuation\\\">{</span>\\n        root   /var/www/html/demo/<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_pass 172.17.0.2:9000<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_index index.php<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_split_path_info ^<span class=\\\"token punctuation\\\">((</span>?U<span class=\\\"token punctuation\\\">)</span>.+\\\\.php<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>/?.+<span class=\\\"token punctuation\\\">)</span>$<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_param SCRIPT_FILENAME <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_script_name</span><span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_param PATH_INFO <span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_param PATH_TRANSLATED <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n        include  fastcgi_params<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">######################文件内容结束分割线###################################</span>\\n<span class=\\\"token comment\\\"># 注意上述文件两处root的配置！！！</span>\\n<span class=\\\"token comment\\\"># 因已指定宿主机的映射，</span>\\n<span class=\\\"token comment\\\"># /usr/share/nginx/html 与 /var/www/html 目录实际就是宿主机的 /home/www </span>\\n<span class=\\\"token comment\\\"># /etc/nginx/conf.d 目录实际就是宿主机的 /home/nginx/conf.d</span>\\n\\n<span class=\\\"token comment\\\"># 配置http访问自动跳转至https</span>\\n<span class=\\\"token comment\\\">######################文件内容开始分割线###################################</span>\\nserver <span class=\\\"token punctuation\\\">{</span>\\n    listen 80<span class=\\\"token punctuation\\\">;</span>\\n    server_name www.demo.com<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> 301 https://<span class=\\\"token variable\\\">$server_name</span><span class=\\\"token variable\\\">$request_uri</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n\\nserver <span class=\\\"token punctuation\\\">{</span>\\n    listen 443<span class=\\\"token punctuation\\\">;</span>\\n    server_name www.demo.com<span class=\\\"token punctuation\\\">;</span>\\n    root   /usr/share/nginx/html/demo/<span class=\\\"token punctuation\\\">;</span>\\n\\n    ssl on<span class=\\\"token punctuation\\\">;</span>\\n    ssl_certificate  /etc/nginx/conf.d/ssl/1_www.demo.com_bundle.crt<span class=\\\"token punctuation\\\">;</span>\\n    ssl_certificate_key  /etc/nginx/conf.d/ssl/2_www.demo.com.key<span class=\\\"token punctuation\\\">;</span>\\n\\n    location / <span class=\\\"token punctuation\\\">{</span>\\n        index index.html index.htm index.php<span class=\\\"token punctuation\\\">;</span>\\n        autoindex off<span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>-e <span class=\\\"token variable\\\">$request_filename</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            rewrite  ^<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$  /index.php?s<span class=\\\"token operator\\\">=</span>/<span class=\\\"token variable\\\">$1</span>  last<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    location ~ \\\\.php<span class=\\\"token punctuation\\\">(</span>.*<span class=\\\"token punctuation\\\">)</span>$ <span class=\\\"token punctuation\\\">{</span>\\n        root   /var/www/html/demo/<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_pass 172.17.0.2:9000<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_index index.php<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_split_path_info ^<span class=\\\"token punctuation\\\">((</span>?U<span class=\\\"token punctuation\\\">)</span>.+\\\\.php<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>/?.+<span class=\\\"token punctuation\\\">)</span>$<span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_param SCRIPT_FILENAME <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_script_name</span><span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_param PATH_INFO <span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n        fastcgi_param PATH_TRANSLATED <span class=\\\"token variable\\\">$document_root</span><span class=\\\"token variable\\\">$fastcgi_path_info</span><span class=\\\"token punctuation\\\">;</span>\\n        include  fastcgi_params<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">######################文件内容结束分割线###################################</span>\\n\\n</code></pre></div><h2 id=\\\"安装mysql\\\"><a href=\\\"#安装mysql\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装mysql</h2> <div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>\\ndocker pull mysql:5.6\\n\\ndocker run -p 3306:3306 --name mysql -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/logs:/logs -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD<span class=\\\"token operator\\\">=</span>123456 --rm -d mysql:5.6\\n\\n<span class=\\\"token comment\\\"># 如外网连不上数据库，执行以下处理：</span>\\n<span class=\\\"token comment\\\">######################开始分割线###################################</span>\\n<span class=\\\"token comment\\\"># 进入MySQL容器</span>\\ndocker <span class=\\\"token function\\\">exec</span> -it mysql /bin/bash\\n\\n<span class=\\\"token comment\\\"># 进入MySQL</span>\\nmysql -uroot -p\\n\\n<span class=\\\"token comment\\\"># 切换到mysql数据表</span>\\nuse mysql\\n\\n<span class=\\\"token comment\\\"># 设置root帐号的密码</span>\\nupdate user <span class=\\\"token keyword\\\">set</span> authentication_string <span class=\\\"token operator\\\">=</span> password<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'123456'</span><span class=\\\"token punctuation\\\">)</span> where user <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># 对root进行授权</span>\\nGRANT ALL PRIVILEGES ON *.* TO <span class=\\\"token string\\\">'root'</span>@<span class=\\\"token string\\\">'%'</span> IDENTIFIED BY <span class=\\\"token string\\\">'root'</span> WITH GRANT OPTION<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">######################结束分割线###################################</span>\\n\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}