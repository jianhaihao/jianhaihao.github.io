{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/array.md?vue&type=template&id=0f042c51&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/array.md","mtime":1537944817432},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537944818120},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537944820597},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537944820671}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"数组的扩展-2-5\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数组的扩展-2-5\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组的扩展(2.5)\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"扩展运算符\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#扩展运算符\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 扩展运算符 ...\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_c(\"code\", [_vm._v(\"rest\")]), _vm._v(\"参数的逆运算\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"可以作为\"),\n          _c(\"code\", [_vm._v(\"apply\")]),\n          _vm._v(\"函数的替代\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"应用：\")]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"深复制数组\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"合并数组与解构赋值结合\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"与解构赋值结合\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"将字符串转化为真正的字符数组\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"实现了\"),\n          _c(\"code\", [_vm._v(\"Iterator\")]),\n          _vm._v(\"接口的对象，可以将类数组对象转化为真正的数组\"),\n          _c(\"code\", [_vm._v(\"arguments\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"nodeList\")]),\n          _vm._v(\"字符串都为类数组对象\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Map\")]),\n          _vm._v(\"和\"),\n          _c(\"code\", [_vm._v(\"Set\")]),\n          _vm._v(\"结构，\"),\n          _c(\"code\", [_vm._v(\"Generator\")]),\n          _vm._v(\"函数返回的对象，只要使用对象部署了 Iterator 接口，都可以被\"),\n          _c(\"code\", [_vm._v(\"...\")]),\n          _vm._v(\"遍历，否则报错\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"array-from\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#array-from\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Array.from()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Array.from\")]),\n          _vm._v(\"可以将两类对象转化为真正的数组：类似数组的对象 (\"),\n          _c(\"code\", [_vm._v(\"array-like-object\")]),\n          _vm._v(\") 、可遍历对象 (\"),\n          _c(\"code\", [_vm._v(\"iterable\")]),\n          _vm._v(\") ，包括 ES6 新增的\"),\n          _c(\"code\", [_vm._v(\"Set\")]),\n          _vm._v(\",\"),\n          _c(\"code\", [_vm._v(\"Map\")]),\n          _vm._v(\"数据结构\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"也可以对真实数组对象实现完全复制\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"接受第二个参数，类似于数组的\"),\n          _c(\"code\", [_vm._v(\"map()\")]),\n          _vm._v(\n            \"方法，将每个元素处理后返回，并且能够正确处理 32 位的 UTF-16 字符，可以避免将码点大于\"\n          ),\n          _c(\"code\", [_vm._v(\"0xFFFF\")]),\n          _vm._v(\"的字符当作两个字符的 bug\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"array-of\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#array-of\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Array.of()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_vm._v(\"将一组值转化为数组\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"Array()\")]),\n          _vm._v(\"的替代方案，\"),\n          _c(\"code\", [_vm._v(\"Array.of()\")]),\n          _vm._v(\"总是返回参数值组成的数组，而\"),\n          _c(\"code\", [_vm._v(\"Array()\")]),\n          _vm._v(\"再无参数，一个参数，多个参数返回的值是不一样的\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n          _c(\"code\", [\n            _vm._v(\"Array\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"of\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"1\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"2\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"3\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\"\\t\"),\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\"// [1,2,3]\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"数组实例的-copywithin\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数组实例的-copywithin\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组实例的 copyWithin()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_vm._v(\"讲数组内部的数据复制到其他位置，覆盖原有成员\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"接受三个参数\"),\n          _c(\"code\", [_vm._v(\"target\")]),\n          _vm._v(\"、\"),\n          _c(\"code\", [_vm._v(\"start\")]),\n          _vm._v(\"、\"),\n          _c(\"code\", [_vm._v(\"end\")]),\n          _vm._v(\"，写入开始位置、开始读取位置、结束读取位置\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"数组实例的-find-和-findindex\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#数组实例的-find-和-findindex\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组实例的 find() 和 findIndex()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"find()\")]),\n          _vm._v(\n            \"参数为一个回调函数，所有数组成员依次执行该函数，返回第一个符合该条件的成员，没有则返回\"\n          ),\n          _c(\"code\", [_vm._v(\"undefined\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"findIndex()\")]),\n          _vm._v(\"返回第一个符合条件的成员的位置，如果都不符合，则返回\"),\n          _c(\"code\", [_vm._v(\"-1\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"数组实例的-fill\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数组实例的-fill\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组实例的 fill()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"使用给定值填充数组，默认抹掉以前的数组成员\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"1\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"2\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"3\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"fill\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"7\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\"// [7, 7, 7]\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"可以用于数组的初始化，接受第二个参数和第三个参数，表示起始位置和结束位置\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"数组实例的-entries-、-keys-、-values\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#数组实例的-entries-、-keys-、-values\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组实例的 entries() 、 keys() 、 values()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回一个遍历器对象，可以利用\"),\n        _c(\"code\", [_vm._v(\"for...of\")]),\n        _vm._v(\"遍历\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"数组实例的-includes\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数组实例的-includes\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组实例的 includes()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回一个布尔值，数组是否包含该成员，与字符串的\"),\n        _c(\"code\", [_vm._v(\"includes()\")]),\n        _vm._v(\"类似，ES2016 引入\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"数组的空位处理\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#数组的空位处理\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 数组的空位处理\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"ES5 对于空位的处理\\n*\"),\n            _c(\"code\", [_vm._v(\"forEach()\")]),\n            _vm._v(\",\"),\n            _c(\"code\", [_vm._v(\"filter()\")]),\n            _vm._v(\",\"),\n            _c(\"code\", [_vm._v(\"reduce()\")]),\n            _vm._v(\",\"),\n            _c(\"code\", [_vm._v(\"every()\")]),\n            _vm._v(\",\"),\n            _c(\"code\", [_vm._v(\"some()\")]),\n            _vm._v(\"都会跳过空位\\n*\"),\n            _c(\"code\", [_vm._v(\"map()\")]),\n            _vm._v(\"会跳过空位，但会保留这个值\\n*\"),\n            _c(\"code\", [_vm._v(\"join()\")]),\n            _vm._v(\",\"),\n            _c(\"code\", [_vm._v(\"toString()\")]),\n            _vm._v(\",都会讲空位视为\"),\n            _c(\"code\", [_vm._v(\"undefined\")]),\n            _vm._v(\",而\"),\n            _c(\"code\", [_vm._v(\"undefined\")]),\n            _vm._v(\"和\"),\n            _c(\"code\", [_vm._v(\"null\")]),\n            _vm._v(\"都会被处理成空字符串\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"ES6 明确将空位转为\"),\n            _c(\"code\", [_vm._v(\"undefined\")])\n          ]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [\n              _c(\"code\", [_vm._v(\"Array.from()\")]),\n              _vm._v(\"会将数组的空位转化为\"),\n              _c(\"code\", [_vm._v(\"undefined\")]),\n              _vm._v(\"，扩展运算符\"),\n              _c(\"code\", [_vm._v(\"...\")]),\n              _vm._v(\"也是一样\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"code\", [_vm._v(\"copyWithin()\")]),\n              _vm._v(\"会连着空位一起拷贝\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"code\", [_vm._v(\"fill()\")]),\n              _vm._v(\"会将空位视为正常的数组位置\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"code\", [_vm._v(\"for...in\")]),\n              _vm._v(\"遍历也会循环空位\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"code\", [_vm._v(\"keys\")]),\n              _vm._v(\",\"),\n              _c(\"code\", [_vm._v(\"values()\")]),\n              _vm._v(\",\"),\n              _c(\"code\", [_vm._v(\"entries()\")]),\n              _vm._v(\",\"),\n              _c(\"code\", [_vm._v(\"find()\")]),\n              _vm._v(\",\"),\n              _c(\"code\", [_vm._v(\"findIndex\")]),\n              _vm._v(\"会将空位当作\"),\n              _c(\"code\", [_vm._v(\"undefined\")]),\n              _vm._v(\"处理\")\n            ])\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}