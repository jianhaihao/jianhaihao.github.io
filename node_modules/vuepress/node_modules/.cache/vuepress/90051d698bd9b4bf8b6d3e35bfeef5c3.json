{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/regexp.md?vue&type=template&id=7d6932cf&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es5/regexp.md","mtime":1537408168000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926131947},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"正则表达式-3\\\"><a href=\\\"#正则表达式-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 正则表达式 (3)</h1> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"正则表达式一种文本匹配的模式。\"),_vm._ssrNode(\"<a href=\\\"http://javascript.ruanyifeng.com/stdlib/regexp.html#toc5\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"参考\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h2 id=\\\"新建正则表达式\\\"><a href=\\\"#新建正则表达式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 新建正则表达式</h2> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> regexp <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'xyz'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> regexp <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/xyz/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"实例属性\\\"><a href=\\\"#实例属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例属性</h2> <ul><li>只读属性，修饰符</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>RegExp<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>ignoreCase  <span class=\\\"token comment\\\">// 忽略大小写</span>\\nRegExp<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>global  <span class=\\\"token comment\\\">// 全局匹配</span>\\nRegExp<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>multiline  <span class=\\\"token comment\\\">// 多行模式匹配</span>\\n</code></pre></div><ul><li>其他属性</li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>RegExp<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>lastIndex  <span class=\\\"token comment\\\">// 返回一个数值，表示下一次搜索开始的位置，可写，当使用 g 修饰符的时候，该属性才发挥作用</span>\\nRegExp<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>source  <span class=\\\"token comment\\\">// 返回正则表达式的字符串形式，不包括反斜杠，只读</span>\\n</code></pre></div><p>可以通过手动指定<code>lastIndex</code>属性来设置匹配的起始位置</p> <h2 id=\\\"实例方法\\\"><a href=\\\"#实例方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例方法</h2> <h3 id=\\\"regexp-prototype-test\\\"><a href=\\\"#regexp-prototype-test\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> RegExp.prototype.test</h3> <p>返回布尔值，当前模式是否匹配参数字符串</p> <h3 id=\\\"regexp-prototype-exec\\\"><a href=\\\"#regexp-prototype-exec\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> RegExp.prototype.exec</h3> <ul><li>正则匹配字符串，如果匹配上，返回包含结果的类数组的对象；如果没有结果，返回<code>null</code></li> <li>返回类数组对象第一个成员为匹配成功的子串，第二个成员是圆括号匹配的结果</li> <li>返回的类数组对象包含<code>input</code>和<code>index</code>两个属性，分别表示原字符串和匹配成功子串在原字符串的起始位置</li></ul> <h2 id=\\\"字符串的实例方法\\\"><a href=\\\"#字符串的实例方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串的实例方法</h2> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>String<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// 返回一个数组，包含所有匹配到的子串，没有返回 null</span>\\nString<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">search</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// 返回一个整数，表示匹配成功开始的位置，没有返回 -1</span>\\nString<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// 按照给定的正则表达式替换字符串，返回替换后的字符串</span>\\nString<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// 按照给定的正则表达式对字符串进行分割，返回一个包含分割后子串的数组</span>\\n</code></pre></div><ul><li>设置正则表达式的<code>lastIndex</code>属性，对<code>match()</code>方法无效，每次匹配都是从第 0 个位置开始的</li> <li><code>replace()</code>方法第二个参数可以是替换后的字符串，也可以是正则表达是的分组表达式<code>$(1)</code>，也可以是一个函数，替换每一个匹配的返回值</li> <li><code>split()</code>方法的第二个参数可以是一个数值，表示返回数组的最大成员数</li></ul> <h2 id=\\\"匹配规则\\\"><a href=\\\"#匹配规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 匹配规则</h2> <h3 id=\\\"字面量字符\\\"><a href=\\\"#字面量字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字面量字符</h3> <blockquote><p>在正则表达式中，某个字符只表示它字面的含义，比如<code>/z/</code>,<code>/a/</code>分别匹配 a 和 b，就叫他字面量字符</p></blockquote> <h3 id=\\\"元字符\\\"><a href=\\\"#元字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 元字符</h3> <blockquote><p>具有特殊含义的字符</p></blockquote> <h4 id=\\\"点字符\\\"><a href=\\\"#点字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点字符 (.)</h4> <p>匹配除开回车 (<code>\\\\r</code>)、换行 (<code>\\\\n</code>)、行分割符 (<code>\\\\u2028</code>) 和段分割符 (<code>\\\\u2029</code>) 之外任意一个字符</p> <h4 id=\\\"位置字符\\\"><a href=\\\"#位置字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 位置字符</h4> <ul><li><code>^</code>表示字符串的开始位置</li> <li><code>$</code>表示字符串的结束位置</li></ul> <h4 id=\\\"选择符\\\"><a href=\\\"#选择符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 选择符 (|)</h4> <p>竖线符号<code>|</code>在正则表达式中，表示或 (<code>OR</code>) 的关系，可以联合使用</p> <h3 id=\\\"转义符\\\"><a href=\\\"#转义符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 转义符 ()</h3> <p>正则表达式中有一些特殊含义的元字符，如果要表达他们本身，则需要在字符前加上<code>\\\\</code>进行转义</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token regex\\\">/\\\\+/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a+b'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// true</span>\\n</code></pre></div><h3 id=\\\"特殊字符\\\"><a href=\\\"#特殊字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 特殊字符</h3> <p>正则表达式为一些不能打印的字符，提供了一些表达方法</p> <ul><li><code>[\\\\b]</code>匹配退格键，不要与<code>\\\\b</code>混淆</li> <li><code>\\\\n</code>匹配换行键</li> <li><code>\\\\r</code>匹配回车键</li> <li><code>\\\\t</code>匹配制表符</li> <li><code>\\\\v</code>匹配垂直制表符</li> <li><code>\\\\f</code>匹配换页符</li> <li><code>\\\\0</code>匹配<code>null</code>字符</li> <li><code>\\\\xhh</code>匹配<code>\\\\u00</code>和<code>\\\\uFF</code></li> <li><code>\\\\uhhhh</code>匹配<code>\\\\u0000</code>和<code>\\\\uFFFF</code></li></ul> <h3 id=\\\"字符类\\\"><a href=\\\"#字符类\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符类</h3> <p>字符类 class 表示一些可供选择的字符，只要匹配一个就可以，把所有待匹配的字符放入方括号类，组成一个字符类，<code>/[abc]/</code>可以匹配带有 a, b, c 字符的字符串</p> <p>有两个字符在字符类中有特殊含义</p> <h4 id=\\\"脱字符\\\"><a href=\\\"#脱字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 脱字符 (^)</h4> <ul><li>表示除开方括号字符的任意字符都可以匹配，<code>[^abc]</code>表示匹配除开 a, b, c 之外的任意字符</li> <li>[^] 表示匹配一切字符，范围比点字符 (.) 要大</li> <li>脱字符只有在字符类的第一位才有效，否则就是字面字符</li></ul> <h4 id=\\\"连字符\\\"><a href=\\\"#连字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 连字符 (-)</h4> <ul><li><code>/[0-9]/</code>表示<code>[0123456789]</code></li> <li><code>/[a-z]/</code>表示 26 个小写字母</li> <li><code>/[A-Z]/</code>表示 26 个大写字母</li></ul> <h3 id=\\\"预定义模式\\\"><a href=\\\"#预定义模式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 预定义模式</h3> <blockquote><p>常见匹配模式的简写</p></blockquote> <ul><li><code>\\\\d</code>等同于<code>[0-9]</code></li> <li><code>\\\\D</code>等同于<code>[^0-9]</code></li> <li><code>\\\\w</code>等同于<code>[a-zA-Z0-9_]</code></li> <li><code>\\\\W</code>等同于<code>[^a-zA-Z0-9_]</code></li> <li><code>\\\\s</code>等同于<code>[\\\\r\\\\n\\\\t\\\\v\\\\f]</code></li> <li><code>\\\\S</code>等同于<code>[^\\\\r\\\\n\\\\t\\\\v\\\\f]</code></li> <li><code>\\\\b</code>匹配词的边界</li> <li><code>\\\\B</code>匹配非词边界，即在词的内部</li></ul> <h3 id=\\\"重复类\\\"><a href=\\\"#重复类\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重复类</h3> <p><code>a{n}</code>匹配 a 字符重复 n 次</p> <h3 id=\\\"量字符\\\"><a href=\\\"#量字符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 量字符</h3> <ul><li><code>?</code>匹配 0 次或 1 次，等同于<code>{0, 1}</code></li> <li><code>*</code>匹配 任意次，等同于<code>{0,}</code></li> <li><code>+</code>匹配 1 次或多次，等同于<code>{1,}</code></li></ul> <h3 id=\\\"贪婪模式\\\"><a href=\\\"#贪婪模式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 贪婪模式</h3> <ul><li>量字符的原则是最大可能匹配，知道下一个字符不匹配为止，我们称这种匹配模式为贪婪模式</li> <li>如果想讲贪婪模式改为非贪婪模式，则在量字符后面加上<code>?</code></li> <li><code>*?</code>表示某个模式出现 0 次或多次，采用非贪婪模式</li> <li><code>+?</code>表示某个模式出现 1 次或者多次匹配，采用非贪婪模式</li></ul> <h3 id=\\\"修饰符\\\"><a href=\\\"#修饰符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 修饰符</h3> <ul><li><code>g</code>修饰符，全局匹配，主要用于搜索和替换</li> <li><code>i</code>修饰符，忽略大小写进行匹配</li> <li><code>m</code>修饰符，多行匹配模式</li></ul> <h3 id=\\\"组匹配\\\"><a href=\\\"#组匹配\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组匹配</h3> <ul><li>正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容</li> <li>使用组匹配的时候，不宜使用<code>g</code>修饰符，否则<code>match()</code>方法不回获取分组的内容，可以使用循环配合<code>RegExp.prototype.exec()</code>获取每一轮的组捕获</li> <li>正则表达式内部可以使用<code>\\\\1</code>,<code>、2</code>，来获取括号匹配的内容，<code>\\\\1</code>表示获取第一个括号匹配的内容</li></ul> <h4 id=\\\"非组捕获\\\"><a href=\\\"#非组捕获\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 非组捕获</h4> <p><code>(?:x)</code>称为非组捕获，表示不返回该组捕获的内容</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> m <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/(?:.)b(.)/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nm <span class=\\\"token comment\\\">// [&quot;abc&quot;, &quot;c&quot;];</span>\\n</code></pre></div><h4 id=\\\"先行断言\\\"><a href=\\\"#先行断言\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 先行断言</h4> <p><code>x(?=y)</code>称为先行断言，<code>x</code>只有在<code>y</code>前面才匹配，<code>y</code>不计入匹配结果</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> m <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'xy'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/x(?:y)/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nm <span class=\\\"token comment\\\">// ['x']</span>\\n</code></pre></div><h4 id=\\\"先行否定断言\\\"><a href=\\\"#先行否定断言\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 先行否定断言</h4> <p><code>x(?!y)</code>称为先行否定断言，只有不再<code>y</code>前面的<code>x</code>才匹配，<code>y</code>不计入匹配结果</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> m <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'abcdca'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/c(?!a)/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nm <span class=\\\"token comment\\\">// ['c']</span>\\n</code></pre></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}