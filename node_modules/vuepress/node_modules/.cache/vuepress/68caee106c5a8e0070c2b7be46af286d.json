{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\data-structure\\array.md?vue&type=template&id=4155188d&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\data-structure\\array.md","mtime":1552405060801},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552405062612},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552405073713},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552405062612},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552405073709},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552405074109}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"数组\"><a class=\"header-anchor\" href=\"#数组\" aria-hidden=\"true\">#</a> 数组</h1>\n<blockquote>\n<p>操作：增删改查（类比数据库）<br>\n属性：容量（capacity）、大小（size）</p>\n</blockquote>\n<h2 id=\"初始化\"><a class=\"header-anchor\" href=\"#初始化\" aria-hidden=\"true\">#</a> 初始化</h2>\n<blockquote>\n<p>成员变量：数组data、 数组大小size<br>\n构造函数，传入数组的容量capacity构造Array，初始化size=0<br>\n无参数构造函数，默认数组容量capacity=10<br>\n获取数组中的元素个数<br>\n获取数据的容量<br>\n返回数组是否为空</p>\n</blockquote>\n<h2 id=\"添加元素\"><a class=\"header-anchor\" href=\"#添加元素\" aria-hidden=\"true\">#</a> 添加元素</h2>\n<blockquote>\n<p>向数组末尾添加元素e</p>\n</blockquote>\n<p><code>addLast(int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">/**\n * 方法1\n */</span>\n\n<span class=\"token comment\">// 校验：数组是否已满</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 数组容量已满，抛出异常</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 添加元素</span>\ndata<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 维护size</span>\nsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 方法2\n */</span>\n\n<span class=\"token comment\">// 直接调用add函数</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>向数组头部添加元素e</p>\n</blockquote>\n<p><code>addFirst(int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">// 直接调用add函数</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>在数组index位置插入元素e</p>\n</blockquote>\n<p><code>add(int index, int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">// 校验：数组是否已满</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 数组容量已满，抛出异常</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 校验：index是否合法</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// index不能为负数，且不能大于size（即数组中间不能含有空元素）</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将>=index位置的所有元素往后移动一位</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> index <span class=\"token punctuation\">;</span> i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// index位置插入元素e</span>\ndata<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 维护size</span>\nsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"获取元素\"><a class=\"header-anchor\" href=\"#获取元素\" aria-hidden=\"true\">#</a> 获取元素</h2>\n<p><code>get(int index)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">// 校验：index是否合法</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> szie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// index 非法</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"修改元素\"><a class=\"header-anchor\" href=\"#修改元素\" aria-hidden=\"true\">#</a> 修改元素</h2>\n<p><code>set(int index, int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">// 校验：index是否合法</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> szie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// index 非法</span>\n<span class=\"token punctuation\">}</span>\n\ndata<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"包含元素\"><a class=\"header-anchor\" href=\"#包含元素\" aria-hidden=\"true\">#</a> 包含元素</h2>\n<p><code>contains(int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"查找元素\"><a class=\"header-anchor\" href=\"#查找元素\" aria-hidden=\"true\">#</a> 查找元素</h2>\n<p><code>find(int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"删除元素\"><a class=\"header-anchor\" href=\"#删除元素\" aria-hidden=\"true\">#</a> 删除元素</h2>\n<blockquote>\n<p>删除index位置的元素，返回删除的元素</p>\n</blockquote>\n<p><code>remove(int index)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token comment\">// 校验：index是否合法</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> szie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// index 非法</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 记录待返回的元素</span>\n<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 依次循环，将index之后位置的元素，统一向前移动一位，将index挤出去</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 维护size</span>\nsize<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// data[size] = null;</span>\n\n<span class=\"token comment\">// 返回删除元素 </span>\n<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>删除第一个元素，返回删除的元素</p>\n</blockquote>\n<p><code>removeFirst()</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>删除最后一个元素，返回删除的元素</p>\n</blockquote>\n<p><code>removeLast()</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>删除元素e</p>\n</blockquote>\n<p><code>removeElement(int e)</code></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>\n<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}