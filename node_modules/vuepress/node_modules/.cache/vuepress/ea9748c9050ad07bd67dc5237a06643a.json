{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/fs.md?vue&type=template&id=58c2c4ae&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/fs.md","mtime":1537933948876},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"fs-文件系统\"><a class=\"header-anchor\" href=\"#fs-文件系统\" aria-hidden=\"true\">#</a> fs 文件系统</h1>\n<blockquote>\n<p>提供了一些与系统文件交互的 api</p>\n</blockquote>\n<p>所有的系统文件操作都提供同步和异步两种方式</p>\n<h2 id=\"文件路径\"><a class=\"header-anchor\" href=\"#文件路径\" aria-hidden=\"true\">#</a> 文件路径</h2>\n<p>可以是以下三种</p>\n<ul>\n<li>字符串(相对路径、绝对路径)</li>\n<li>Buffer</li>\n<li><code>file:</code>协议的 url 对象</li>\n</ul>\n<h2 id=\"线程池的使用\"><a class=\"header-anchor\" href=\"#线程池的使用\" aria-hidden=\"true\">#</a> 线程池的使用</h2>\n<p>除了<code>fs.FSWatcher()</code>和显示同步的方法外,都是用了线程池去操作</p>\n<h2 id=\"文件描述符\"><a class=\"header-anchor\" href=\"#文件描述符\" aria-hidden=\"true\">#</a> 文件描述符</h2>\n<p>在 POSIX 系统中内核为所有进程维护者一张当前打开着的文件与资源的表格,每个打开的文件都会分配一个名为文件描述符的数值标识,可以根据这些数值标识来追踪每个文件,Windows 也适用了类似的机制来追踪资源,为了方便,Node 抽象了不同操作系统之间的差异,为所有打开的文件分配了数值的文件描述符</p>\n<p><code>fs.open()</code>方法用于分配一个新的文件描述符.一旦分配了,可以利用文件描述符读取数据,写入数据或者查看文件信息</p>\n<p>大多数操作系统都会限制打开文件描述符的数量,所以当操作完成时须关闭文件描述符,否则造成内存泄漏,应用崩溃</p>\n<h2 id=\"fs-fswatcher-类\"><a class=\"header-anchor\" href=\"#fs-fswatcher-类\" aria-hidden=\"true\">#</a> fs.FSWatcher 类</h2>\n<p><code>fs.watch()</code>会返回一个<code>fs.FSWatcher</code>对象,每当监视的文件发生变化,都会出发<code>change</code>事件</p>\n<p><strong>change 事件</strong></p>\n<ul>\n<li><code>eventType</code>事件类型</li>\n<li><code>filename</code>改变的文件名</li>\n</ul>\n<p>当被监视的目录和文件发生改变时触发</p>\n<p><strong>error 事件</strong></p>\n<ul>\n<li><code>error</code></li>\n</ul>\n<p>当监视文件发生错误时触发</p>\n<p><strong>watch.close()</strong></p>\n<p>停止监视文件的变化</p>\n<h2 id=\"fs-readstream-类\"><a class=\"header-anchor\" href=\"#fs-readstream-类\" aria-hidden=\"true\">#</a> fs.ReadStream 类</h2>\n<p>成功调起<code>fs.createReadStream()</code>会返回一个<code>fs.readStream</code>对象</p>\n<p><strong>close 事件</strong></p>\n<p><code>fs.readStream</code>底层的文件描述符被关闭时触发</p>\n<p><strong>open 事件</strong></p>\n<p><code>fs.readStream</code>文件描述符被打开时触发</p>\n<p><strong>ready 事件</strong></p>\n<p><code>fs.readStream</code>准备好时触发</p>\n<p><strong>readStream.bytesRead</strong></p>\n<p>已读取的字节数</p>\n<p><strong>readStream.path</strong></p>\n<p>流正在读取文件的路径</p>\n<h2 id=\"fs-stats-类\"><a class=\"header-anchor\" href=\"#fs-stats-类\" aria-hidden=\"true\">#</a> fs.stats 类</h2>\n<p><code>fs.stats</code>类提供了文件的信息</p>\n<p>获取</p>\n<ul>\n<li><code>fs.stat()</code></li>\n<li><code>fs.lstat()</code></li>\n<li><code>fs.fstat()</code></li>\n</ul>\n<p>如果传入函数的<code>options</code>的<code>bigint</code>属性为<code>true</code>,则数值则会使<code>bitint</code>型,而不是<code>number</code>型</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stats.isCharacterDevice()</td>\n<td>是否是一个字符设备</td>\n</tr>\n<tr>\n<td>stats.isDirectory()</td>\n<td>是否是一个目录</td>\n</tr>\n<tr>\n<td>stats.isFIFO()</td>\n<td>是否是一个先进先出的管道</td>\n</tr>\n<tr>\n<td>stats.isFile()</td>\n<td>是否是一个文件</td>\n</tr>\n<tr>\n<td>stats.isSocket</td>\n<td>是否是一个 socket</td>\n</tr>\n<tr>\n<td>stats.isSymbolicLink()</td>\n<td>是否是一个符号链接,只有在使用<code>fs.lstat()</code>有用</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>attribute</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stats.dev</td>\n<td>包含文件设备的数值标识</td>\n</tr>\n<tr>\n<td>stats.ino</td>\n<td>文件系统特定的文件索引节点数值</td>\n</tr>\n<tr>\n<td>stats.mode</td>\n<td>标识文件类型与模式的位域</td>\n</tr>\n<tr>\n<td>stats.nlink</td>\n<td>文件硬链接的数量</td>\n</tr>\n<tr>\n<td>stats.uid</td>\n<td>文件拥有者的数值型用户标识</td>\n</tr>\n<tr>\n<td>stats.gid</td>\n<td>文件拥有者所在群组数值型群组标识</td>\n</tr>\n<tr>\n<td>stats.size</td>\n<td>文件的字节大小</td>\n</tr>\n<tr>\n<td>stats.blksize</td>\n<td>文件用语 I/O 操作块的大小</td>\n</tr>\n<tr>\n<td>stats.block</td>\n<td>分配给文件块的数量</td>\n</tr>\n<tr>\n<td>stats.atimeMs</td>\n<td>文件最后一次被访问的时间戳</td>\n</tr>\n<tr>\n<td>stats.mtimeMs</td>\n<td>文件最后一次被修改的时间戳</td>\n</tr>\n<tr>\n<td>stats.ctimeMs</td>\n<td>文件状态最后一次被改变的时间戳</td>\n</tr>\n<tr>\n<td>stats.birthtimeMs</td>\n<td>文件创建时间的时间戳</td>\n</tr>\n<tr>\n<td>stats.atime</td>\n<td>文件最后一次被访问的时间</td>\n</tr>\n<tr>\n<td>stats.mtime</td>\n<td>文件最后一次被修改的时间</td>\n</tr>\n<tr>\n<td>stats.ctime</td>\n<td>文件状态最后一次被改变的时间</td>\n</tr>\n<tr>\n<td>stats.birthtime</td>\n<td>文件的创建时间</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"stat-时间的值\"><a class=\"header-anchor\" href=\"#stat-时间的值\" aria-hidden=\"true\">#</a> stat 时间的值</h3>\n<p>时间戳均精确到毫秒,精度与平台相关</p>\n<h2 id=\"fs-writestream-类\"><a class=\"header-anchor\" href=\"#fs-writestream-类\" aria-hidden=\"true\">#</a> fs.WriteStream 类</h2>\n<p>是一个可写流</p>\n<p><strong>close 事件</strong></p>\n<p><code>WriteStream</code>底层的文件描述符被关闭时触发</p>\n<p><strong>open 事件</strong></p>\n<p>文件被打开时触发</p>\n<p><strong>ready 事件</strong></p>\n<p><code>fs.WriteStream</code>准备好的时候触发</p>\n<p><strong>writeStream.bytesWritten</strong></p>\n<p>已经写入的字节数</p>\n<p><strong>writeStream.path</strong></p>\n<p>流正在写入的文件的路径,指定在<code>fs.createWriteStream()</code>的第一个参数</p>\n<h2 id=\"fs-access-path-mode-callback\"><a class=\"header-anchor\" href=\"#fs-access-path-mode-callback\" aria-hidden=\"true\">#</a> fs.access(path[, mode], callback)</h2>\n<p>测试<code>path</code>指定目录或文件的用户权限</p>\n<p>参数</p>\n<ul>\n<li><code>path</code></li>\n<li><code>mode</code>默认<code>fs.constants.F_OK</code></li>\n<li><code>callback</code>\n<ul>\n<li>error</li>\n</ul>\n</li>\n</ul>\n<p>不建议在打开,写入,读取文件的时候调用此方法</p>\n<p><strong>fs.accessSync()</strong></p>\n<p><code>fs.access()</code>方法的同步版本</p>\n<h2 id=\"fs-appendfile-path-data-options-callback\"><a class=\"header-anchor\" href=\"#fs-appendfile-path-data-options-callback\" aria-hidden=\"true\">#</a> fs.appendFile(path, data[, options], callback)</h2>\n<p>异步追加数据到文件,如果文件不存在则创建文件</p>\n<p><strong>fs.appendFileSync()</strong></p>\n<p><code>fs.appendFile()</code>方法的同步版本</p>\n<h2 id=\"fs-chmod-path-mode-callback\"><a class=\"header-anchor\" href=\"#fs-chmod-path-mode-callback\" aria-hidden=\"true\">#</a> fs.chmod(path, mode, callback)</h2>\n<p>改变文件的权限</p>\n<p>mode 常量</p>\n<table>\n<thead>\n<tr>\n<th>mode</th>\n<th>Octal</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fs.constants.S_IRUSR</td>\n<td>0o400</td>\n<td>read by owner</td>\n</tr>\n<tr>\n<td>fs.constants.S_IWUSR</td>\n<td>0o200</td>\n<td>write by owner</td>\n</tr>\n<tr>\n<td>fs.constants.S_IXUSR</td>\n<td>0o100</td>\n<td>execute/search by owner</td>\n</tr>\n<tr>\n<td>fs.constants.S_IRGRP</td>\n<td>0o40</td>\n<td>read by group</td>\n</tr>\n<tr>\n<td>fs.constants.S_IWGRP</td>\n<td>0o20</td>\n<td>write by group</td>\n</tr>\n<tr>\n<td>fs.constants.S_IXGRP</td>\n<td>0o10</td>\n<td>execute/search by group</td>\n</tr>\n<tr>\n<td>fs.constants.S_IROTH</td>\n<td>0o4</td>\n<td>read by others</td>\n</tr>\n<tr>\n<td>fs.constants.S_IWOTH</td>\n<td>0o2</td>\n<td>white by others</td>\n</tr>\n<tr>\n<td>fs.constants.S_IXOTH</td>\n<td>0o1</td>\n<td>execute/search by others</td>\n</tr>\n</tbody>\n</table>\n<p><strong>fs.chmodSync()</strong></p>\n<p><code>fs.chmod()</code>的同步版本</p>\n<h2 id=\"fs-chown-path-uid-gid-callback\"><a class=\"header-anchor\" href=\"#fs-chown-path-uid-gid-callback\" aria-hidden=\"true\">#</a> fs.chown(path, uid, gid, callback)</h2>\n<p>问遍文件所有者和群组</p>\n<p><strong>fs.chownSync()</strong></p>\n<p><code>fs.chown()</code>的同步版本</p>\n<h2 id=\"fs-constants\"><a class=\"header-anchor\" href=\"#fs-constants\" aria-hidden=\"true\">#</a> fs.constants</h2>\n<p>包含常用文件操作系统的常量</p>\n<h2 id=\"fs-copyfile-src-dest-flags-callback\"><a class=\"header-anchor\" href=\"#fs-copyfile-src-dest-flags-callback\" aria-hidden=\"true\">#</a> fs.copyFile(src, dest[, flags], callback)</h2>\n<p>复制文件</p>\n<p><strong>fs.copyFileSync()</strong></p>\n<p><code>fs.copyFile()</code>的同步版本</p>\n<h2 id=\"fs-createreadstream-path-options\"><a class=\"header-anchor\" href=\"#fs-createreadstream-path-options\" aria-hidden=\"true\">#</a> fs.createReadStream(path[, options])</h2>\n<p>创建一个文件读入流</p>\n<p>参数</p>\n<ul>\n<li><code>path</code>文件路径</li>\n<li><code>options</code>\n<ul>\n<li><code>flags</code>支持的文件系统 flag,默认为<code>r</code></li>\n<li><code>encoding</code>默认为<code>null</code></li>\n<li><code>fd</code>默认为<code>null</code></li>\n<li><code>mode</code>默认为<code>0o666</code></li>\n<li><code>autoClose</code>默认为<code>true</code></li>\n<li><code>start</code></li>\n<li><code>end</code>默认<code>Infinity</code></li>\n<li><code>highWaterMark</code>默认<code>64*1024</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fs-createwritestream-path-options\"><a class=\"header-anchor\" href=\"#fs-createwritestream-path-options\" aria-hidden=\"true\">#</a> fs.createWriteStream(path[, options])</h2>\n<p>创建一个文件写入流</p>\n<p>参数</p>\n<ul>\n<li><code>path</code>文件路径</li>\n<li><code>options</code>\n<ul>\n<li><code>flags</code></li>\n<li><code>encoding</code></li>\n<li><code>fd</code></li>\n<li><code>mode</code></li>\n<li><code>autoClose</code></li>\n<li><code>start</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fs-existsync-path\"><a class=\"header-anchor\" href=\"#fs-existsync-path\" aria-hidden=\"true\">#</a> fs.existSync(path)</h2>\n<p>同步判断路径是否存在</p>\n<h2 id=\"fs-readdir-path-options-callback\"><a class=\"header-anchor\" href=\"#fs-readdir-path-options-callback\" aria-hidden=\"true\">#</a> fs.readdir(path[, options], callback)</h2>\n<p>读取一个目录的内容</p>\n<p>参数</p>\n<ul>\n<li><code>path</code></li>\n<li><code>options</code>\n<ul>\n<li><code>encoding</code></li>\n</ul>\n</li>\n<li><code>callback</code>\n<ul>\n<li><code>err</code></li>\n<li><code>files</code>不包括<code>.</code>和<code>..</code>文件名的数组</li>\n</ul>\n</li>\n</ul>\n<p><strong>fs.readdir()</strong></p>\n<p><code>fs.readdir()</code>同步版本</p>\n<h2 id=\"fs-readfile-path-options-callback\"><a class=\"header-anchor\" href=\"#fs-readfile-path-options-callback\" aria-hidden=\"true\">#</a> fs.readFile(path[, options], callback)</h2>\n<p>读取文件</p>\n<p>参数</p>\n<ul>\n<li><code>path</code></li>\n<li><code>options</code>\n<ul>\n<li><code>encoding</code>编码格式,默认为<code>null</code></li>\n<li><code>flags</code></li>\n</ul>\n</li>\n<li><code>callback</code>\n<ul>\n<li><code>err</code></li>\n<li><code>data</code>文件数据</li>\n</ul>\n</li>\n</ul>\n<p>优先使用<code>fs.createReadStream()</code></p>\n<p><strong>fs.readFileSync()</strong></p>\n<p><code>fs.readFile()</code>同步版本</p>\n<h2 id=\"fs-unlink-path-callback\"><a class=\"header-anchor\" href=\"#fs-unlink-path-callback\" aria-hidden=\"true\">#</a> fs.unlink(path, callback)</h2>\n<p>删除文件</p>\n<p>提供同步的<code>fs.unlinkSync()</code>版本</p>\n<h2 id=\"fs-rename-oldpath-newpath-callback\"><a class=\"header-anchor\" href=\"#fs-rename-oldpath-newpath-callback\" aria-hidden=\"true\">#</a> fs.rename(oldPath, newPath, callback)</h2>\n<p>重命名文件</p>\n<p>提供同步的<code>fs.renameSync()</code>版本</p>\n<h2 id=\"fs-mkdir-path-mode-callback\"><a class=\"header-anchor\" href=\"#fs-mkdir-path-mode-callback\" aria-hidden=\"true\">#</a> fs.mkdir(path[, mode], callback)</h2>\n<p>异步创建目录</p>\n<p>提供同步的<code>fs.mkdirSync()</code>方法</p>\n<h2 id=\"fs-rmdir-path-callback\"><a class=\"header-anchor\" href=\"#fs-rmdir-path-callback\" aria-hidden=\"true\">#</a> fs.rmdir(path, callback)</h2>\n<p>异步删除目录</p>\n<p>提供同步的<code>fs.rmdir()</code>方法</p>\n<h2 id=\"fs-writefile-path-data-options-callback\"><a class=\"header-anchor\" href=\"#fs-writefile-path-data-options-callback\" aria-hidden=\"true\">#</a> fs.writeFile(path, data[, options], callback)</h2>\n<p>将数据写入文件,若文件已经存在,则覆盖</p>\n<p>参数</p>\n<ul>\n<li><code>path</code></li>\n<li><code>data</code></li>\n<li><code>options</code>\n<ul>\n<li><code>encoding</code></li>\n<li><code>mode</code></li>\n<li><code>flag</code></li>\n</ul>\n</li>\n<li><code>callback</code>\n<ul>\n<li><code>err</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>fs.writeFileSync()</strong></p>\n<p><code>fs.writeFile()</code>的同步版本</p>\n<h2 id=\"fs-watch-filename-options-listener\"><a class=\"header-anchor\" href=\"#fs-watch-filename-options-listener\" aria-hidden=\"true\">#</a> fs.watch(filename[, options[, listener]])</h2>\n<p>监视<code>filename</code>的变化,对象可以是一个目录或者文件,返回一个<code>fs.FSWatcher</code>对象</p>\n<p>参数</p>\n<ul>\n<li><code>filename</code></li>\n<li><code>options</code>\n<ul>\n<li><code>persistent</code>如果文件正在被监视,进程是否继续运行,默认为<code>true</code></li>\n<li><code>recursive</code>是否全部子目录应该被监视,默认为<code>false</code></li>\n<li><code>encoding</code>用于传给监听器的文件名的编码,默认<code>utf8</code></li>\n</ul>\n</li>\n<li><code>listener</code>\n<ul>\n<li><code>eventType</code></li>\n<li><code>filename</code></li>\n</ul>\n</li>\n</ul>\n<p>监听器的回调是绑定在<code>fs.FSWatcher</code>的<code>change</code>事件上面</p>\n</div>\n",null]}