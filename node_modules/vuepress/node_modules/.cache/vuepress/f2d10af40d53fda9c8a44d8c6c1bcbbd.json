{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/process.md?vue&type=template&id=1664fcc5&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/node/process.md","mtime":1537926977708},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537926978403},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537926981332},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537926981441}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"process-进程\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#process-进程\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" process 进程\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"是一个全局变量，提供当前 Node 进程的有关信息，以及控制当前 Node 的进程\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"proccess-事件\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#proccess-事件\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" proccess 事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"process 对象是一个\"),\n        _c(\"code\", [_vm._v(\"EventEmit\")]),\n        _vm._v(\"实例\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"beforeExit 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"当 Node 事件循环数组已经为空，并且没有额外的工作添加进来，事件\"\n        ),\n        _c(\"code\", [_vm._v(\"beforeExit\")]),\n        _vm._v(\n          \"就会被触发，正常情况，如果时间循环数组为空，Node 进程就会结束，如果绑定\"\n        ),\n        _c(\"code\", [_vm._v(\"beforeExit\")]),\n        _vm._v(\"事件的监听函数是一个异步回调函数，则 Node 进程则会继续运行\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"code\", [_vm._v(\"process.exitCode\")]),\n        _vm._v(\"作为唯一的值传递给\"),\n        _c(\"code\", [_vm._v(\"beforeExit\")]),\n        _vm._v(\"事件的监听回调函数\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"如果直接调用\"),\n        _c(\"code\", [_vm._v(\"process.exit()\")]),\n        _vm._v(\"终止 Node 进程，\"),\n        _c(\"code\", [_vm._v(\"beforeExit\")]),\n        _vm._v(\"事件不会被触发\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"disconnect 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"如果 Node 进程由 IPC 通道方式创建，当 IPC 通道关闭时，会触发该事件\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"exit 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"以下两个操作会触发\"),\n        _c(\"code\", [_vm._v(\"exit\")]),\n        _vm._v(\"事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_vm._v(\"显示调用\"), _c(\"code\", [_vm._v(\"process.exit()\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"Node 事件循环数组没有额外的工作，Node 进程即将结束\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"一旦\"),\n        _c(\"code\", [_vm._v(\"exit\")]),\n        _vm._v(\"的回调函数执行完成，将没有任何操作能终止 Node 的结束，并且\"),\n        _c(\"code\", [_vm._v(\"exit\")]),\n        _vm._v(\n          \"事件的监听函数里面不能包含异步操作，任何在事件循环数组中排队的工作都将被丢弃\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"message 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"如果 Node 进程由 IPC 通道方式创建，当子进程收到父进程发送的消息时，会触发\"\n        ),\n        _c(\"code\", [_vm._v(\"message\")]),\n        _vm._v(\"事件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"uncaughtException 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\n            \"当 JavaScript 发生未捕获的异常，沿着代码调用路径反向传递回事件循环，会触发\"\n          ),\n          _c(\"code\", [_vm._v(\"uncaughtException\")]),\n          _vm._v(\"事件\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"Node 默认情况下，将异常打印到\"),\n          _c(\"code\", [_vm._v(\"stderr\")]),\n          _vm._v(\"，然后结束进程退出\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"为\"),\n          _c(\"code\", [_vm._v(\"uncaughtException\")]),\n          _vm._v(\"事件添加监听函数可以覆盖上述默认行为，回调函数接受一个\"),\n          _c(\"code\", [_vm._v(\"Error\")]),\n          _vm._v(\"对象作为参数\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"unhandledRejection 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"如果在一次事件的轮询中，一个\"),\n        _c(\"code\", [_vm._v(\"Promise\")]),\n        _vm._v(\"被 rejected，并且此\"),\n        _c(\"code\", [_vm._v(\"Promise\")]),\n        _vm._v(\"没有绑定错误处理器，\"),\n        _c(\"code\", [_vm._v(\"unhandledRejection\")]),\n        _vm._v(\"事件就会被触发\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"事件的回调函数包含两个参数，一个是 rejected 的相关信息\"),\n        _c(\"code\", [_vm._v(\"reason\")]),\n        _vm._v(\"，第二个是被 rejected 的\"),\n        _c(\"code\", [_vm._v(\"promise\")]),\n        _vm._v(\"对象\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"rejectionHandled 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"如果一个\"),\n        _c(\"code\", [_vm._v(\"Promise\")]),\n        _vm._v(\"被 rejected，并且此\"),\n        _c(\"code\", [_vm._v(\"Promise\")]),\n        _vm._v(\"在事件的下次轮询及之后期间，被绑定了一个错误的处理器，会触发\"),\n        _c(\"code\", [_vm._v(\"rejectionHandled\")]),\n        _vm._v(\"事件，回调函数接受被 rejected 的\"),\n        _c(\"code\", [_vm._v(\"Promise\")]),\n        _vm._v(\"对象\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"可以使用下面代码来监控被异步处理后的 rejected 的\"),\n        _c(\"code\", [_vm._v(\"Promise\")]),\n        _vm._v(\"对象\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"const\")\n            ]),\n            _vm._v(\" unhandledRejections \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"Map\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\nprocess\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"on\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'unhandledRejection'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"reason\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" p\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=>\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n  unhandledRejections\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"set\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"p\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" reason\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\nprocess\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"on\")]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"'rejectionHandled'\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"p\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"=>\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n  unhandledRejections\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"delete\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"p\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\"在同步代码的情况下，当未处理的异常队列增长时，会触发\"),\n          _c(\"code\", [_vm._v(\"uncaughtException\")]),\n          _vm._v(\"事件\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"在异步代码的情况下，当未处理的异常队列增长时，会触发\"),\n          _c(\"code\", [_vm._v(\"unhandledRejection\")]),\n          _vm._v(\"事件，当未处理的异常队列缩短时，会触发\"),\n          _c(\"code\", [_vm._v(\"rejectionHandled\")]),\n          _vm._v(\"事件\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"warning 事件\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"任何时间向 Node 进程发出警告，都会触发\"),\n        _c(\"code\", [_vm._v(\"warning\")]),\n        _vm._v(\"事件，将警告相关信息打印到\"),\n        _c(\"code\", [_vm._v(\"stderr\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"可以通过\"),\n        _c(\"code\", [_vm._v(\"process.emitWarning()\")]),\n        _vm._v(\"来触发一个警告\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.abort()\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"立即结束 Node 进程，并生成一个 core 文件\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.arch\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回一个表示 CPU 架构的字符串，例如\"),\n        _c(\"code\", [_vm._v(\"arm\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"arm64\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"ia32\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"mips\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"mipsel\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"ppc\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"ppc64\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"s390\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"s390x\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"x32\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"x64\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.argv\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回一个数组，包含启动 Node 的命令行参数\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.argv0\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"保存 Node 启动传入\"),\n        _c(\"code\", [_vm._v(\"argv[0]\")]),\n        _vm._v(\"参数的只读副本\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.channel\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"如果 Node 是以 IPC 方式创建，\"),\n        _c(\"code\", [_vm._v(\"process.channel\")]),\n        _vm._v(\"保存 IPC channel 的引用\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.chdir(directory)\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"变更当前 Node 的工作目录，如果变更失败回抛出异常\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.config\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回一个对象，包含用于当前编译当前 Node 执行程序涉及的配置信息\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.connected\")])]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\n              \"如果 Node 是以 IPC 方式创建，只要 IPC channel 保持连接，则\"\n            ),\n            _c(\"code\", [_vm._v(\"process.connected\")]),\n            _vm._v(\"返回\"),\n            _c(\"code\", [_vm._v(\"true\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"调用\"),\n            _c(\"code\", [_vm._v(\"process.disconnect()\")]),\n            _vm._v(\"，\"),\n            _c(\"code\", [_vm._v(\"process.connected\")]),\n            _vm._v(\"返回\"),\n            _c(\"code\", [_vm._v(\"false\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"如果\"),\n            _c(\"code\", [_vm._v(\"process.connected\")]),\n            _vm._v(\"返回\"),\n            _c(\"code\", [_vm._v(\"false\")]),\n            _vm._v(\"，则不能通过 IPC channel 使用\"),\n            _c(\"code\", [_vm._v(\"process.send()\")]),\n            _vm._v(\"发送信息\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.cpuUsage([previousValue])\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回包含当前用户的 cpu 时间和系统的 cpu时间的对象，包含\"),\n        _c(\"code\", [_vm._v(\"user\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\"system\")]),\n        _vm._v(\"属性，单位是微秒\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.cwd()\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回 Node 进程的工作目录\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.env\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回一个包含用户环境信息的对象\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.execArgv\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回 Node 进程被启动时，Node 的特定命令选项\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.execPath\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回启动 Node 的可执行文件的绝对路径\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.exit([code])\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"以结束状态码结束 Node 进程\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [\n          _vm._v(\n            \"process.geteuid()、process.getegid()、process.getgid()、process.getuid()、process.getgroups()\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_vm._v(\"有效数字标识的用户身份\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"有效数字标识的组身份\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"数字标记的组身份\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"数字标识的用户身份\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"补充的组 ID 数组\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.memoryUsage\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回 Node 进程的内存使用情况，单位是字节\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.nextTick(callback[, args])\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"将 callback 放到当前事件轮询队尾开始执行，\"),\n        _c(\"code\", [_vm._v(\"args\")]),\n        _vm._v(\"为传入 callback 的参数\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.pid\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回 Node 进程运行的 pid\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.plagform\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"返回运行 Node 的操作系统平台，比如\"),\n        _c(\"code\", [_vm._v(\"aix\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"darwin\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"freebsd\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"linux\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"openbsd\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"sunos\")]),\n        _vm._v(\"、\"),\n        _c(\"code\", [_vm._v(\"win32\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.ppid\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"Node 进程父进程的进程 ID\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"process.stdin、process.stdout、process.stderr\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"process.stdin\")]),\n          _vm._v(\"连接到\"),\n          _c(\"code\", [_vm._v(\"stdin\")]),\n          _vm._v(\"的流\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"process.stdout\")]),\n          _vm._v(\"连接到\"),\n          _c(\"code\", [_vm._v(\"stdout\")]),\n          _vm._v(\"的流，内部使用\"),\n          _c(\"code\", [_vm._v(\"console.log()\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"process.stderr\")]),\n          _vm._v(\"连接到\"),\n          _c(\"code\", [_vm._v(\"stderr\")]),\n          _vm._v(\"的流，内部使用\"),\n          _c(\"code\", [_vm._v(\"console.err()\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.title\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"获取或者设置当前 Node 进程在\"),\n        _c(\"code\", [_vm._v(\"ps\")]),\n        _vm._v(\"命令中显示的进程名字\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.uptime\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"Node 运行的时间秒长\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.version\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回 Node 的版本信息\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"process.versions\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"返回一个对象，包含 Node 及其依赖的版本信息\")]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"exit-codes\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#exit-codes\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Exit Codes\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"正常情况心爱，如果没有异步操作正在等待，Node 会以状态码\"),\n        _c(\"code\", [_vm._v(\"0\")]),\n        _vm._v(\"退出，其他情况的状态码如下\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_c(\"code\", [_vm._v(\"1\")]), _vm._v(\"未捕获异常\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"2\")]), _vm._v(\"暂未被使用\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"3\")]),\n          _vm._v(\"内部 JavaScript 分析错误\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"4\")]),\n          _vm._v(\"内部 JavaScript 执行失败\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"5\")]), _vm._v(\"致命错误\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"6\")]), _vm._v(\"非函数的内部异常处理\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"7\")]), _vm._v(\"内部异常处理运行时失败\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"8\")]), _vm._v(\"暂未被使用\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"9\")]), _vm._v(\"不可用参数\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"10\")]),\n          _vm._v(\"内部 JavaScript 运行时失败\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"12\")]), _vm._v(\"不可用的调试参数\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"128\")]), _vm._v(\"退出信号\")])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}