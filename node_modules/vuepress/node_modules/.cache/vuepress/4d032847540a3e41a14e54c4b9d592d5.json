{"remainingRequest":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/class.md?vue&type=template&id=8c13c9d4&","dependencies":[{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/docs/es6/class.md","mtime":1537933948864},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1537933952458},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1537933949569},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vue-loader/lib/index.js","mtime":1537933952457},{"path":"/Users/jianhaihao/Documents/Products/jianhaihao.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1537933952565}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"class-的基本语法\"><a class=\"header-anchor\" href=\"#class-的基本语法\" aria-hidden=\"true\">#</a> Class 的基本语法</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\" aria-hidden=\"true\">#</a> 简介</h2>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`x: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, y: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>所有的方法定义在<code>prototype</code>对象上面，方法之间不能用多好隔开</li>\n<li>可以直接用<code>new</code>命令进行实例化，</li>\n<li>所有类内部定义的方法，都是不可枚举的 (no-enumerable)</li>\n<li>类和模块的内部，默认使用严格模式</li>\n<li>默认会带有一个空的<code>constructor</code>方法，表示类的实例化方法</li>\n<li>不存在变量提升</li>\n<li>类的<code>name</code>属性为<code>class</code>关键字后的变量名</li>\n<li>可以为类定义属性的存值函数 (setter) 和取值函数 (getter)</li>\n<li>可以通过在方法前面加上<code>static</code>关键字来定义类的静态方法，可以直接通过类名 + 方法名的形式掉用，且可以被子类继承</li>\n<li><code>ES6</code>规定类的内部只有静态方法，没有静态属性</li>\n</ul>\n<p><code>ES6</code>建议尽量用<code>Object.getPrototypeOf()</code>方法去获取实例对象的原型，而不是通过<code>__proto__</code>。</p>\n<h2 id=\"私有属性和私有方法\"><a class=\"header-anchor\" href=\"#私有属性和私有方法\" aria-hidden=\"true\">#</a> 私有属性和私有方法</h2>\n<ul>\n<li>一般约定私有属性和私有方法前面加上<code>_</code>表示内部属性，但这是不安全的</li>\n<li>使用 Symbol 值，在类内部使用 Symbol 值作为变量的名字，利用 Symbol 值的唯一性，可以保证该属性不可在第三方访问</li>\n</ul>\n<h2 id=\"静态属性和实例属性\"><a class=\"header-anchor\" href=\"#静态属性和实例属性\" aria-hidden=\"true\">#</a> 静态属性和实例属性</h2>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\nFoo<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>ES6</code>只能通过上面代码的方式定义静态属性。</p>\n<p>目前有一个新的提案来定义类的静态属性和实例属性，可以了解下。</p>\n<h3 id=\"类的实例属性\"><a class=\"header-anchor\" href=\"#类的实例属性\" aria-hidden=\"true\">#</a> 类的实例属性</h3>\n<ul>\n<li>在定义类的内部通过等号的方式来定义实例属性</li>\n</ul>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  myProp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"类的静态属性\"><a class=\"header-anchor\" href=\"#类的静态属性\" aria-hidden=\"true\">#</a> 类的静态属性</h3>\n<p>只要在实例属性前面加上<code>static</code>关键字就可以定义静态属性，大大方便了静态属性的定义和表达</p>\n<h2 id=\"new-target-属性\"><a class=\"header-anchor\" href=\"#new-target-属性\" aria-hidden=\"true\">#</a> new.target 属性</h2>\n<p>在构造函数内部使用，表示<code>new</code>命令作用于哪个构造函数，如果没有使用<code>new</code>命令，<code>new.target</code>返回<code>undefined</code></p>\n</div>\n",null]}