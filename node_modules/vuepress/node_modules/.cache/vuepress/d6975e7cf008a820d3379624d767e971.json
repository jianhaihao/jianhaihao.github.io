{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\data-structure\\array.md?vue&type=template&id=0b48874e&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\data-structure\\array.md","mtime":1552906499846},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1552483045256},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552483034552},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1552483045254},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1552483045520}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"数组\\\"><a href=\\\"#数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组</h1> <blockquote><p>操作：增删改查（类比数据库）<br>\\n属性：容量（capacity）、大小（size）</p></blockquote> <h2 id=\\\"初始化\\\"><a href=\\\"#初始化\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 初始化</h2> <blockquote><p>成员变量：数组data、 数组大小size<br>\\n构造函数，传入数组的容量capacity构造Array，初始化size=0<br>\\n无参数构造函数，默认数组容量capacity=10<br>\\n获取数组中的元素个数<br>\\n获取数据的容量<br>\\n返回数组是否为空</p></blockquote> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 定义泛型数组</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token generics function\\\"><span class=\\\"token punctuation\\\">&lt;</span>E<span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> E<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> data<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">int</span> size<span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token comment\\\">// 构造函数，传入数组的容量capacity构造Array</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> capacity<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\tdata <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">[</span>capacity<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tsize <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">// 无参数构造函数，默认容量10</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// 获取数组中的元素个数</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> size<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 获取数组容量</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getCapacity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// 返回数组是否为空</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">isEmpty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> size <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// ……</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n</code></pre></div><h2 id=\\\"添加元素\\\"><a href=\\\"#添加元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 添加元素</h2> <blockquote><p>向数组末尾添加元素e</p></blockquote> <p><code>addLast(int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">/**\\n * 方法1\\n */</span>\\n\\n<span class=\\\"token comment\\\">// 校验：数组是否已满</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>size <span class=\\\"token operator\\\">==</span> data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token comment\\\">// 数组容量已满，抛出异常</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 添加元素</span>\\ndata<span class=\\\"token punctuation\\\">[</span>size<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 维护size</span>\\nsize<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * 方法2\\n */</span>\\n\\n<span class=\\\"token comment\\\">// 直接调用add函数</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>size<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><blockquote><p>向数组头部添加元素e</p></blockquote> <p><code>addFirst(int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 直接调用add函数</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><blockquote><p>在数组index位置插入元素e</p></blockquote> <p><code>add(int index, int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 校验：index是否合法</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> index <span class=\\\"token operator\\\">&gt;</span> size<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token comment\\\">// index不能为负数，且不能大于size（即数组中间不能含有空元素）</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 校验：数组是否已满</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>size <span class=\\\"token operator\\\">==</span> data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token comment\\\">// 处理1：数组容量已满，抛出异常</span>\\n\\n   <span class=\\\"token comment\\\">// 处理2：进行扩容</span>\\n   <span class=\\\"token function\\\">resize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span>data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 将&gt;=index位置的所有元素往后移动一位</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> size <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&gt;=</span> index <span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\tdata<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// index位置插入元素e</span>\\ndata<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 维护size</span>\\nsize<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><h2 id=\\\"获取元素\\\"><a href=\\\"#获取元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 获取元素</h2> <p><code>get(int index)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 校验：index是否合法</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> index <span class=\\\"token operator\\\">&gt;=</span> szie<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// index 非法</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><h2 id=\\\"修改元素\\\"><a href=\\\"#修改元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 修改元素</h2> <p><code>set(int index, int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 校验：index是否合法</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> index <span class=\\\"token operator\\\">&gt;=</span> szie<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// index 非法</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ndata<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n\\n\\n</code></pre></div><h2 id=\\\"包含元素\\\"><a href=\\\"#包含元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 包含元素</h2> <p><code>contains(int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> size<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><h2 id=\\\"查找元素\\\"><a href=\\\"#查找元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 查找元素</h2> <p><code>find(int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> size<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><h2 id=\\\"删除元素\\\"><a href=\\\"#删除元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 删除元素</h2> <blockquote><p>删除index位置的元素，返回删除的元素</p></blockquote> <p><code>remove(int index)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token comment\\\">// 校验：index是否合法</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> index <span class=\\\"token operator\\\">&gt;=</span> szie<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// index 非法</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 记录待返回的元素</span>\\n<span class=\\\"token keyword\\\">int</span> ret <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 依次循环，将index之后位置的元素，统一向前移动一位，将index挤出去</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> index <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> size<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tdata<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 维护size</span>\\nsize<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// data[size] = null;</span>\\n\\n<span class=\\\"token comment\\\">// 方案1</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>size <span class=\\\"token operator\\\">==</span> data<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">resize</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 方案2（防止复杂度震荡）</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>size <span class=\\\"token operator\\\">==</span> data<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">&amp;&amp;</span> data<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">resize</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 返回删除元素 </span>\\n<span class=\\\"token keyword\\\">return</span> ret<span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><blockquote><p>删除第一个元素，返回删除的元素</p></blockquote> <p><code>removeFirst()</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><blockquote><p>删除最后一个元素，返回删除的元素</p></blockquote> <p><code>removeLast()</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span>size <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><blockquote><p>删除元素e</p></blockquote> <p><code>removeElement(int e)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\n<span class=\\\"token keyword\\\">int</span> index <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">!=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n</code></pre></div><h2 id=\\\"使用泛型\\\"><a href=\\\"#使用泛型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用泛型</h2> <blockquote><p>让数据结构可以放置“任何”数据类型\\n不可以是基本数据类型，只能是类对象<br>\\nboolean 、 byte 、 char 、 short 、 int 、 long 、 float 、 double\\n每个基本数据类型都有对应的包装类\\nBoolean 、 Byte 、 Char 、 Short 、 Int 、 Long 、 Float 、 Double</p></blockquote> <h2 id=\\\"动态数组\\\"><a href=\\\"#动态数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 动态数组</h2> <p><code>resize(int newCapacity)</code></p> <div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>\\nE<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> newData <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>E<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">[</span>newCapacity<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> size<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tnewData<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ndata <span class=\\\"token operator\\\">=</span> newData<span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><h2 id=\\\"时间复杂度\\\"><a href=\\\"#时间复杂度\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 时间复杂度</h2> <blockquote><p>O(1)，O(n)，O(lgn)，O(nlogn)，O(n^2)<br>\\n大O描述的是算法的运行时间和输入数据之间的关系</p></blockquote> <p>动态数组的时间复杂度</p> <blockquote><ul><li>增：O(n)</li> <li>删：O(n)</li> <li>改：已知索引O(1)，未知索引O(n)</li> <li>查：已知索引O(1)，未知索引O(n)</li></ul></blockquote> <p>均摊复杂度</p> <blockquote><p>动态数组扩容与缩容不是每次都发生的\\n平均看来是每两次操作促发一次\\n按均摊复杂度分析，动态数组增、删元素时间复杂度为O(1)</p></blockquote> <p>复杂度震荡</p> <blockquote><p>removeLast时resize过于着急(Eager)<br>\\n解决方案：Lazy\\n当size == capacity/4 时，才将capacity减半</p></blockquote>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}