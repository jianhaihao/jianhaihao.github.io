{"remainingRequest":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\Products\\jianhaihao.github.io\\docs\\git\\webhook.md?vue&type=template&id=0bde7d69&","dependencies":[{"path":"D:\\Products\\jianhaihao.github.io\\docs\\git\\webhook.md","mtime":1547080673825},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Products\\jianhaihao.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"ssh-key\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#ssh-key\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" ssh-key\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"生成ssh-key\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#生成ssh-key\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 生成ssh-key\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-bash extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-bash\" } }, [\n          _c(\"code\", [\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# linux环境\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 进入家目录\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cd\")\n            ]),\n            _vm._v(\" ~\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 如未配置git全局用户名，进行配置\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"git\")\n            ]),\n            _vm._v(\" config --global  user.name \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v('\"用户名\"')\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 如未配置git全局邮箱，进行配置\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"git\")\n            ]),\n            _vm._v(\" config --global user.email \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v('\"邮箱\"')\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 生成密钥（执行命令后一直回车即可）\")\n            ]),\n            _vm._v(\"\\nssh-keygen -t rsa -C \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v('\"邮箱\"')\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 进入生成密钥的目录\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cd\")\n            ]),\n            _vm._v(\" ~/.ssh/\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看ssh-key\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cat\")\n            ]),\n            _vm._v(\" id_rsa.pub\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 将ssh-key配置到个人git账户中\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 进入github官网：https://github.com/settings/keys 中的 SSH keys\"\n              )\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 测试 ssh-key\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"ssh\")\n            ]),\n            _vm._v(\" -T git@github.com\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 输入yes后若显示 \")\n            ]),\n            _vm._v(\"\\nHi xxx\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"!\")\n            ]),\n            _vm._v(\n              \" You’ve successfully authenticated, but GitHub does not provide shell access. \\n\"\n            ),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 则代表成功\")\n            ]),\n            _vm._v(\"\\n\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"使ssh-key生效\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#使ssh-key生效\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 使ssh-key生效\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-bash extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-bash\" } }, [\n          _c(\"code\", [\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# github上传ssh-key后仍须输入密码问题\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 这种事情通常发生在更换机器后克隆自己仓库的时候，通常我们会使用https方式克隆\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"git\")\n            ]),\n            _vm._v(\" clone https://github.com/Name/project.git\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 这样便会在你git push时候要求输入用户名和密码\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 解决的方法是使用ssh方式克隆仓库\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"git\")\n            ]),\n            _vm._v(\" clone git@github.com:Name/project.git\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 如果你已经用https方式克隆了仓库，就不必删除仓库重新克隆，只需将 .git/config 文件中的\"\n              )\n            ]),\n            _vm._v(\"\\nurl \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" https://github.com/Name/project.git\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 改为 \")\n            ]),\n            _vm._v(\"\\nurl \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" git@github.com:Name/project.git\\n\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"配置webhook\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#配置webhook\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 配置webhook\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-bash extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-bash\" } }, [\n          _c(\"code\", [\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看当前网络访问时的用户\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"##################文件内容开始线#############################\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"<\")\n            ]),\n            _vm._v(\"?php\\n\\nexec\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v('\"whoami\"')\n            ]),\n            _vm._v(\", \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token variable\" } }, [\n              _vm._v(\"$out\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"     \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# whoami = id -un\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"echo\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v('\"<pre>\"')\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\nprint_r\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token variable\" } }, [\n              _vm._v(\"$out\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"##################文件内容结束线#############################\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 通过浏览器访问该文件，获得用户名\")\n            ]),\n            _vm._v(\"\\napache      \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 本机演示得到的用户名，请以实际用户名为准\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 将当前需要git同步的仓库目录，权限给到浏览器访问的用户名\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"chown\")\n            ]),\n            _vm._v(\" -R apache:apache demo    \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# demo为演示的服务器仓库目录（demo 或 demo/ 都可以）\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 如遇以下报错信息：\")\n            ]),\n            _vm._v(\"\\nCould not create directory \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v(\"'/usr/share/httpd/.ssh'\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"\\nHost key verification failed.\\nfatal: Could not \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"read\")\n            ]),\n            _vm._v(\" from remote repository.\\nPlease \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"make\")\n            ]),\n            _vm._v(\n              \" sure you have the correct access rights\\nand the repository exists.\\n\\n\"\n            ),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 以上报错说明实际浏览器访问时，是到 /usr/share/httpd/.ssh 下读取公钥\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 因没有读到，只需要复制实际公钥生成的文件到当前文件夹下即可\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cd\")\n            ]),\n            _vm._v(\" /usr/share/httpd/\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"mkdir\")\n            ]),\n            _vm._v(\" .ssh\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cp\")\n            ]),\n            _vm._v(\" ~/.ssh/id_rsa /usr/share/httpd/.ssh/\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cp\")\n            ]),\n            _vm._v(\" ~/.ssh/id_rsa.pub /usr/share/httpd/.ssh/\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"cp\")\n            ]),\n            _vm._v(\" ~/.ssh/known_hosts /usr/share/httpd/.ssh/\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 将新增的密钥相关文件权限改到浏览器访问的用户名\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"chown\")\n            ]),\n            _vm._v(\" -R apache:apache .ssh\\n\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"非root用户运行docker\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#非root用户运行docker\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 非root用户运行docker\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-bash extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-bash\" } }, [\n          _c(\"code\", [\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 首先创建docker用户组，如果docker用户组存在可以忽略\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"sudo\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"groupadd\")\n            ]),\n            _vm._v(\" docker\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 把用户添加进docker组中\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"sudo\")\n            ]),\n            _vm._v(\" gpasswd -a \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token variable\" } }, [\n              _vm._v(\"${USER}\")\n            ]),\n            _vm._v(\" docker\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 重启docker\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"sudo\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"service\")\n            ]),\n            _vm._v(\" docker restart\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 如果普通用户执行docker命令，如果提示get …… dial unix /var/run/docker.sock权限不够\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"# 则修改/var/run/docker.sock权限使用root用户执行如下命令即可\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"sudo\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"chmod\")\n            ]),\n            _vm._v(\" a+rw /var/run/docker.sock\\n\\n\")\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"更新linux系统时间\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#更新linux系统时间\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 更新Linux系统时间\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-bash extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-bash\" } }, [\n          _c(\"code\", [\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 查看时间 \")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"date\")\n            ]),\n            _vm._v(\"\\n\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n              _vm._v(\"# 更新时间\")\n            ]),\n            _vm._v(\"\\nyum \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"install\")\n            ]),\n            _vm._v(\" ntpdate\\nntpdate time.windows.com\\n\\n\")\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}