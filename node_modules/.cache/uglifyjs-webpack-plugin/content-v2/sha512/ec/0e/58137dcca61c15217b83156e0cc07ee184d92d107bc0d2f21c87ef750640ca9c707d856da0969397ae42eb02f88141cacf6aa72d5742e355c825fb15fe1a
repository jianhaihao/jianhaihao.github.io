{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{170:function(t,e,s){\"use strict\";s.r(e);var n=s(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"content\"},[s(\"h1\",{attrs:{id:\"events-事件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#events-事件\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" events 事件\")]),t._v(\" \"),s(\"p\",[t._v(\"大多数 Node 核心的 API 都采用异步事件驱动的架构，一般通过触发命名事件来调用函数对象\")]),t._v(\" \"),s(\"p\",[t._v(\"所有触发事件的对象都是\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"对象的实例。这些对象开放了一个\"),s(\"code\",[t._v(\"emitEvent.on()\")]),t._v(\"函数，允许将一个或者多个回调函数绑定在会被对象触发的命名事件上\")]),t._v(\" \"),s(\"p\",[t._v(\"当事件触发时，所有绑定在该事件的函数都被同步的调用，监听器的返回值会被丢弃\")]),t._v(\" \"),s(\"p\",[t._v(\"一个绑定了监听器的\"),s(\"code\",[t._v(\"eventEmitter\")]),t._v(\"实例，通过\"),s(\"code\",[t._v(\"eventEmitter.on()\")]),t._v(\"来注册事件，\"),s(\"code\",[t._v(\"eventEmitter.emit()\")]),t._v(\"来触发事件\")]),t._v(\" \"),s(\"p\",[t._v(\"一个标准的事件注册和触发\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" events \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"require\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'events'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"eventEmitter\")]),t._v(\" extend events \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" myEmitter \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"eventEmiiter\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nmyEmitter\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"on\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'events'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  console\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nmyEmitter\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"emit\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'hello word'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// hello world\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"给监听器传入参数与-this\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#给监听器传入参数与-this\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 给监听器传入参数与 this\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"EventEmitter.emit()\")]),t._v(\"方法允许将任意参数传递给监听器，监听器的\"),s(\"code\",[t._v(\"this\")]),t._v(\"指向\"),s(\"code\",[t._v(\"eventEmit\")]),t._v(\"对象\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"异步与同步\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异步与同步\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 异步与同步\")]),t._v(\" \"),s(\"p\",[t._v(\"当一个事件触发时，\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"会按照监听器注册的时间顺序同步的被调用，如果想要被异步调用，可以将其放入\"),s(\"code\",[t._v(\"setImmediate()\")]),t._v(\"或者\"),s(\"code\",[t._v(\"process.nextTick()\")]),t._v(\"方法的回调函数中\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" myEmitter \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"MyEmitter\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nmyEmitter\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"on\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'event'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" b\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"setImmediate\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    console\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'这个是异步发生的'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nmyEmitter\"),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{attrs:{class:\"token function\"}},[t._v(\"emit\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'event'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'a'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{attrs:{class:\"token string\"}},[t._v(\"'b'\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"事件只处理一次\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件只处理一次\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 事件只处理一次\")]),t._v(\" \"),s(\"p\",[t._v(\"使用\"),s(\"code\",[t._v(\"EventEmitter.once()\")]),t._v(\"可以注册一个只能被调用一次的监听器，当被监听的事件触发的时候，监听器会被注销，然后再调用\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"错误处理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#错误处理\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 错误处理\")]),t._v(\" \"),s(\"p\",[t._v(\"当\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"中发生错误的时候，会触发一个\"),s(\"code\",[t._v(\"error\")]),t._v(\"事件，所以始终为\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"注册一个\"),s(\"code\",[t._v(\"error\")]),t._v(\"监听器是一个最佳实践\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"eventemitter-类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#eventemitter-类\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" EventEmitter 类\")]),t._v(\" \"),s(\"p\",[t._v(\"当为\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"添加一个新监听的时候，会触发一个\"),s(\"code\",[t._v(\"newListener\")]),t._v(\"事件，当监听器被移除的时候，会触发\"),s(\"code\",[t._v(\"removeListener\")]),t._v(\"事件\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"newListener 事件\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"EventListener\")]),t._v(\"实例在将一个监听器添加到内部监听器数组之前会触发自身的\"),s(\"code\",[t._v(\"newListener\")]),t._v(\"事件，事件名和回调函数会作为参数传入监听\"),s(\"code\",[t._v(\"newListener\")]),t._v(\"事件的监听器中\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"removeListener 事件\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"removeListener\")]),t._v(\"事件在监听器被移除后触发\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"静态属性\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 静态属性\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"EventEmitter.defaultMaxListeners\")])]),t._v(\" \"),s(\"p\",[t._v(\"每个事件默认可以注册 10 个监听器\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"单个\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"实例可以通过\"),s(\"code\",[t._v(\"setMaxListener(n)\")]),t._v(\"来改变\")]),t._v(\" \"),s(\"li\",[t._v(\"所有的\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"实例每个事件最大监听器数量可以通过\"),s(\"code\",[t._v(\"EventEmitter.defaultMaxListeners\")]),t._v(\"属性改变\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"实例方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 实例方法\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.addLisnter(evnetName, listener)\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"EventEmiter.on()\")]),t._v(\"的别名\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.emit(eventName)\")])]),t._v(\" \"),s(\"p\",[t._v(\"按照监听器的注册顺序，同步调用每个注册到\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的监听器，如果有监听器返回\"),s(\"code\",[t._v(\"true\")]),t._v(\"，没有放回\"),s(\"code\",[t._v(\"false\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.eventNames()\")])]),t._v(\" \"),s(\"p\",[t._v(\"返回触发器已经注册监听器的事件名称的名称\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.getMaxListeners()\")])]),t._v(\" \"),s(\"p\",[t._v(\"返回\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"实例一个事件最多可以注册的监听器数量\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.listenerCount(eventName)\")])]),t._v(\" \"),s(\"p\",[t._v(\"返回正在监听名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"监听器的数量\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.listeners(eventName)\")])]),t._v(\" \"),s(\"p\",[t._v(\"返回名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的事件的监听器的数组副本\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.off(eventName)\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"emitter.removeListener\")]),t._v(\"的别名\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.on(eventName, listener)\")])]),t._v(\" \"),s(\"p\",[t._v(\"注册一个名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的事件\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.once(eventName, listener)\")])]),t._v(\" \"),s(\"p\",[t._v(\"添加一个单次\"),s(\"code\",[t._v(\"listener\")]),t._v(\"函数到名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的事件的监听器，下次触发\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"之后，该监听器会被移除，再调用\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.prependListener(eventName, listener)\")])]),t._v(\" \"),s(\"p\",[t._v(\"添加\"),s(\"code\",[t._v(\"listener\")]),t._v(\"函数到名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的事件监听器数组的开头，返回一个\"),s(\"code\",[t._v(\"EventEmitter\")]),t._v(\"实例，可以链式调用\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.prependOnceListener(eventName, listener)\")])]),t._v(\" \"),s(\"p\",[t._v(\"添加一个单次\"),s(\"code\",[t._v(\"listener\")]),t._v(\"监听器到名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的事件的监听器数组的开头，下次触发\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"之后，该监听器会被移除，再调用\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.removeAllListeners(eventName)\")])]),t._v(\" \"),s(\"p\",[t._v(\"移除全部或指定名称的监听器\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.removeListener(eventName, listener)\")])]),t._v(\" \"),s(\"p\",[t._v(\"从名为\"),s(\"code\",[t._v(\"eventName\")]),t._v(\"的事件的监听器数组中移除\"),s(\"code\",[t._v(\"listener\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"emitter.setMaxListeners(n)\")])]),t._v(\" \"),s(\"p\",[t._v(\"设置一个事件的最大监听器数量\")])])}],!1,null,null,null);a.options.__file=\"events.md\";e.default=a.exports}}]);","extractedComments":[]}