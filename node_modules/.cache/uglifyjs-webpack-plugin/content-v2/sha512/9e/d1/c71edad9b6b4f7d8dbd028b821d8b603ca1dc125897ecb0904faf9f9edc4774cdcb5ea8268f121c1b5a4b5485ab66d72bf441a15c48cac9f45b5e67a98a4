{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{204:function(v,_,e){\"use strict\";e.r(_);var s=e(0),o=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var v=this,_=v.$createElement,e=v._self._c||_;return e(\"div\",{staticClass:\"content\"},[e(\"h1\",{attrs:{id:\"process-进程\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#process-进程\",\"aria-hidden\":\"true\"}},[v._v(\"#\")]),v._v(\" process 进程\")]),v._v(\" \"),e(\"p\",[v._v(\"是一个全局变量，提供当前 Node 进程的有关信息，以及控制当前 Node 的进程\")]),v._v(\" \"),e(\"h2\",{attrs:{id:\"proccess-事件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#proccess-事件\",\"aria-hidden\":\"true\"}},[v._v(\"#\")]),v._v(\" proccess 事件\")]),v._v(\" \"),e(\"p\",[v._v(\"process 对象是一个\"),e(\"code\",[v._v(\"EventEmit\")]),v._v(\"实例\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"beforeExit 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"当 Node 事件循环数组已经为空，并且没有额外的工作添加进来，事件\"),e(\"code\",[v._v(\"beforeExit\")]),v._v(\"就会被触发，正常情况，如果时间循环数组为空，Node 进程就会结束，如果绑定\"),e(\"code\",[v._v(\"beforeExit\")]),v._v(\"事件的监听函数是一个异步回调函数，则 Node 进程则会继续运行\")]),v._v(\" \"),e(\"p\",[e(\"code\",[v._v(\"process.exitCode\")]),v._v(\"作为唯一的值传递给\"),e(\"code\",[v._v(\"beforeExit\")]),v._v(\"事件的监听回调函数\")]),v._v(\" \"),e(\"p\",[v._v(\"如果直接调用\"),e(\"code\",[v._v(\"process.exit()\")]),v._v(\"终止 Node 进程，\"),e(\"code\",[v._v(\"beforeExit\")]),v._v(\"事件不会被触发\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"disconnect 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果 Node 进程由 IPC 通道方式创建，当 IPC 通道关闭时，会触发该事件\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"exit 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"以下两个操作会触发\"),e(\"code\",[v._v(\"exit\")]),v._v(\"事件\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"显示调用\"),e(\"code\",[v._v(\"process.exit()\")])]),v._v(\" \"),e(\"li\",[v._v(\"Node 事件循环数组没有额外的工作，Node 进程即将结束\")])]),v._v(\" \"),e(\"p\",[v._v(\"一旦\"),e(\"code\",[v._v(\"exit\")]),v._v(\"的回调函数执行完成，将没有任何操作能终止 Node 的结束，并且\"),e(\"code\",[v._v(\"exit\")]),v._v(\"事件的监听函数里面不能包含异步操作，任何在事件循环数组中排队的工作都将被丢弃\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"message 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果 Node 进程由 IPC 通道方式创建，当子进程收到父进程发送的消息时，会触发\"),e(\"code\",[v._v(\"message\")]),v._v(\"事件\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"uncaughtException 事件\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"当 JavaScript 发生未捕获的异常，沿着代码调用路径反向传递回事件循环，会触发\"),e(\"code\",[v._v(\"uncaughtException\")]),v._v(\"事件\")]),v._v(\" \"),e(\"li\",[v._v(\"Node 默认情况下，将异常打印到\"),e(\"code\",[v._v(\"stderr\")]),v._v(\"，然后结束进程退出\")]),v._v(\" \"),e(\"li\",[v._v(\"为\"),e(\"code\",[v._v(\"uncaughtException\")]),v._v(\"事件添加监听函数可以覆盖上述默认行为，回调函数接受一个\"),e(\"code\",[v._v(\"Error\")]),v._v(\"对象作为参数\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"unhandledRejection 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果在一次事件的轮询中，一个\"),e(\"code\",[v._v(\"Promise\")]),v._v(\"被 rejected，并且此\"),e(\"code\",[v._v(\"Promise\")]),v._v(\"没有绑定错误处理器，\"),e(\"code\",[v._v(\"unhandledRejection\")]),v._v(\"事件就会被触发\")]),v._v(\" \"),e(\"p\",[v._v(\"事件的回调函数包含两个参数，一个是 rejected 的相关信息\"),e(\"code\",[v._v(\"reason\")]),v._v(\"，第二个是被 rejected 的\"),e(\"code\",[v._v(\"promise\")]),v._v(\"对象\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"rejectionHandled 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果一个\"),e(\"code\",[v._v(\"Promise\")]),v._v(\"被 rejected，并且此\"),e(\"code\",[v._v(\"Promise\")]),v._v(\"在事件的下次轮询及之后期间，被绑定了一个错误的处理器，会触发\"),e(\"code\",[v._v(\"rejectionHandled\")]),v._v(\"事件，回调函数接受被 rejected 的\"),e(\"code\",[v._v(\"Promise\")]),v._v(\"对象\")]),v._v(\" \"),e(\"p\",[v._v(\"可以使用下面代码来监控被异步处理后的 rejected 的\"),e(\"code\",[v._v(\"Promise\")]),v._v(\"对象\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-javascript extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[e(\"code\",[e(\"span\",{attrs:{class:\"token keyword\"}},[v._v(\"const\")]),v._v(\" unhandledRejections \"),e(\"span\",{attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token keyword\"}},[v._v(\"new\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token class-name\"}},[v._v(\"Map\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\nprocess\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\".\")]),e(\"span\",{attrs:{class:\"token function\"}},[v._v(\"on\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),e(\"span\",{attrs:{class:\"token string\"}},[v._v(\"'unhandledRejection'\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),v._v(\"reason\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\" p\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token operator\"}},[v._v(\"=>\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"{\")]),v._v(\"\\n  unhandledRejections\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\".\")]),e(\"span\",{attrs:{class:\"token keyword\"}},[v._v(\"set\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),v._v(\"p\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\" reason\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"}\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\nprocess\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\".\")]),e(\"span\",{attrs:{class:\"token function\"}},[v._v(\"on\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),e(\"span\",{attrs:{class:\"token string\"}},[v._v(\"'rejectionHandled'\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),v._v(\"p\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token operator\"}},[v._v(\"=>\")]),v._v(\" \"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"{\")]),v._v(\"\\n  unhandledRejections\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\".\")]),e(\"span\",{attrs:{class:\"token keyword\"}},[v._v(\"delete\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),v._v(\"p\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\"),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\"}\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\")\")]),e(\"span\",{attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\")])])]),e(\"ul\",[e(\"li\",[v._v(\"在同步代码的情况下，当未处理的异常队列增长时，会触发\"),e(\"code\",[v._v(\"uncaughtException\")]),v._v(\"事件\")]),v._v(\" \"),e(\"li\",[v._v(\"在异步代码的情况下，当未处理的异常队列增长时，会触发\"),e(\"code\",[v._v(\"unhandledRejection\")]),v._v(\"事件，当未处理的异常队列缩短时，会触发\"),e(\"code\",[v._v(\"rejectionHandled\")]),v._v(\"事件\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"warning 事件\")])]),v._v(\" \"),e(\"p\",[v._v(\"任何时间向 Node 进程发出警告，都会触发\"),e(\"code\",[v._v(\"warning\")]),v._v(\"事件，将警告相关信息打印到\"),e(\"code\",[v._v(\"stderr\")])]),v._v(\" \"),e(\"p\",[v._v(\"可以通过\"),e(\"code\",[v._v(\"process.emitWarning()\")]),v._v(\"来触发一个警告\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.abort()\")])]),v._v(\" \"),e(\"p\",[v._v(\"立即结束 Node 进程，并生成一个 core 文件\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.arch\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回一个表示 CPU 架构的字符串，例如\"),e(\"code\",[v._v(\"arm\")]),v._v(\"、\"),e(\"code\",[v._v(\"arm64\")]),v._v(\"、\"),e(\"code\",[v._v(\"ia32\")]),v._v(\"、\"),e(\"code\",[v._v(\"mips\")]),v._v(\"、\"),e(\"code\",[v._v(\"mipsel\")]),v._v(\"、\"),e(\"code\",[v._v(\"ppc\")]),v._v(\"、\"),e(\"code\",[v._v(\"ppc64\")]),v._v(\"、\"),e(\"code\",[v._v(\"s390\")]),v._v(\"、\"),e(\"code\",[v._v(\"s390x\")]),v._v(\"、\"),e(\"code\",[v._v(\"x32\")]),v._v(\"、\"),e(\"code\",[v._v(\"x64\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.argv\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回一个数组，包含启动 Node 的命令行参数\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.argv0\")])]),v._v(\" \"),e(\"p\",[v._v(\"保存 Node 启动传入\"),e(\"code\",[v._v(\"argv[0]\")]),v._v(\"参数的只读副本\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.channel\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果 Node 是以 IPC 方式创建，\"),e(\"code\",[v._v(\"process.channel\")]),v._v(\"保存 IPC channel 的引用\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.chdir(directory)\")])]),v._v(\" \"),e(\"p\",[v._v(\"变更当前 Node 的工作目录，如果变更失败回抛出异常\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.config\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回一个对象，包含用于当前编译当前 Node 执行程序涉及的配置信息\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.connected\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[v._v(\"如果 Node 是以 IPC 方式创建，只要 IPC channel 保持连接，则\"),e(\"code\",[v._v(\"process.connected\")]),v._v(\"返回\"),e(\"code\",[v._v(\"true\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"调用\"),e(\"code\",[v._v(\"process.disconnect()\")]),v._v(\"，\"),e(\"code\",[v._v(\"process.connected\")]),v._v(\"返回\"),e(\"code\",[v._v(\"false\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"如果\"),e(\"code\",[v._v(\"process.connected\")]),v._v(\"返回\"),e(\"code\",[v._v(\"false\")]),v._v(\"，则不能通过 IPC channel 使用\"),e(\"code\",[v._v(\"process.send()\")]),v._v(\"发送信息\")])])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.cpuUsage([previousValue])\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回包含当前用户的 cpu 时间和系统的 cpu时间的对象，包含\"),e(\"code\",[v._v(\"user\")]),v._v(\"和\"),e(\"code\",[v._v(\"system\")]),v._v(\"属性，单位是微秒\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.cwd()\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回 Node 进程的工作目录\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.env\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回一个包含用户环境信息的对象\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.execArgv\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回 Node 进程被启动时，Node 的特定命令选项\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.execPath\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回启动 Node 的可执行文件的绝对路径\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.exit([code])\")])]),v._v(\" \"),e(\"p\",[v._v(\"以结束状态码结束 Node 进程\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.geteuid()、process.getegid()、process.getgid()、process.getuid()、process.getgroups()\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"有效数字标识的用户身份\")]),v._v(\" \"),e(\"li\",[v._v(\"有效数字标识的组身份\")]),v._v(\" \"),e(\"li\",[v._v(\"数字标记的组身份\")]),v._v(\" \"),e(\"li\",[v._v(\"数字标识的用户身份\")]),v._v(\" \"),e(\"li\",[v._v(\"补充的组 ID 数组\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.memoryUsage\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回 Node 进程的内存使用情况，单位是字节\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.nextTick(callback[, args])\")])]),v._v(\" \"),e(\"p\",[v._v(\"将 callback 放到当前事件轮询队尾开始执行，\"),e(\"code\",[v._v(\"args\")]),v._v(\"为传入 callback 的参数\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.pid\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回 Node 进程运行的 pid\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.plagform\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回运行 Node 的操作系统平台，比如\"),e(\"code\",[v._v(\"aix\")]),v._v(\"、\"),e(\"code\",[v._v(\"darwin\")]),v._v(\"、\"),e(\"code\",[v._v(\"freebsd\")]),v._v(\"、\"),e(\"code\",[v._v(\"linux\")]),v._v(\"、\"),e(\"code\",[v._v(\"openbsd\")]),v._v(\"、\"),e(\"code\",[v._v(\"sunos\")]),v._v(\"、\"),e(\"code\",[v._v(\"win32\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.ppid\")])]),v._v(\" \"),e(\"p\",[v._v(\"Node 进程父进程的进程 ID\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.stdin、process.stdout、process.stderr\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[v._v(\"process.stdin\")]),v._v(\"连接到\"),e(\"code\",[v._v(\"stdin\")]),v._v(\"的流\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"process.stdout\")]),v._v(\"连接到\"),e(\"code\",[v._v(\"stdout\")]),v._v(\"的流，内部使用\"),e(\"code\",[v._v(\"console.log()\")])]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"process.stderr\")]),v._v(\"连接到\"),e(\"code\",[v._v(\"stderr\")]),v._v(\"的流，内部使用\"),e(\"code\",[v._v(\"console.err()\")])])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.title\")])]),v._v(\" \"),e(\"p\",[v._v(\"获取或者设置当前 Node 进程在\"),e(\"code\",[v._v(\"ps\")]),v._v(\"命令中显示的进程名字\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.uptime\")])]),v._v(\" \"),e(\"p\",[v._v(\"Node 运行的时间秒长\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.version\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回 Node 的版本信息\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"process.versions\")])]),v._v(\" \"),e(\"p\",[v._v(\"返回一个对象，包含 Node 及其依赖的版本信息\")]),v._v(\" \"),e(\"h2\",{attrs:{id:\"exit-codes\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#exit-codes\",\"aria-hidden\":\"true\"}},[v._v(\"#\")]),v._v(\" Exit Codes\")]),v._v(\" \"),e(\"p\",[v._v(\"正常情况心爱，如果没有异步操作正在等待，Node 会以状态码\"),e(\"code\",[v._v(\"0\")]),v._v(\"退出，其他情况的状态码如下\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[v._v(\"1\")]),v._v(\"未捕获异常\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"2\")]),v._v(\"暂未被使用\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"3\")]),v._v(\"内部 JavaScript 分析错误\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"4\")]),v._v(\"内部 JavaScript 执行失败\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"5\")]),v._v(\"致命错误\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"6\")]),v._v(\"非函数的内部异常处理\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"7\")]),v._v(\"内部异常处理运行时失败\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"8\")]),v._v(\"暂未被使用\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"9\")]),v._v(\"不可用参数\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"10\")]),v._v(\"内部 JavaScript 运行时失败\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"12\")]),v._v(\"不可用的调试参数\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"128\")]),v._v(\"退出信号\")])])])}],!1,null,null,null);o.options.__file=\"process.md\";_.default=o.exports}}]);","extractedComments":[]}